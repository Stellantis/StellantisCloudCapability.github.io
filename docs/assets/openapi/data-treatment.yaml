openapi: 3.0.0
servers:
  - url: https://server/api/connectedcar/v1
info:
  version: '1.0.28'
  title: Stellantis Connected Car API
  description: |
    *Connected Car API*

    # Introduction
    This is the description of the *Stellantis Connected Car V2 API*. The speccification is  is based on **OpenAPI Specification version 3** and can be displayed using [ReDoc](https://github.com/Rebilly/ReDoc) or [Swagger](http://swagger.io).


      This API allows applications to fetch data from the Connected Vehicles Data Platform. It is designed to be **a declarative data and function specification**, so they are understood and consumed by stakeholders without knowledge of manufacturer onboard vehicle specification

    ---
    # API features


     ## Vehicles:
      <i>Access to static vehicle resources such as brand, description and images as well as the IoT data.</i>
    ##  Trips:
      <i>Access to the trips traveled by the vehicle and their data such as telemetry, alerts and waypoints, etc.</i>
     ## Channel:
     <i> Definition of an output channel that can be used as a return channel for the Monitor and Remote functions or as an output for the datastream.</i>
     ## Monitor:
      <i>Creating a monitor with several flags that define a logical expression that is the exact functional condition for triggering the monitor. It is also possible to define the actions (remote action or monitor changes) to invoke when receiving a particular monitor event. Thus, it can be possible to automate scenarios.</i>
     ## Remote:
      <i>Send the remote command to the vehicle. It is also possible to define the actions (remote action or monitor changes) to invoke when receiving a particular remote event channel status. Thus, it can be possible to automate scenarios.</i>
    ##  Datastream:
      <i>Create output data streams on a defined channel. Data sent on this stream are the same as that exposed by the APIs.</i>
      
      ---
      

    # API Authentication

      Stellantis Connected Car APIs uses the [OAuth  2.0](https://tools.ietf.org/html/rfc6F49) protocol for authentication and
      authorization. Any application require a valid [Access Token](https://tools.ietf.org/html/rfc6749#section-1.4) to access to data.

      ## Filtering Scopes

      - When  API caller requests a set of scopes. The owner may not grant access to all of the requested scopes, so the application will have to adapt to the restricted access or request for a larger set of scopes again.
      - API backend will deliver the data related to the granted scopes only. 
      - If no scope has been granted with the caller token then an unauthorized error will be returned.
          
        _If for example the API caller requests for "telemetry" or "trip" endpoint without having the "location" scope, then the resource data returned will not have the vehicle's position but only other data that will satisfy the scopes present in the token._
      
       ##  Use of Scopes
      - Scopes are specified  in each individual API.
      - Depending on the API, scope can be :
        - Mandatory (designed with comment "#Required"): if this scope is not used during the request an error will be returned. An API can have multiple mandatory scopes.
        - Optional scopes will return an optional part of the API.
        
      
      ## Hierarchical Scopes
      
      Since API resources are hierarchical, API uses also hierarchical scopes. 
        _Colon characters_ are used to navigate to subresource scopes.
          
      **The scopes used to request access to resources for the OAuth2 security scheme fall into four categories:**

      #### _1. <u>IoT data scopes:</u>_
      |<b>Scope</b>  |<b>Description</b>  | 
      |---|---|
      |data:vehicle| read Vehicle attributes data|
      |data:telemetry| read full telemetry data|
      |data:telemetry:environment|read telemetry environment data|
      |data:telemetry:privacy|read telemetry privacy data|
      |data:telemetry:vehicle|read full telemetry vehicle data|
      |data:telemetry:vehicle:ignition|read telemetry vehicle ignition data|
      |data:telemetry:vehicle:location |read vehicle location data|
      |data:telemetry:vehicle:preconditioning|read telemetry vehicle preconditioning system data|
      |data:telemetry:vehicle:tyreState|read telemetry vehicle tyre data|
      |data:telemetry:vehicle:energies|read telemetry vehicle  energies data|
      |data:telemetry:vehicle:engines|read telemetry vehicle all engines data|
      |data:telemetry:vehicle:doorsState|read telemetry vehicle doors state data|
      |data:telemetry:vehicle:battery|read telemetry vehicle status battery data|
      |data:telemetry:vehicle:safety|read telemetry vehicle safety  data|
      |data:telemetry:vehicle:odometer|read telemetry vehicle odometer data|
      |data:telemetry:vehicle:kinetic|read telemetry vehicle kinetic data|
      |data:telemetry:vehicle:propulsion|read telemetry vehicle propulsion mode|
      |data:telemetry:vehicle:braking|read telemetry vehicle braking system data|
      |data:telemetry:vehicle:wipingBlades|read telemetry vehicle wiping blades data|
      |data:telemetry:vehicle:transmission|read telemetry vehicle transmission data|
      |data:telemetry:vehicle:adas|read telemetry vehicle ADAS data|
      |data:telemetry:vehicle:lightingSystem|read telemetry vehicle lighting system data|
      |data:telemetry:vehicle:maintenance |read telemetry vehicle maintenance data|
      |data:telemetry:vehicle:drivingBehavior|read telemetry driver behavior data|
      |data:telemetry:vehicle:alert|read telemetry alert data|
      |data:telemetry:vehicle:alarm|read telemetry alarm data|
      |data:trip| read trip related data|
      |data:collision| read collision related data|
      #### _2. <u>Notification channel scopes:</u>_
      |<b>Scope</b>  |<b>Description</b>  | 
      |---|---|       
      |channel| read calback related data|
      |channel:<b>write</b>| create, modify or delete channels|
       #### _3. <u>Vehicle grouping scopes:</u>_
      |<b>Scope</b>  |<b>Description</b>  | 
      |---|---|       
      |grouping| read groups related data|
      |grouping:<b>write</b>| create, modify or delete groups|
      #### _4. <u>Vehicle monitor scopes:</u>_
      |<b>Scope</b>  |<b>Description</b>  | 
      |---|---|       
      |monitor| read monitors|
      |monitor:<b>write</b>| create, modify or delete Monitors|
      #### _5. <u>Datastream scopes:</u>_
      |<b>Scope</b>  |<b>Description</b>  | 
      |---|---|       
      |datastream| read exisiting datastream (subscribed, status...) setting|
      |datastream:<b>write</b>| create, modify or delete datastreams|
      #### _6. <u>Vehicle remotes scopes:</u>_
      |<b>Scope</b>  |<b>Description</b>  | 
      |---|---|            
      |remote| read full remote state(pending & history)|
      |remote:locking| read door remote (pending & history)|      
      |remote:locking:<b>write</b>| send a door remote to vehicle|
      |remote:horn| read horn remote  (pending & history)| 
      |remote:horn:<b>write</b>| send a horn remote to vehicle|
      |remote:lights| read lights remote (pending & history)| 
      |remote:lights:<b>write</b>| send remote to switch on/off vehicle lights|
      |remote:preconditioning| read preconditioning remote (pending & history)| 
      |remote:preconditioning:<b>write</b>| send a preconditioning remote to vehicle|
      |remote:onboardPersonalData| read onboardPersonalData remote (pending & history)| 
      |remote:onboardPersonalData:<b>write</b>| send an onboardPersonalData remote to vehicle|
      |remote:charging| read charging remote (pending & history)| 
      |remote:charging:<b>write</b>| send charging remote to vehicle|
      |remote:wakeUp| read wakeUp remote (pending & history)| 
      |remote:wakeUp:<b>write</b>| send wakeUp remote to vehicle|
       |remote:navigation:write|send desitnation to vehicle|
      |remote:vehicleFinder:write|Send find vehicle command |
      | remote:navigation|Read send destination to vehicle (pending & history)|
      | remote:vehicleFinder|Read vehicle finder command (pending & history)|

    ---
    # API Navigability:
      These APIs use [HATEOAS]([https://en.wikipedia.org/wiki/HATEOAS#Implementations) as standard convention for defining resources discovery and navifability (thanks to related hyperlinks).
      Adopting HAL simplifies the use of open source libraries and make it possible to interact with the API using JSON.
    ---          
    # API Paging:
    To make this necessary feature easy to use when retrieving a collection of results, this API uses a token (computed and interpreted by the backend only) as a context that contains all necessary information allowing the navigation through pages. 
      Token acts as an ```HTTP COOKIE``` on the client-side, so the server does not keep any cache or session settings to continue paging and keep all request stateless. These tokens are used to build HAL (Hypertext Application Language) hyperlinks also.
          
    ---
    # API Errors:
      Error codes returned by all APIs comply with the standard. Nevertheless, PSA Services (callers) need to have more detailed data structures (even when the answer is not Http-OK) to better categorize the type of error by providing application code, message and debugging code(for investigation purposes). The HTTP code of the response is managed by the protocol itself (in the header).
        
      ### These APIS are likely to report the following HTTP code:
      
      |<b>Code</b>  |<b>Description</b>  | <b>Case</b> | 
      |---|---|---|
      |200  |<i>The request has succeeded and the resource data has been sent.</i>|GET APIs.  |
      |202  |<i>The request has been accepted for processing, but not yet acted upon. An id of processing is returned.</i>|POST/PUT requests:<br>-Create monitor<br>-Create a callbak.| 
      |204  |<i>The request has been accepted and there is no additional content</i>|DELTE APIs:<br>-Delete monitor.<br>-Delete a channel.|
      |400|<i>Request cannot be processed due to invalid query parameter value of body content (for POST/PUT verbs)</i>|ALL APIs.|
      |401|<i>Unauthorized request due to lack of valid authentication credentials.</i>|All APIs.|
      |403|<i>Unauthorized request due to insufficient credentials to grant access.</i>|All APIs.|
      |404|<i>Target resource not found.|All APIs. Even POST, PUT or DELETE if the resource id is uncknown.</i>|
      |500|<i>Unexpected condition that prevented from fulfilling the reques.</i>|All APIs.|
      |501|<i>Feature not supported</i>|All APIs.| 

      
      **Errors are  returned as a generic error response:**
       * See ```ErrorCodeDefaultResponse``` model.
       
    ---
    # API output:
     
      ## Data format
      
      **All APIs return data in JSON format. The application who uses them must take into account the evolving character of them and more precisely regarding the schemas of the exposed data. Indeed:**
      
      *  The missing of known data fields should not cause an error. 
      *  It should (correctly)  deal with JSON content with unknown properties also. Indeed, data schema extensions should be supported without errors even if they are not used. 
        
      
      **for example:**
      
      Assuming a given exposed resource with this data schema:
        
          
           data:
            type: object
            description: Data model
            properties:
              field1:
                type: string
              field2:
                type: number
             
      The application should be able to deal with those possible valid JSON contents:
        
      > All fields:
        ```{
          "field1":"value1",
          "field2": 1
        }```
        
      > Missing field2:
        ```{
          "field1":"value1"
        }```        

      > Unknow  field3:
        ```{
          "field1":"value1",
          "field3": 2.5
        }```
      
     
    ---
  license:
    name: Stellantis Licence
    url: https://www.psa-peugeot-citroen.com/
tags:
  - name: Vehicles
    description: Access to attributes and IoT data associated with the vehicle.
  - name: Trips
    description: Describe Trips of a vehicle.
  - name: Channels
    description: Describe a subscription to an output channel for remote or monitor notification events or data-stream features.
  - name: Monitors
    description: Describe the vehicle monitor features.
  - name: Remotes
    description: Describe the vehicle remote features.
paths:
  /accounts/vehicles/{id}/capability:
    $ref: '#/x-fragment/Vehicle_id_Capability_getter'
  /accounts/vehicles:
    $ref: '#/x-fragment/Vehicles_getter'
  /accounts/vehicles/{id}:
    $ref: '#/x-fragment/Vehicle_id_getter'
  /accounts/vehicles/{id}/telemetries:
    $ref: '#/x-fragment/Vehicle_id_telemetries_getter'
  /accounts/vehicles/{id}/telemetries/latest:
    $ref: '#/x-fragment/Vehicle_id_lasttelemetries_getter'
  /accounts/vehicles/{id}/collisions:
    $ref: '#/x-fragment/Vehicle_id_collisions_getter'
  /accounts/vehicles/{id}/collisions/{cid}:
    $ref: '#/x-fragment/Vehicle_id_collisions_by_id_getter'
  /accounts/vehicles/{id}/alerts:
    $ref: '#/x-fragment/Vehicle_id_alerts_getter'
  /accounts/vehicles/{id}/alerts/{aid}:
    $ref: '#/x-fragment/Vehicle_id_alert_by_id_getter'
  /accounts/vehicles/{id}/alarms:
    $ref: '#/x-fragment/Vehicle_id_alarms_getter'
  /accounts/vehicles/{id}/alarms/{aid}:
    $ref: '#/x-fragment/Vehicle_id_alarm_aid_getter'
  /accounts/vehicles/{id}/charging/sessions:
    $ref: '#/x-fragment/Vehicle_id_chargeSessions'
  /accounts/vehicles/{id}/charging/sessions/{sid}:
    $ref: '#/x-fragment/Vehicle_id_ChargeSession_id'    
  /accounts/vehicles/{id}/trips:
    $ref: '#/x-fragment/Vehicle_id_Trips'
  /accounts/vehicles/{id}/trips/{tid}:
    $ref: '#/x-fragment/Vehicle_id_Trip_id'
  /accounts/vehicles/{id}/trips/{tid}/alerts:
    $ref: '#/x-fragment/Vehicle_id_Trip_id_Alerts_getter'
  /accounts/vehicles/{id}/trips/{tid}/alerts/{aid}:
    $ref: '#/x-fragment/Vehicle_id_Trip_id_Alerts_id_getter'
  /accounts/vehicles/{id}/trips/{tid}/collisions:
    $ref: '#/x-fragment/Vehicle_id_Trip_id_Collisions_getter'
  /accounts/vehicles/{id}/trips/{tid}/collisions/{cid}:
    $ref: '#/x-fragment/Vehicle_id_Trip_id_Collisions_id_getter'
  /accounts/vehicles/{id}/trips/{tid}/wayPoints:
    $ref: '#/x-fragment/Vehicle_id_Trip_id_wayPoints_getter'
  /accounts/vehicles/{id}/trips/{tid}/telemetry:
    $ref: '#/x-fragment/Vehicle_id_Trip_id_Telemetry_getter'
  /accounts/channels/{chId}/monitors:
    $ref: '#/x-fragment/Vehicle_id_cb_id_monitors_get_post'
  /accounts/channels/{chId}/monitors/{mid}:
    $ref: '#/x-fragment/Vehicle_id_cb_id_monitors_mid_crud'
  /accounts/channels/{chId}/monitors/{mid}/status:
    $ref: '#/x-fragment/ch_id_monitor_id_setter_put'
  /accounts/channels/{chId}/monitors/{mid}/handles:
    $ref: '#/x-fragment/ch_id_monitor_id_handles'
      
  /accounts/channels:
    $ref: '#/x-fragment/channels_crud'
  /accounts/channels/{chId}:
    $ref: '#/x-fragment/channel_id_crud'
  /accounts/channels/{chId}/status:
    $ref: '#/x-fragment/channel_id_status_put'
  /accounts/vehicles/{id}/channels/{chId}/remotes:
    $ref: '#/x-fragment/Vehicle_id_channel_id_remotes_crud'
  /accounts/vehicles/{id}/channels/{chId}/remotes/{rid}:
    $ref: '#/x-fragment/Vehicle_id_channel_id_remotes_id_getter'
  /accounts/vehicles/{id}/stolen:
    $ref: '#/x-fragment/Vehicle_id_stolen_reports_getter'
  /accounts/vehicles/{id}/stolen/{sid}:
    $ref: '#/x-fragment/Vehicle_id_stolen_id_report_getter'
  /accounts/vehicles/{id}/stolen/{sid}/waypoints:
    $ref: '#/x-fragment/Vehicle_id_stolen_id_report_waypoints_getter'   

components:
  securitySchemes:
    api_keyAuth:
      type: apiKey
      in: query
      name: client_id
    api_oauth:
      type: oauth2
      description: This API uses OAuth 2 with the implicit grant flow. [More info](https://api.example.com/docs/auth)
      flows:
        implicit:
          authorizationUrl: https://api.mpsa.com/api/connectedcar/v2/oauth/authorize
          scopes:
            data:vehicle: read vehicle attributes data
            data:telemetry: read full telemetry data
            data:telemetry:environment: read telemetry environment data
            data:telemetry:privacy: read telemetry privacy data
            data:telemetry:vehicle: read full telemetry vehicle data
            data:telemetry:vehicle:ignition: read telemetry vehicle ignition data
            data:telemetry:vehicle:location: read vehicle location data
            data:telemetry:vehicle:preconditioning: read telemetry vehicle preconditioning system data
            data:telemetry:vehicle:tyreState : read telemetry vehicle tyre data
            data:telemetry:vehicle:energies: read telemetry vehicle energies data
            data:telemetry:vehicle:engines: read telemetry vehicle engines data
            data:telemetry:vehicle:doorsState: read telemetry vehicle doors state data
            data:telemetry:vehicle:battery: read telemetry vehicle battery status data
            data:telemetry:vehicle:safety: read telemetry vehicle safety data
            data:telemetry:vehicle:odometer: read telemetry vehicle odometer data
            data:telemetry:vehicle:kinetic: read telemetry vehicle kinetic data
            data:telemetry:vehicle:propulsion: read telemetry vehicle propulsion mode
            data:telemetry:vehicle:braking: read telemetry vehicle braking system data
            data:telemetry:vehicle:wipingBlades: read telemetry vehicle wiping blades data
            data:telemetry:vehicle:transmission: read telemetry vehicle transmission data
            data:telemetry:vehicle:adas: read telemetry vehicle ADAS data
            data:telemetry:vehicle:lightingSystem: read telemetry vehicle lighting system data
            data:telemetry:vehicle:maintenance: read telemetry vehicle maintenance data
            data:telemetry:vehicle:drivingBehavior: read telemetry vehicle driver bihavior data
            data:telemetry:vehicle:alert: read telemetry alert data
            data:telemetry:vehicle:alarm: read telemetry alarm data
            data:trip: read Trip related data
            data:collision: read Collision related data
            channel: read calback related data
            channel:write: create, modify or delete channels
            monitor: read monitors
            monitor:write: create, modify or delete Monitors
            remote: read full remote state(pending & history)
            remote:locking: read door  remote (pending & history)
            remote:locking:write: send a door remote to vehicle
            remote:horn: read horn remote (pending & history)
            remote:horn:write: send a horn remote to vehicle
            remote:lights: read lights remote (pending & history)
            remote:lights:write: send remote to switch on/off vehicle lights
            remote:preconditioning: read preconditioning remote (pending & history)
            remote:preconditioning:write: send a preconditioning remote to vehicle
            remote:onboardPersonalData: read onboardPersonalData remote (pending & history)
            remote:onboardPersonalData:write: send an onboardPersonalData remote to vehicle
            remote:charging: read charging remote (pending & history)
            remote:charging:write: send charging remote to vehicle
            remote:wakeUp: read wakeUp remote (pending & history)
            remote:wakeUp:write: send remote to wakeUp vehicle
  schemas:
    TripEnergy:
      description: Describe vehicle energy supply for thermic, low emission vehicle or both.
      type: object
      required:
        - type
        - subType
      properties :
        type:
          $ref: '#/components/schemas/EnergyType'
        subType:
          $ref: '#/components/schemas/EnergySubType'
        level:
          type: number
          format: float
          description: Percentage of remaining energy (Fuel or electric) level. Expressed with a precision of 0.1%.
          minimum: 0
          maximum: 100
        autonomy:
          description: Vehicle autonomy expressed in km for this energy class.
          type: integer
          minimum : 0
    EnergyType:
          type: string
          description: Energy type present on the vehicle.
          enum: [Fuel, Electric]
    EnergySubType:
          type: string
          description: | 
            Energy subtype. This field is not mandatory and therefore if it is not present, it means that the resource consumer should only process the primary energy type. The enumeration of the subtypes is not exhaustive and may contain more elements depending on the evolution of the vehicles. The consumer of the data must take this constraint into account. The Fossil and Electric energy subtypes are only used to populate this subtype for the default Fuel and Electric types.
              * Electric and hydrogen type are considered as low emission vehicle whereas fuel(fossil) is associated to thermic energy
          enum: [FossilEnergy, ElectricEnergy, Hydrogen] 
    VehicleCapability:
      type: object
      properties:
        vin:
          description: Unique vehicle identifier number
          type: string
        brand:
          description: Brand of a vehicle
          type: string
        model:
          type: string
        motorization:
          type: string
          description: Motorization of the vehicle.
          enum:
            - Electric
            - Hybrid
            - Thermic
            - Hydrogen
        onboardCapabilities:
          $ref: '#/components/schemas/OnboardCapabilities'
      required:
        - vin
    OnboardCapabilities:
      type : object
      description: Provides details on the scopes for data and remote commands vehicle is capable of. Data and remote section will be populated only if  vehicle is supported by platform
      properties:
        data :
          description : List of retrievable data represented by their scopes.
          type: array
          items:
            type: string
            enum:
              - data:vehicle:devices:pnc
              - data:telemetry
              - data:telemetry:environment
              - data:telemetry:privacy
              - data:telemetry:vehicle
              - data:telemetry:vehicle:ignition
              - data:telemetry:vehicle:preconditioning
              - data:telemetry:vehicle:energies
              - data:telemetry:vehicle:engines
              - data:telemetry:vehicle:doorsState
              - data:telemetry:vehicle:powertrain
              - data:telemetry:vehicle:battery
              - data:telemetry:vehicle:safety
              - data:telemetry:vehicle:odometer
              - data:telemetry:vehicle:kinetic
              - data:telemetry:vehicle:transmission
              - data:telemetry:vehicle:adas
              - data:telemetry:vehicle:lightingSystem
              - data:telemetry:vehicle:maintenance
              - data:telemetry:vehicle:drivingBehavior
              - data:telemetry:vehicle:wipingBlades
              - data:telemetry:vehicle:alarm
              - data:position
              - data:trip
              - data:alert
              - data:collision
        remote :
          description : List of callable remote functions and associated supported properties.
          type: object
          required: [preconditioning,door,horn,charging,lights,wakeup,navigation, stolen]
          properties:
            preconditioning:
              required: [supported, scopeName, parameters]
              type: object
              properties:
                supported :
                  type: boolean
                  description: true means remote preconditioning is supported.
                scopeName:
                  type: string
                  enum: 
                    - remote:preconditioning:write
                  default : remote:preconditioning:write
                parameters:
                  type: object
                  properties:
                    programs:
                      type : object
                      properties:
                        size: 
                          type: integer
                          description : Max number of program accepted by the vehicle.
                          default: 4
                        temperature:
                          type: boolean
                          description: true means programs supports temperature setting
                      required : [size] 
                    immediate:
                      type: boolean
                      description: true means remote preconditioning immediate action is supported.
            charging:
              type: object
              required: [supported, scopeName, parameters]
              properties:
                supported :
                  type: boolean
                  description: true means remote charging is supported.
                scopeName:
                  type: string
                  enum: 
                   - remote:charging:write
                parameters:
                  type: object

                  required: [immediate,programs,settings]

                  properties:
                    immediate: 
                        description: start and stop will be by default true for SSDP vehicles. 
                        properties:
                          start:
                            type: boolean
                            description: true means remote immediate charge start action is supported.
                            example : true
                          stop:
                            type: boolean
                            description: true means remote immediate charge stop action is supported.
                            example : true

                    programs:
                          type: object
                          properties:
                            supported :
                              type : boolean
                              description: true means remote charging schedule[programs] is supported. 
                            size: 
                              type: integer
                              description : Max number of program accepted by the vehicle. This value is set based on vehicle model.

                              example : 1
                            occurrence:
                              type: boolean
                              description: true means specifying day for schedule is supported/required
                            minChargingLevel:
                              type: boolean
                              description: true means Minimum ChargingLevel is supported/required
                            maxChargingLevel:
                              type: boolean
                              description: true means Maximum ChargingLevle is supported/required
                              
                          required : [supported,size,occurrence,minChargingLevel,maxChargingLevel]

                    settings:
                      properties:
                        level:
                          type: boolean
                          description: true means remote charging preferences[level] is supported.
                          example : true
                        type:
                          type: boolean
                          description: true means remote charging preferences[type] is supported.
                          example : false
                
                    
            door:
              type: object
              required: [supported, scopeName]
              properties:
                supported :
                  type: boolean
                  description: true means remote door is supported.
                scopeName:
                  type: string
                  enum:  
                   - remote:door:write
                  default : remote:door:write
            horn:
              type: object
              required: [supported, scopeName]
              properties:
                supported :
                  type: boolean
                  description: true means remote horn is supported.
                scopeName:
                  type: string
                  enum:  
                   - remote:horn:write
                  default : remote:horn:write
            lights:
              type: object
              required: [supported, scopeName]
              properties:
                supported :
                  type: boolean
                  description: true means remote lights is supported.
                  example : false
                scopeName:
                  type: string
                  enum:  
                   - remote:lights:write
                  default : remote:lights:write
            wakeup:
              type: object
              required: [supported, scopeName]
              properties:
                supported :
                  type: boolean
                  description: true means remote wakeup is supported.
                  example : true
                scopeName:
                  type: string
                  enum:  
                   - remote:wakeup:write
                  default : remote:wakeup:write
            navigation:
              type: object
              required: [supported, scopeName]
              properties:
                supported :
                  type: boolean
                  description: true means remote navigation is supported.
                scopeName:
                  type: string
                  enum:  
                   - remote:navigation:write
                  default : remote:navigation:write
            stolen:
              type: object
              required: [supported]
              
              properties:
                supported :
                  type: boolean
                  description: True means remote navigation is supported.
            tanSuppress:
              type: object
              required: [supported]
              
              properties:
                supported :
                  type: boolean
                  description: True means TAN supress is supported.
    Tab_Links:
      description: |
        [HAL](https://en.wikipedia.org/wiki/Hypertext_Application_Language#Convention) (Hypertext Application Language) link collection
      type: object
      properties:
        self:
          $ref: '#/components/schemas/Link'
        first:
          $ref: '#/components/schemas/Link'
        next:
          $ref: '#/components/schemas/Link'
        prev:
          $ref: '#/components/schemas/Link'
        last:
          $ref: '#/components/schemas/Link'
      required:
        - self
        - first
    CollectionResult:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/Tab_Links'
        total:
          type: integer
        totalPage:
          type: integer
        currentPage:
          type: integer
        _embedded:
          type: object
      required:
        - total
        - totalPage
        - currentPage
        - _links
    PositiveInt:
      type: number
      format: int
      minimum: 0
      
    AlertReport:
      title: Report
      type: object
      properties:
        active:
          type: boolean
        type:
          $ref: '#/components/schemas/AlertMsgEnum'
        severity:
          description: |
            Alert severity level.

            |Severity|Description|
            |:---|:---|
            |Information|Better to fix but it is operating accurately.|
            |Warning|Should fix it asap.|
            |Critical|Starting prohibited without repair.|
          type: string
          enum:
            - Information
            - Warning
            - Critical
      required:
        - type
        - active
        - severity
    VehicleExtension:
      description: Additional vehicle  information.  
      properties:
        devices:
          $ref: '#/components/schemas/Devices'
        callCenterNumbers:
          $ref: '#/components/schemas/CallCenterNumbers'
    VehicleExtensionType:
      type: array
      minItems: 1
      maxItems: 2
      items:
        type: string
        enum:
          - devices
          - callCenterNumbers
    
    CallCenterNumbers:
      type: array
      description: Call Center telephone numbers to be called in case of emergency situation/crash (ecall), vehicle breakdown (acall), stolen vehicle (svl)
      items:
        $ref: '#/components/schemas/TelephoneNumberDetails'
        
    
    TelephoneNumberDetails:
      type: object
      description: List of call Types and associated call center numbers based on brand and country of vehicle
      properties:
        callType:
          type: string
          enum: [ECALL, ACALL, SVL]
        phoneNumber:
          description: Telephone number associated with specific Call Type
          type: string
      required:
        - callType
        - phoneNumber

    Devices:
      type : object
      description: |
        All device items in this list will share the same data model, "Device", which will express its type and expose a details map containing specificities as key/value pairs. The supported device details with their key/values pairs are:
        
        |Type|Key|Value|
        
        |----|----|-------------|
        
        |pnc|pcid|Value of vehicle provisioning certificate|
        
        |pnc|macAddress|Vehicle mac address for charging|
        
      properties:
        Device:
          type: array
          items: 
            $ref: '#/components/schemas/Device'
    Device:
      type: object
      description: Specific information related to a particular device specified in type
      properties:
        type:
          type: string
          enum: [pnc]
        description:
          type: string
        additionalproperties:
          $ref: '#/components/schemas/DeviceDetails'
      required:
        - type
        - description
        - additionalproperties
    DeviceDetails:
      type: object
      description: Key value pair for more details related to device
      properties:
        key:
          type: string
        value:
          type: string
      required:
        - key
        - value
    BasicAlert:
       allOf:
          - $ref: '#/components/schemas/AlertReport'
          - title: Alert message
            type: object
            properties:
              id:
                type: string
                example : 0a9de72cc3803b12a74418acd20dcd66634fa82e44b2ec7060bca91462dc5772199559905caefe168812918d47f67253f33d477b645bb59afdd1268b81e382999
              startedAt:
                type: string
                format: date-time
              endAt:
                type: string
                format: date-time
              startPosition:
                allOf:
                  - $ref: '#/components/schemas/Position'
                  - description: The position (last vehicle known one) where the alert appears.
              endPosition:
                allOf:
                  - $ref: '#/components/schemas/Position'
                  - description: The position (last vehicle known one) where the alert disappears.
            required:
              - id
              - type
              - startedAt
              - _links
              - active
              
    Alert:
      allOf:
        - $ref: '#/components/schemas/CreatedAtField'
        - $ref: '#/components/schemas/UpdatedAtField'
        - $ref: '#/components/schemas/BasicAlert'
      required:
        - createdAt
    GeoPosition:
      required:
        -  geometry
      type: object
      properties:
        type:
          type: string
          default: Feature
          enum:
            - Feature
        geometry:
          $ref: '#/components/schemas/Point'
    PositionProperties:
      description: Position Properties
      title: Properties
      type: object
      properties:
        heading:
          type: number
          format: float
          description: Course angle expressed in degree.
          minimum: 0
          maximum: 360
        signalQuality:
          type: number
          format: int
        type:
          type: string
          enum:
            - Estimate
            - Acquire
        fixStatus:
          type: string
          description : Fix status information is only returned when position type is set to Acquire. Horizontal & altitude position can be determined in 3D fix status mode where it is only horizontal position in 2D mode. 
          enum:
            - 2D
            - 3D
    PositionBase:
     allOf:
        - $ref: '#/components/schemas/GeoPosition'
        - title: Position
        - properties:
            properties:
              $ref: '#/components/schemas/PositionProperties'
    Position:
      allOf:
        - $ref: '#/components/schemas/PositionBase'
        - title: Position
        - properties:
            properties:
              $ref: '#/components/schemas/CreatedAtField'
      required:
        - createdAt   
    NavPositionBase:
     allOf:
        - $ref: '#/components/schemas/GeoPosition'
    TripPosition:
      allOf:
        - $ref: '#/components/schemas/PositionBase'
        - title: TripPosition
        - properties:
            properties:
              $ref: '#/components/schemas/TripPostionProperties'
    JeepTrailRequest:
      properties:
        position:
          description: GPS coordinates
          type: object
          properties:
            latitude:
              type: number
              #minimum: -90
              #maximum: 90
            longitude: 
              type: number
              #minimum: -180
              #maximum: 180
            limit:
              description: Number of results to return in the response
              type: integer
              #default: 20
              #minimum: 0
              #maximum: 20
            offset:
              description: Starting offset of the returned results
              type: integer
              #default: 0
              #minimum: 0
              #exclusiveMinimum: true
    JeepTrailsPoiInfo:
      type: object
      properties:
        name:
          description: Name of the jeep trail
          type: string
        phone:
          type: string
        categorySet:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
        categories:
          type: array
          items:
            type: string
        classifications:
           type: object
           properties:
              code:
                type: string
              names:
                type: array   
                items:
                  properties:
                    nameLocale:
                     type: string
                    name: 
                      type: string
    TipsContainer:
      type: object
      properties: 
        acceleration: 
          allOf:
          $ref: '#/components/schemas/TipContainer'
        deceleration: 
          allOf:
          $ref: '#/components/schemas/TipContainer'
        speed:
          allOf: 
          $ref: '#/components/schemas/TipContainer'
        gear: 
          allOf:
          $ref: '#/components/schemas/TipContainer'
        regeneration:
          allOf: 
          $ref: '#/components/schemas/TipContainer'
    TipContainer:  
      type: object
      properties: 
        definition:
          type: string
        assessment:
          type: string
        tips: 
          type: array
          items:
            type: string        
    orpEditRequest:
      allOf:
        - $ref: '#/components/schemas/EditWaypointBreadcrumb'
        - properties:
            orpEditRequest:
              type : object
              properties:
                  difficulty:
                    description: trip difficulty level
                    type: number
                  orpTripName: 
                    type: string 
    EditWaypointBreadcrumb:
      type: object
      properties:
        isWayPoint:
          type: boolean
        wayPointName:
            type: string
        wayPointType1:
          type: string
          enum:
            - NONE
            - PLACES
            - OBSTACLE
            - GUIDANCE 
        wayPointType2:
          type: string
          enum:
            - NO_TYPE_SELECTED
            - CAMPING
            - SCENCICVIEW
            - STAGINGAREA
            - WATER
            - X
            - MUD
            - ROCK
            - SAND
            - STEEPASCENT
            - STEEPDESCENT
            - BARELEFT
            - BARERIGHT
            - DEADEND
            - HARDLEFT
            - HARDRIGHT
            - SLOW 
    ORPDeleteRequest:
      type: array
      items:
        type: object
        properties:
          tripsToDelete:
            type: string
    
   
    
    TripPostionProperties:
      allOf:
        - $ref: '#/components/schemas/CreatedAtField'
        - description: 'Trip Position properties used to express the extension of dat in trip events.' 
        - properties:
            tripContext:
              type: object
              properties:
                distance:
                  description: 'Crossed distance of the trip at this position. Unit: K'
                  type: number
                  format: float
                duration:
                  description: 'Duration in km of the trip at this position. Unit: second'
                  type: number
                  format: int
                propulsionType:
                  allOf:
                    - $ref: '#/components/schemas/PropulsionType'
                    - description: Type of propulsion of the vehicle when crossing this position within the trip.
                kinetic:
                  properties:
                    hardBraking:
                      type: boolean
                      description: Hard braking at this position during the trip.
                    hardAcceleration:
                      type: boolean
                      description: Hard acceleration at this position during the trip.
                    hardCornering:
                      type: boolean
                      description: Hard cornering at this position during the trip
                    
      required:
        - createdAt
    
    AlertDetailsBase:
      type: object
      properties:
        report:
           $ref: '#/components/schemas/AlertsReportBase'
        active:
           $ref: '#/components/schemas/BasicAlertBase'
    
    AlertReportDetails:
      description: List of  active and inactive alerts included in the Vehicle Health Report. This report is generated by the vehicle, and the alerts included in the report are determined by the vehicle's configuration
      allOf:
         - $ref: '#/components/schemas/CreatedAtField'
      properties:
        reportDetails:
          type: array
          items:
            $ref: '#/components/schemas/AlertReport' 

      required:
        - createdAt
        
    ActiveAlertDetails:
      description: List of active alerts on vehicle
      allOf:
        - $ref: '#/components/schemas/CreatedAtField'
      properties:
        activeAlerts:
          type: array
          items:
            $ref: '#/components/schemas/BasicAlert'
      required:
        - createdAt
        
    AggregatedAlertDetails:
      title: Alert Details
      type: object
      properties:
        report:
          $ref: '#/components/schemas/AlertReportDetails'
        active:
          $ref: '#/components/schemas/ActiveAlertDetails'
          
    BasicAlertBase:
      properties:
        activeAlerts:
          type: array
          items:
            $ref: '#/components/schemas/BasicAlert'
    AlertsReportBase:
      properties:
        reportDetails:
          description:  List of specific active or inactive alerts on vehicles, providing a report of selected alerts along with their severities.
          
          type: array
          items:
            $ref: '#/components/schemas/AlertReport'
           
    Url:
      type: string
      description: URL format follows [RFC 3986](https://tools.ietf.org/html/rfc3986) and usually looks like this ` scheme://host[:port][/Path] `
    Link:
      type: object
      description: A Link Object as defined by [JSONHAL#Link Object](https://tools.ietf.org/html/draft-kelly-json-hal-08#section-5).
      required:
        - href
      properties:
        href:
          $ref: '#/components/schemas/Url'
        templated:
          type: boolean
          description: SHOULD be true when the Link Object's "href"   property is a URI Template
        type:
          type: string
          description: a hint to indicate the media type  expected when dereferencing the target resource.
        deprecation:
          allOf:
            - $ref: '#/components/schemas/Url'
            - description: indicates that the link is to be deprecated (i.e. removed) at a future date.  Its value is a URL that SHOULD provide further information about the deprecation.
        name:
          type: string
        title:
          type: string
          description: Its value is a string and is intended for labelling the link with a human-readable identifier (as defined by [RFC5988](https://tools.ietf.org/html/rfc5988)).
        profile:
          type: string
          description: Its value is a string and is intended for indicating the language of the target resource (as defined by [RFC5988]).
        hreflang:
          type: string
          description: Its value is a string which is a URI that hints about the profile (as defined by [I-D.wilde-profile-link](https://tools.ietf.org/html/draft-kelly-json-hal-08#ref-I-D.wilde-profile-link)) of the target resource.
    CollisionDetails:
      type: object
      properties:
        side:
          type: string
          description: Indicates the side of the collision
          enum:
            - Front
            - Rear
            - Lateral
            - Left
            - Right
        severity:
          type: string
          enum:
            - Minimal
            - Minor
            - Major
          description: |-
            * Minimal stands for no emergency system activated during the collision.
            * Minor only pretensioner system activated.
            * Major for airbag and prentensioner activation.
      required:
        - side
    
    Collision:
      allOf:
        - $ref: '#/components/schemas/CreatedAtField'
        - title: Collision
          type: object
          properties:
            id:
              type: string
              example : 055d8f0a0089d7b9226989ce2db42511e2e19df8cc106a7fb7d0c7fb92ab2320c0720e94be1ee517b3172da70dd05446a934cccca524172d9add54d8dbce51b14
            tippedOver:
              type: boolean
              description: 'Indicates if the car tipped over during the collision. Warning : This information is applicable only on vehicles equipped with dedicated sensor and is optionnal'
            pedestrian:
              type: boolean
              description: 'Indicates if the collision involve a pedestrian. Warning : This information is applicable only on vehicles equipped with dedicated sensor and is optionnal'
            unlockRequested:
              type: boolean
              description: Indicates if the vehicle unlock has been requested for this crash.
            details:
              type: array
              items:
                $ref: '#/components/schemas/CollisionDetails'
            _links:
              type: object
              properties:
                self:
                  $ref: '#/components/schemas/Link'
                vehicle:
                  $ref: '#/components/schemas/Link'
                trip:
                  $ref: '#/components/schemas/Link'
              required : [self]
          required:
            - id
            - createdAt
  
    
    EngineLiquid:
      type: object
      properties:
        level:
          description: Engine liquid level expressed in persent.
          type: integer
        temp:
          description: Engine liquid temperature expressed in Celsius degrees.
          type: number
          format: float
    EngineAir:
      type: object
      properties:
        temp:
          description: Engine air temperature expressed in Celsius degrees.
          type: number
          format: float
    Engines:
      type: array
      items:
        $ref: '#/components/schemas/Engine'
    PowerTrain:
        allOf:
        - $ref: '#/components/schemas/CreatedAtField'
        - $ref: '#/components/schemas/PowerTrainBase'
        required:
        - createdAt
        - gmpStatus
    PowerTrainBase:
      type: object
      properties:
        
        gmpStatus:
          type: string
          description: Engine GMP status
          enum:
            - NotRunning
            - Starting
            - Running
            - Stopping
            - Stopped
       # Added for RTC 2782396 (End)
    EngineBases:
      type: array
      items:
        $ref: '#/components/schemas/EngineBase'
    EngineBase:
      type: object
      properties:
        type:
          type: string
          default: Thermic
          enum:
            - Thermic
            - Electric
        speed:
          type: number
          format: float
        gmpStatus:
          type: string
          enum:
            - NotRunning
            - Starting
            - Running
            - Stopping
            - Stopped
          deprecated: true
        extension:
          type: object
          properties:
            thermic:
              type: object
              properties:
                coolant:
                  allOf:
                    - description: Engine coolant liquid properties.
                    - $ref: '#/components/schemas/EngineLiquid'
                oil:
                  allOf:
                    - description: Engine oil properties.
                    - $ref: '#/components/schemas/EngineLiquid'
                air:
                  allOf:
                    - description: Engine air properties.
                    - $ref: '#/components/schemas/EngineAir'
      required:
        - type
    Engine:
      allOf:
        - $ref: '#/components/schemas/CreatedAtField'
        - $ref: '#/components/schemas/EngineBase'
      required:
        - createdAt
    TripsSummary:
      type: array
      items: 
       type: object 
       properties:
          startTime:
            description: day/weeks/months startTime 
            type: number
          endTime:
            description: day/weeks/months end Time 
            type: number
          currency:
            type: string
          distance:
            description:  distance traveled in km 
            type: number
          duration:
            description:  total trips duration in day/week/month
            type: integer
          tripCost:
            description: total_tripsCost
            type: number
          averageSpeed:
            description: "Average speed of day/week/month. Unit : KM"
            type: number
          numTriggers:
            description: total number of triggering events
            type: integer
          numTrips: 
            description: Total number of trips in day/week/month 
            type: integer
          totalFuelConsumption:
            description: number of total fuel consumption.
            type: integer
          totalEngergyConsumption:
            description: number of total energy consumption
            type: integer
          accelerationScore:
            description: Average acceleration score 
            type: number
          decelerationScore:
           description: Average deceleration score 
           type: number
          speedScore: 
            description: Average speed score 
            type: number
          shiftingScore:
            description: Average shifting score
            type: number 
          isBusinessTrip:
            type: boolean
          isFavouriteTrip:
            type: boolean
          averageEcoScore: 
            type: integer
          profileName:
            type: string
    TripSummary:
      type: object
      properties:
        tripSummaryType: 
          type: string
          enum:
            - Daily
            - Weekly
            - Monthly
            - Custom
        numRecords:
          description: number of trip record 
          type: integer
        tripSummary:
          $ref: '#/components/schemas/TripsSummary'
    DailySetting:
      type: object
      allOf:
        - properties:
            hours:
              type: number
              maximum: 23
              minimum: 0
            minutes:
              type: number
              minimum: 0
              maximum: 59
      required:
        - hours
        - minutes

    WeeklySetting:
      type: object
      allOf:
        - properties:
            day:
              type: string
              enum:
                - MONDAY
                - TUESDAY
                - WEDNESDAY
                - THURSDAY
                - FRIDAY
                - SATURDAY
                - SUNDAY
            time:
              $ref: '#/components/schemas/DailySetting'
      required:
        - day
    MonthlySetting:
      type: object
      allOf:
        - properties:
            hours:
              type: number
              maximum: 23
              minimum: 0
            minutes:
              type: number
              minimum: 0
              maximum: 59
      required:
        - minutes
        - hours
    Propulsion:
      allOf:
        - $ref: '#/components/schemas/CreatedAtField'
        - $ref: '#/components/schemas/PropulsionBase'
      required:
        - createdAt
    PropulsionBase:
      description: |
        Vehicle propulsion system includes one or more sources of propulsion, which can be used together or alternately. During a driving session, a vehicle can switch from one propulsion mode to another. This structure therefore expresses the mode of propulsion at a given time stamp.
          
          * _Note: For the electric vehicle, the propulsion type will always be electric. Similarly, for thermal vehicle, it will always be thermal._
      properties:
        type:
          allOf:
            - $ref: '#/components/schemas/PropulsionType'
            - description: Propulsion type. It depends on the vehicle propulsion capabilities.
      required:
        - type
    Distance:
      type: object
      properties:
        total:
          type: number
          format: float
          description: 'Distance of the trip. Unit: Km'
        parts:
          description: The parts of the trip crossed for each type of propulsion present on the vehicle.
          type: array
          items:
            allOf:
              - properties:
                  percent:
                    description: The part of the trip traveled in this type of propulsion expressed as a percentage.
                    type: number
                    format: float
                    minimum: 1
                    maximum: 100
              - $ref: '#/components/schemas/PropulsionBase'
    MaintenanceBase:
      description: Expresses next Maintenance   ails. Such as number of days and the mileage (km) till the next Maintenance.
      type: object
      properties:
        daysBeforeMaintenance:
          type: integer
        mileageBeforeMaintenance:
          type: integer
    TyreStates:
      type: array
      items:
        $ref: '#/components/schemas/TyreState'
    TyreStateBases:
      type: array
      items:
        $ref: '#/components/schemas/TyreStateBase'
    TyreState:
      allOf:
        - $ref: '#/components/schemas/CreatedAtField'
        - $ref: '#/components/schemas/TyreStateBase'
      required:
        - createdAt
    TyreStateBase:
      type: object
      description: Tire pressure for each tire. 
      required:
        - id
      properties:
        id:
          type: string
          description: |
            Tire identifier - front right tire, rear left tire etc. 
            Mapping & description: 
            |  <b>Id </b>  |  <b>Description </b>  |  
            |---|---| 
            |FrontRight |Front right wheel tyre |  
            |FrontLeft | Front left wheel tyre  |  
            |RearRight|Rear right wheel tyre  | 
            |RearLeft|Rear left wheel tyre | 
            |SecondRearLeft| Second dual tyre on the rear left wheel |
          enum:
            - FrontRight
            - FrontLeft
            - RearRight
            - RearLeft
            - SecondRearRight
            - SecondRearLeft
        pressure:
          $ref: '#/components/schemas/Pressure'
        status:
          type: string
          description: |
            Status associated with the tire.
                Mapping & description: 
                |<b>Status </b>| <b>Description </b> |  
                |---|---| 
                |High |Inflation High|  
                |Normal | Inflation Normal|  
                |Low|Inflation Low (Under Inflated)| 
                |SignificantlyLow| Significantly Under Inflated|
          enum:
            - High
            - Normal
            - Low
            - SignificantlyLow
            

    FuelAmount:
      type: object
      description: Amount of fuel remaining in the tank.<< xf Only >>
      properties:
        level:
          type: string
          description: Value of the field
    Pressure:
      type: object
      properties:
        value:
          type: number
          format: float
          description: |
            Value of the field. *Unit: pascal (Pa)*
    Maintenance:
      allOf:
        - $ref: '#/components/schemas/CreatedAtField'
        - $ref: '#/components/schemas/MaintenanceBase'
      required:
        - createdAt
    Ignition:
      allOf:
        - $ref: '#/components/schemas/CreatedAtField'
        - $ref: '#/components/schemas/IgnitionBase'
    IgnitionBase:
      type: object
      properties:
        type:
          type: string
          enum:
            - Stop
            - StartUp
            - Start
      required:
        - type
        - createdAt
    VehicleOdometerBase:
      type: object
      properties:
        mileage:
          description: Vehicle mileage expressed in KM.
          type: number
          format: float
      required:
        - mileage
    VehicleOdometer:
      allOf:
        - $ref: '#/components/schemas/CreatedAtField'
        - $ref: '#/components/schemas/VehicleOdometerBase'
      required:
        - createdAt
    AdasBase:
      type: object
      properties:
        parkAssist:
          type: object
          properties:
            front:
              type: array
              items:
                type: string
                enum:
                  - Fault
                  - DriverInhibition
                  - Active
                  - Wait
                  - OutOfService
            rear:
              type: array
              items:
                type: string
                enum:
                  - Fault
                  - DriverInhibition
                  - TrailerInhibition
                  - Active
                  - Wait
                  - OutOfService
        accr:
          description: Adaptive Cruise Control Regulation
          type: string
          enum:
            - Activated
            - Fault
            - Hold
            - HoldWithOverSpeeding
            - Off
            - OverSpeedingByPedalrPess
            - StandBy
        lvv:
          type: boolean
        rvv:
          type: string
          enum:
            - Off
            - NoBestFit
            - BestFitInProgress
            - BestFitMax
            - BestFitMin
            - BestFitDeactivated
            - AutoDeactivated
            - OverflowSpeedConsign
            - LackOfVisibilityRadar
            - LearningRadar
            - Deactivated
            - LimitSetting
        aebs:
          description: Advanced Emergency Braking System
          type: string
          enum:
            - Off
            - Fixed
            - Flashing
        afil:
          description: Lane Departure Warning System
          type: string
          enum:
            - FlashingFault
            - FlashingWarning
            - Off
            - Fixed
        artiv:
          description: Respect of inter vehicle time assist (ARTIV)
          type: string
          enum:
            - NotSelected
            - Selected
            - Unavailable
          default: Unavailable
        bsm:
          description: Blind Spot Monitoring
          type: string
          enum:
            - Active
            - Inactive
            - Disabled
            - Fault
        esp:
          description: Electronic Stability Programme
          type: boolean
        abs:
          description: Anti-lock braking system
          type: boolean
        fse:
          description: Electric brake service
          type: boolean
        sli:
          description: Speed Limit Information (expressed in km/h)
          type: integer
        rlka:
          description: Right Lane Keeping Assist right
          type: string
          enum:
            - Authorized
            - CorrectionInProgress
            - NotAuthorized
            - NotSelected
        llka:
          description: Left Lane Keeping Assist
          type: string
          enum:
            - Authorized
            - CorrectionInProgress
            - NotAuthorized
            - NotSelected
        rgi:
          description: Recommended gear indicator
          type: string
          enum:
            - None
            - Up
            - Down
            - UpDown
    Adas:
      allOf:
        - $ref: '#/components/schemas/CreatedAtField'
        - $ref: '#/components/schemas/AdasBase'
      required:
        - createdAt
    Lights:
      description: Expresses all light, direction (```Left```, ```Right``` ),  position (```Front```, ```Rear``` ) and status  (```Off```, ```On```) for a category.
      type: array
      items:
        type: object
        properties:
          direction:
            type: string
            enum:
              - Left
              - Right
          position:
            type: string
            enum:
              - Front
              - Rear
          status:
            type: string
            enum:
              - Off
              - On
    LightingSystemBase:
      description: Expresses the Directional, Fog and the Position vehicle lights.
      type: object
      properties:
        turn:
          $ref: '#/components/schemas/Lights'
        fog:
          $ref: '#/components/schemas/Lights'
    LightingSystem:
      allOf:
        - $ref: '#/components/schemas/CreatedAtField'
        - $ref: '#/components/schemas/LightingSystemBase'
      required:
        - createdAt
    BasicKinetic:
      description: Everything related to the movement of the vehicle. Speed, acceleration..
      properties:
        acceleration:
          type: number
          format: float
          description: Vehicle acceleration (expressed in m/s²)
        speed:
          type: number
          format: float
          description: Vehicle speed (expressed in m/s)
        moving:
          type: boolean
    Kinetic:
      allOf:
        - $ref: '#/components/schemas/CreatedAtField'
        - $ref: '#/components/schemas/BasicKinetic'
      required:
        - createdAt
    BrakingSystemBase:
      type: object
      properties:
        parking:
          type: boolean
    BrakingSystem:
      allOf:
        - $ref: '#/components/schemas/CreatedAtField'
        - $ref: '#/components/schemas/BrakingSystemBase'
      required:
        - createdAt
    TransmissionBase:
      type: object
      properties:
        gearbox:
          type: object
          properties:
            mode:
              type: object
              properties:
                automatic:
                  type: boolean
                sport:
                  type: boolean
                snow:
                  type: boolean
                sequential:
                  type: boolean
                semiManual:
                  type: boolean
            ratio:
              description: Current gear-box ratio.
              type: string
              enum:
                - Ratio1
                - Ratio2
                - Ratio3
                - Ratio4
                - Ratio5
                - Ratio6
                - Ratio7
                - Ratio8
                - Neutral
                - Reverse
    Transmission:
      allOf:
        - $ref: '#/components/schemas/CreatedAtField'
        - $ref: '#/components/schemas/TransmissionBase'
      required:
        - createdAt
    DrivingBehaviorBase:
      type: object
      properties:
        mode:
          $ref: '#/components/schemas/DrivingModeEnum'
      required:
        - mode
    DrivingBehavior:
      allOf:
        - $ref: '#/components/schemas/CreatedAtField'
        - $ref: '#/components/schemas/DrivingBehaviorBase'
      required:
        - createdAt
    Privacy:
      allOf:
        - $ref: '#/components/schemas/CreatedAtField'
        - $ref: '#/components/schemas/PrivacyBase'
      required:
        - createdAt
    PrivacyBase:
      type: object
      properties:
        state:
          type: string
          enum:
            - None
            - Geolocation
            - Full
    ActiveAlertMsgEnumValues:
      type: object
      properties:
        value:
          type: string
          enum:
            - 'null'
            - '0.0'
            - '1.0'
    Battery:
      allOf:
        - $ref: '#/components/schemas/CreatedAtField'
        - $ref: '#/components/schemas/BatteryBase'
      required:
        - createdAt
    BatteryBase:
      description: Describe the car (with combustion engine)  battery status.
      type: object
      properties:
        voltage:
          description: Battery voltage level. Expresed in percentage.
          type: number
          format: float
          minimum: 0
          maximum: 100
        current:
          description: Battery current level. Expresed in Amper (A).
          type: number
          format: float
        indicator:
          type: string
          description: The on vehicule battery indicator status.
          enum:
            - Off
            - Fixed
            - Flashing
    BeltStatus:
      type: object
      description: Seat belt condition.
      properties:
        belt:
          description: Belt status.
          type: string
          enum:
            - Normal
            - Omission
        id:
          description: Seat identifier.
          type: string
          enum:
            - Driver
            - Passenger
    SafetyBase:
      type: object
      properties:
        beltStatus:
          type: array
          items:
            $ref: '#/components/schemas/BeltStatus'
        autoECallTriggering:
          type: string
          enum:
            - NotDetected
            - Detected
            - ShockDetectionUnabled
    Safety:
      allOf:
        - $ref: '#/components/schemas/CreatedAtField'
        - $ref: '#/components/schemas/SafetyBase'
      required:
        - createdAt
    WipingBladesState:
      allOf:
        - $ref: '#/components/schemas/CreatedAtField'
        - $ref: '#/components/schemas/WipingBladesStateBase'
      required:
        - createdAt
        - active
        - speed
    WipingBladesStateBase:
      type: object
      properties:
        active:
          description: Either active (true) or not (false).
          type: boolean
        speed:
          description: Wiping speed. This field is present only if active field is set to true.
          type: string
          enum:
            - High
            - Low
      required:
        - active
        - speed
    DoorsState:
      allOf:
        - $ref: '#/components/schemas/CreatedAtField'
        - $ref: '#/components/schemas/DoorsStateBase'
      required:
        - createdAt
    DoorsStateBase:
      type: object
      properties:
        lockedState:
          type: array
          description: List of all known doors' states
          items:
            type: string
            enum: [Unlocked, Locked, SuperLocked, DriverDoorUnlocked, CabinDoorsUnlocked, CargoDoorsLocked, CargoDoorsUnlocked, RearDoorsUnlocked, RearDoorsLocked,PassengerDoorUnlocked]
        opening:
          type: array
          items:
            type: object
            description: Opening state per door.
            properties:
              identifier:
                type: string
                enum:
                  - Driver
                  - Passenger
                  - RearLeft
                  - RearRight
                  - Trunk
                  - RearWindow
                  - RoofWindow
                  - HoodDoor
              state:
                type: string
                enum:
                  - Open
                  - Closed
      required:
              - identifier
              - state
    AggregatedTelemetries:
      allOf:
        - $ref: '#/components/schemas/CreatedAtField'
        - $ref: '#/components/schemas/UpdatedAtField'
        - title: AggregatedTelemetry
          description: Describe the latest aggregated Telemetries of the vehicle such latest location, ignition state, doors openeing state ...etc.
          type: object
          properties:
            _links:
              type: object
              properties:
                self:
                  $ref: '#/components/schemas/link'
                vehicle:
                  $ref: '#/components/schemas/link'
              required : [self]
            vehicle:
              properties:
                ignition:
                  $ref: '#/components/schemas/Ignition'
                location:
                  $ref: '#/components/schemas/Position'
                preconditioning:
                  $ref: '#/components/schemas/Preconditioning'
                tyreState:
                  $ref: '#/components/schemas/TyreStates'
                energies:
                  $ref: '#/components/schemas/Energies'
                engines:
                  $ref: '#/components/schemas/Engines'
                doorsState:
                  $ref: '#/components/schemas/DoorsState'
                battery:
                  $ref: '#/components/schemas/Battery'
                safety:
                  $ref: '#/components/schemas/Safety'
                odometer:
                  $ref: '#/components/schemas/VehicleOdometer'
                kinetic:
                  $ref: '#/components/schemas/Kinetic'
                propulsion:
                  $ref: '#/components/schemas/Propulsion'
                braking:
                  $ref: '#/components/schemas/BrakingSystem'
                wipingBlades:
                  $ref: '#/components/schemas/WipingBladesState'
                transmission:
                  $ref: '#/components/schemas/Transmission'
                adas:
                  $ref: '#/components/schemas/Adas'
                lightingSystem:
                  $ref: '#/components/schemas/LightingSystem'
                maintenance:
                  $ref: '#/components/schemas/Maintenance'
                alerts:
                  $ref: '#/components/schemas/AggregatedAlertDetails'
                drivingBehavior:
                  $ref: '#/components/schemas/DrivingBehavior'
                alarm:
                  $ref: '#/components/schemas/VehicleStatusAlarm'
                stolen:
                  $ref: '#/components/schemas/StolenObj'
                powerTrain:
                  $ref: '#/components/schemas/PowerTrain'
            privacy:
              $ref: '#/components/schemas/Privacy'
            environment:
              $ref: '#/components/schemas/Environment'
          required:
            - createdAt
    Vect2D:
      description: This is a simple 2 (or more) number vector used to define Geometry objects.
      type: array
      items:
        type: number
        minItems: 2
    Geometry:
      title: Geometry
      type: object
      description: This object expresses the Geometry as specified by [rfc7946](https://tools.ietf.org/html/rfc7946#section-3.1). It is also the root of the Geometry objects (Point, cicle, poygon)
      properties:
        type:
          type: string
          enum:
            - Polygon
            - Point
            - ExtCircle
        coordinates:
          title: Coordinates
          description: Geometry coordinates
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1
      required:
        - coordinates
        - type
    Point:
      allOf:
        - title: Point
        - description: This object expresses a GeoJSON Point as specified by [rfc7946](https://tools.ietf.org/html/rfc7946#section-3.1.2).
          required:
            - type
            - coordinates
          properties:
            type:
              type: string
              default: Point
              enum:
                - Point
            coordinates:
              description: This is a simple 2 (or more) numbers vector used to define Geometry Point object.
              type: array
              items:
                type: number
                format: float
                minItems: 2
          example:
            type: Point
            coordinates:
              - 5.970338
              - -62.536239
    location:
      type: object
      title: NavPosition
    NavPosition:
      allOf:
        - $ref: '#/components/schemas/NavPositionBase'
        - properties:
            properties:
              $ref: '#/components/schemas/NavPostionProperties'
    NavPostionProperties:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/Address'
        placeid:
          type: integer
          description: Placeid for the location
          
        name:
          type: string
          description: Name of Place
          example: Doltone House
        category:
          type: string
          description: Category of location
          example: Restraunt
        description:
          type: string
          description: Description of the location
          default: ''
          example: ''
        phoneNumber:
          type: string
          description: PhoneNumber
          default: ''
          example: +61 2 1234 5678
        url:
          type: string
          description: URL format follows [RFC 3986](https://tools.ietf.org/html/rfc3986) and usually looks like this ` scheme://host[:port][/Path] `
    PolygonZone:
      allOf:
        - $ref: '#/components/schemas/Geometry'
        - title: Polygon
          properties:
            type:
              default: Polygon
              enum:
                - Polygon
            coordinates:
              type: array
              minItems: 3
              items:
                $ref: '#/components/schemas/Vect2D'
    PostionProperties:
      type: object
      required:
        - createdAt
      properties:
        createdAt:
          type: string
          format: date-time
        heading:
          type: number
          format: float
          description: Course angle expressed in degree.
          minimum: 0
          maximum: 360
        signalQuality:
          type: integer
        type:
          type: string
          enum:
            - Estimate
            - Acquire
    BreadCrumbsCounter:
      type: object
      properties:
        pitch:
          type: number
          format: integer
        roll:
          type: number
          format: integer
        EncodedDataMap:
          type: string
    EcoCoachingData:
      type: object
      properties:
        gearbox:
          properties:
            shifting:
              type: string
              description: gearMode
        score:
          description: Eco driving score. A least one field should be present.
          properties:
            ranking:
              allOf:
                - $ref: '#/components/schemas/PositiveInt'
                - description: representing the trip eco driving score ranking.
            score:
              allOf:
                - $ref: '#/components/schemas/PositiveInt'
                - description: representing the trip eco driving score.
            acceleration:
              allOf:
                - $ref: '#/components/schemas/PositiveInt'
                - description: representing the eco acceleration score.
            deceleration:
              allOf:
                - $ref: '#/components/schemas/PositiveInt'
                - description: representing the eco driving deceleration score.
            speed:
              allOf:
                - $ref: '#/components/schemas/PositiveInt'
                - description: representing the trip eco speed score.
            shifting:
              allOf:
                - $ref: '#/components/schemas/PositiveInt'
                - description: representing the trip eco shifting score.
            tipsContainer:
              allOf:
                - $ref: '#/components/schemas/TipsContainer'
      required:
        - score
    EcoData:
      type: object
      description: << xf Only >>
      properties:
        averageScore:
          type: number
        Profile:
          type: string
    
    
    BestPerformance:
      type: object
      description: << xf Only >>
      properties:
        maxRoll:
          type: number
        maxPitch:
          type: number
        maxAltitude:
          type: number
    Address:
      type: object
      description: POI' address.
      properties:
        houseNumber:
          type: string
          description: House number on the street
        postalCode:
          type: integer
          description: Postal Code / Zip Code
        streetName:
          type: string
          description: Street name
        cityName:
          type: string
          description: City name
        countryName:
          type: string
          description: Country name
        provinceName:
          type: string
          description: Province name
    BoundingBox:
      type: object
      description: The bounding box of the location.
      properties:
        northEast:
          type: string
          description: North-east (top-left) latitude,longitude coordinate of the bounding box.
        southWest:
          type: string
          description: South-west (bottom-right) latitude,longitude coordinate of the bounding box.
        entity:
          type: string
          description: ' Entity type source of the bounding box. Note: For reverse-geocoding this is always equal to position. '
    Energies:
      type: array
      items:
        $ref: '#/components/schemas/Energy'
    Energy:
      description: Describe vehicle energy supply for thermic, low emission vehicle or both.
      type: object
      allOf:
        - $ref: '#/components/schemas/CreatedAtField'
      properties:
        type:
          $ref: '#/components/schemas/EnergyType'
        subType:
          $ref: '#/components/schemas/EnergySubType'
        level:
          type: number
          format: float
          minimum: 0
          maximum: 100
        hvacPwrUsageDisp:
          type: string
          description: Power usage disponibility. (Usually float value between 0 and 1). << xf Only >>
        autonomy:
          description: Vehicle autonomy expressed in km for this energy class.
          type: integer
        extension:
          type: object
          properties:
            fuel:
              description: Specific fuel energy properties.
              type: object
              properties:
                consumption:
                  $ref: '#/components/schemas/CompositFuelEnergyConsumption'
                fuelTank:
                  $ref: '#/components/schemas/FuelAmount'
            electric:
              description: Specific electric energy parameters.
              type: object
              properties:
                battery:
                  $ref: '#/components/schemas/EnergyBattery'
                charging:
                  $ref: '#/components/schemas/EnergyCharging'
                consumption:
                  $ref: '#/components/schemas/CompositElectricEnergyConsumption'
      required:
        - createdAt
        - type
        - subType
    EnergyBases:
      type: array
      items:
        $ref: '#/components/schemas/EnergyBase'
    EnergyBase:
      description: Describe vehicle energy supply for thermic, low emission vehicle or both.
      type: object
      properties:
        type:
         $ref: '#/components/schemas/EnergyType'
        subType:
          $ref: '#/components/schemas/EnergySubType'
        level:
          type: number
          format: float
          minimum: 0
          maximum: 100
        hvacPwrUsageDisp:
          type: string
          description: Power usage disponibility. (Usually float value between 0 and 1). << xf Only >>
        autonomy:
          description: Vehicle autonomy expressed in km for this energy class.
          type: integer
        extension:
          type: object
          properties:
            fuel:
              description: Specific fuel energy properties.
              type: object
              properties:
                consumption:
                  $ref: '#/components/schemas/CompositFuelEnergyConsumption'
                fuelTank:
                  $ref: '#/components/schemas/FuelAmount'
            electric:
              description: Specific electric energy parameters.
              type: object
              properties:
                battery:
                  $ref: '#/components/schemas/EnergyBatteryBase'
                charging:
                  $ref: '#/components/schemas/EnergyCharging'
                consumption:
                  $ref: '#/components/schemas/CompositElectricEnergyConsumption'
      required:
        - type
    Consumption:
      type: object
      properties:
        consumption:
          type: number
          format: float
          minimum: 0
      required:
        - consumption
    EnergyConsumption:
      allOf:
        - $ref: '#/components/schemas/Consumption'
        - description: Total consumption for vehicle for a type of energy. Expressed in L for fuel energy type or in KWh for eletric one.
        - properties:
            avgConsumption:
              description: Vehicle Average consumption per 100kms for specific enery type. For eletric  in terms of Wh/100km or for fuel in terms of cl/100km respectively
              type: number
              format: float
            type:
              $ref: '#/components/schemas/EnergyType' 
            subType:
              $ref: '#/components/schemas/EnergySubType'
        - required:
            - type
    CompositFuelEnergyConsumption:
      description: Fuel consumption.
      type: object
      properties:
        total:
          description: Total Fuel consumption expressed in cL.
          type: number
          format: float
          minimum: 0
        instant:
          description: Instant Fuel consumption expressed in L/100Km.
          type: number
          format: float
    CompositElectricEnergyConsumption:
      type: object
      properties:
        instant:
          description: Instant consumption for vehicles for eletric energy. Expressed in KW/H
          type: number
          format: float
    EnergyCharging:
      type: object
      description: Electric charging state.
      required:
        - status
      properties:
        plugged:
          type: boolean
        status:
          $ref: '#/components/schemas/ChargingStatusEnum'
        remainingTime:
          description: Remaning time before the battery is fully charged. This duration is expressed using [ISO8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) format.
          type: string
        chargingSpeed:
          description:  | 
                          * deprecated; please use 'setting' for charging speed.
          type: integer
          deprecated: true
          minimum: 0
          maximum: 500
        chargingMode:
          description: | 
                          * deprecated; please use 'setting' for charging mode.
          deprecated: true
          type: string
          enum:
            - 'No'
            - Slow
            - Quick
        programs:
              type: array
              description: |
                    * deprecated; please use 'schedule' schedule to access to EV charging programs.
              deprecated: true
              items:
                $ref: '#/components/schemas/ChargeProgram'
        schedule:
          description: |
                        Union schedule type. I can be only one of the following : programs or unitary.
                        * Programs: list of rich EV charging programs.
                        * Unitary: Only a simple schedule is supported, allowing to set the EV charging start time and, if needed, the end time as well.
                          This mode is linked to remote EV charging operations with the 'deferred' sub-action and not active 'programs'.
          properties:
            programs:
              type: array
              description: List of EV charging schedules.
              items:
                $ref: '#/components/schemas/ChargeProgram'
            unitary:
                $ref: '#/components/schemas/TimeLimitedCharge'
        settings:
          allOf:
              - $ref: '#/components/schemas/ChargeSettings'
              - properties: 
                  chargingSpeed:
                    description: Charging speed (expressed in gained batteryLife per hour -> KM/H).
                    type: integer
                    minimum: 0
                    maximum: 500
                  chargingMode:
                    description: The charging mode; Slow, Quick and No(not charging).
                    type: string
                    enum:
                      - 'No'
                      - Slow
                      - Quick
    EnergyBattery:
      type: object
      description: Electric charging state.
      properties:
        load:
          allOf:
            - $ref: '#/components/schemas/CreatedAtField'
            - $ref: '#/components/schemas/LoadElectricEnergy'
          required:
            - createdAt
        health:
          allOf:
            - $ref: '#/components/schemas/CreatedAtField'
            - $ref: '#/components/schemas/HealthElectricEnergy'
          required:
            - createdAt
    EnergyBatteryBase:
      type: object
      description: Electric charging state.
      properties:
        load:
          allOf:
            - $ref: '#/components/schemas/LoadElectricEnergy'
        health:
          allOf:
            - $ref: '#/components/schemas/HealthElectricEnergy'
    HealthElectricEnergy:
      type: object
      properties:
        capacity:
          description: Health related to battery capacity (expressed in percentage).
          type: integer
          minimum: 0
          maximum: 100
        resistance:
          description: Health related to battery resistance (expressed in percentage).
          type: integer
          minimum: 0
          maximum: 100
    LoadElectricEnergy:
      properties:
        capacity:
          description: Electric battery total capacity (expressed in Wh).
          type: integer
        residual:
          description: Residual electric energy (expressed in Wh)
          type: integer
    BasicProgram:
      type: object
      description: Describe recurring action.
      properties:
        start:
          type: string
          description: | 
                    The start time formatted using the duration format based on [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Time_intervals) with the schema: P[n]Y[n]M[n]DT[n]H[n]M[n]S and whose value is between 0H and 23h59
      
                        _example_: PT14H30M : means 14H30min
        enabled:
          type: boolean
          description: Determines whether this program is enabled or not.

      required:
          - start
    Program:
      type: object
      description: Describe recurring action.
      properties:
        start:
          type: string
          description: | 
                    The start time formatted using the duration format based on [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Time_intervals) with the schema: P[n]Y[n]M[n]DT[n]H[n]M[n]S and whose value is between 0H and 23h59
      
                        _example_: PT14H30M : means 14H30min
        occurrence:
          type: object
          description: The occurrence on the program.
          properties:
            day:
              type: array
              items:
                type: string
                enum:
                  - Mon
                  - Tue
                  - Wed
                  - Thu
                  - Fri
                  - Sat
                  - Sun
          required:
            - day
        enabled:
          type: boolean
          description: Determines whether this program is enabled or not.
    PrecondProgramTemp:    
      type: object
      properties: 
        temp:
          description: Target temperature to be reached by HVAC in celsius for that specific schedule.
          type: number       
    StatusExtensionType:
      type: array
      items:
        type: string
        enum:
          - odometer
          - kinetic
    PreconditioningProgram:
      description: List of air conditioning programs to schedule on vehicle.
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/Program'
          - $ref: '#/components/schemas/PrecondProgramSlot'
          - properties:
              temp:
                type: integer
                format: float
                description: Cabin temperature setting for this program in C
              startCond:
                description: Condition to start scheduled program
                type: string
                enum:
                  - Always
                  - Plugged
                  - PluggedAndOverlappingChargeSchedule
          - required:
              - start
              
              - slot
             
    ChargeProgram:
      description: List of charging programs to schedule on vehicle.
      type: array
      items:
        allOf:
          - required:
              - start
              - enabled
          - description: Charging program to schedule on vehicle
          - $ref: '#/components/schemas/Program'
          - $ref: '#/components/schemas/ChargingProgram'
          - $ref: '#/components/schemas/ChargingProgramSlot'
    TimeTriggerEntry:
          required: [start]
          example:  
                recurrence: Daily
                start: PT8H30M
                duration: PT7H30M
                occurrence: [Mon,Tue,Thu, Fri]
          description: |
                        The monitor Time Trigger Entry that specifies the start (relative or absolute) and duration of the time interval. The relative start time must be to midnight and the absolute must be expressed in UTC.
                        
                        <u><b>Note:</b></u> 
                        * ```occurrence``` field <b><u>should</u></b> be provided only if the recurrence is set to ```Daily```. Otherwise an invalid parameter status is returned.
                        * The time entry with recurrence set to ```None``` means that this program will be enabled from the absolute start time with no recurrence. This kind of time entry can be used to for delayed monitor activation (from a start time) or a closed trigger time interval.
                        *  ```duration``` field <b><u>is mandatory</u></b> if the recurrence is set to ```Daily```. If it is set to ```None``` then it will define the absolute monitor activity period duration (starting from absolute time defined by ```start``` field), otherwise this trigger time interval is considered as unclosed.
          properties:
            recurrence:
              description: | 
                          Determines the recurrence of the program. 
                          * None: means no recurrence. 
                          * Daily: repeated over the week. 
              type: string
              enum: [None, Daily]
              default: Daily
            duration:
              description: Duration of the monitor action expressed using [ISO-8601 Duration spec](https://en.wikipedia.org/wiki/ISO_8601#Durations).  This field <b><u>is mandatory</u></b> if the recurrence is set to ```Daily```
              type: string
              example: PT04H30M
            start:
              type: string
              description: |
                            The start time.
                            Its format depends on the recurrence value.
                            * For ```None``` recurrence, the start time is considered as absolute time from when the monitor can trigger events. In this case the format should be compliante with [RFC3339](https://www.ietf.org/rfc/rfc3339.txt)  
                            
                              _example_: 2018-01-03T12:00:00+01:00
                            * For ```Daily``` recurrence, the start time formatted using the duration format based on [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Time_intervals) with the schema: P[n]Y[n]M[n]DT[n]H[n]M[n]S and whose value is between 0H and 23h59
                        
                              _example_: PT14H30M : means 14H30min
            occurrence:
              type: object
              description: >
                     The occurrence on a bounded program will spread on months, weeks, days depending on recurrence value and ```week``` field.
              properties:
                      day:
                          type: array
                          minItems: 1
                          maxItems: 7
                          items:
                            type: string
                            enum: [Mon, Tue, Wed, Thu, Fri, Sat, Sun]
                      week:  
                          description:  occurrences over the weeks of the year from w1 to w52 specified in an array unitary or grouped by ranges (w1, w2, w34-w46, w52)
                          type: array
                          minItems: 1
                          maxItems: 52
                          items:
                          #week of year : w1, w2 ... w34-w46 ..
                            type: string
                            format: '[wW][1-5][0-9]?(-[wW][1-5][0-9]?)?'
                          example: [w1-w25,w30,w36, w40-w50]
              
    PreconditioningBase:
      type: object
      description: Preconditioning the vehicle for driver and passenger.
      properties:
        airConditioning:
          type: object
          properties:
            status:
              description: The status of the preconditioning feature.
              type: string
              enum:
                - Enabled
                - Disabled
                - Finished
                - Failure
            failureCause:
              description: failure cause
              type: string
              enum:
                - Defect
                - DoorOpened
                - LowBattery
                - LowFuelLevel
                - TooManyUnusedProg
                - WindowsRoofOpened
                - HoodOpened
                - NotParked
                - OtherFailures
            startingCause:
              description : starting cause
              type: string
              enum: [Immediate, Scheduled]
            programs:
              $ref: '#/components/schemas/PreconditioningProgram'
    
    ChargingSessionEnergy:
      type: object
      description: Charging session energy. 
      properties:
        batteryPower: 
          type: integer
          description: >
            Battery residual power. Unit is Wh
          example: 12000  
        level:
          type: integer
          description: Energy level in percentage.
          minimum: 0
          maximum: 100
          example: 75
        autonomy:
          type: integer
          description: Battery autonomy. Unit is Km
          example: 100
        chargingMode:
          type: string
          description: Charging mode
          enum:
            - Slow
            - Quick
          example: Quick
        chargingSpeed:
          type: integer
          description: Charging speed (expressed in gained batteryLife per hour -> KM/H).
        chargePreferenceRate:
          description: |
            Max amperage provided by the charge plug:
              
            |<b>Charge Preference Rate</b>|<b>Description</b>|
            |---|---|
            |Low|20% of max amperage provided by the charge plug|
            |LowPlus|40% of max amperage provided by the charge plug|
            |Med|60% of max amperage provided by the charge plug|
            |MedPlus|80% of max amperage provided by the charge plug|
            |High|100% of max amperage provided by the charge plug|
          type: string
          enum:
            - Low
            - LowPlus
            - Med
            - MedPlus
            - High
        chargingType:
          type: string
          description: >
            Charging type preferences. Full means that the charge will stop when it's completed.
            Partial will stop before end of charge to optimize battery lifetime.
          enum:
            - Full
            - Partial
          example: 0  
        powerType:
          type: string
          description: >
            Charging power type: 
              * AC (Alternating Current) 
              * DC (Direct Current).
          enum:
            - AC
            - DC
    
    TimestampedChargingSession:
      allOf:
        - $ref: '#/components/schemas/CreatedAtField'
        - $ref: '#/components/schemas/UpdatedAtField'
        - properties:
            sid: 
              type: string
              description: Charging session unique ID.
        - $ref: '#/components/schemas/ChargingSession'
        - required:
            - createdAt
            - updatedAt
            - sid
    HALTimestampedChargingSession:
      allOf:
        - properties:
            _links:
              type: object
              description: HAL links.
              properties:
                self:
                  $ref: '#/components/schemas/link'
                vehicle:
                  $ref: '#/components/schemas/link'
              required:
                - self
            sid: 
              type: string
              description: Charging session unique ID.
        - $ref: '#/components/schemas/CreatedAtField'
        - $ref: '#/components/schemas/UpdatedAtField'
        - $ref: '#/components/schemas/ChargingSession'
        - required:
            - createdAt
            - updatedAt
            - sid            

    TimestampedChargingSessions:
      title: ChargingSessions
      description: List of a charging sessions response.
      allOf:
        - $ref: '#/components/schemas/CollectionResult'
        - description: List of a charging sessions response
          properties:
            _links:
              $ref: '#/components/schemas/Tab_Links'
            total:
              type: integer
            totalPage:
              type: integer
            currentPage:
              type: integer
            _embedded:
              type: object
              properties:
                sessions:
                  type: array
                  items:
                    $ref: '#/components/schemas/HALTimestampedChargingSession'   


    ChargingSession:
      type: object
      required:
        - state
        - start
        - end
        - duration
        - startEnergy
        - endEnergy
        - gain
      properties:
        state:
              $ref: '#/components/schemas/LifecycleState'  
        start:  
              description: Session start time.
              type: string
              format: date-time
        end:  
              description: Session end time.
              type: string
              format: date-time
        duration:
              description: The session duration formatted using the duration format based on [ISO 8601]
              type: string
        position:
          allOf:
            - description: Vehicle charge session position.
            - $ref: '#/components/schemas/PositionBase'
        startEnergy:
          $ref: '#/components/schemas/ChargingSessionEnergy'
        endEnergy:
          $ref: '#/components/schemas/ChargingSessionEnergy'
        finishReason: 
            description: Charging Finish Reason refers to the reason that causes the charging session to end.
            type: string
            enum:
              - Disconnected
              - Failure
              - Stopped
              - Finished
        segments:
            type: array
            description: Segments of the session representing the offset of the charging power level, charge mode or charge speed changes.
            items:
                $ref: '#/components/schemas/ChargingSessionSegment'
        gain: 
            type: object
            description: The energy gained during this session.
            properties:
              level: 
                description: The power percentage level gained during this session.
                type: integer
              autonomy: 
                description: The vehicle autonomy level gained during this session. Unit is Km
                type: integer
              power:  
                description: The vehicle power gained during this session. Unit is Wh
                type: integer
        environment:  
            type: object
            description: Charge session envehicle environement. 
            properties:
              temperatures:
                type: object
                description: Measurements of maximum and minimum temperatures during the charge session.
                properties:
                  max: 
                    type: number
                    format: float
                    description: Max collected temperature.
                  min:
                    type: number
                    format: float
                    description: Min collected temperature.
              
              
    ChargingSessionSegment:
      type: object
      properties:
        level:
          type: integer
          description: Energy level at the start of the segment.
          example: 50  # Example energy level in KM
        autonomy:
          type: integer
          description: Energy level in kilometers (KM) at the start of the segment.
          example: 250  # Example energy level in KM

        load:
          type: integer
          description: Battery load (residual power) in watt-hours (Wh) at the start of the segment.
          example: 50000  # Example battery load in Wh
        chargingMode:
          type: string
          description: Charging mode
          enum:
            - Slow
            - Quick
        chargingRate:
          type: integer
          description: Charging speed (expressed in gained batteryLife per hour -> KM/H).
          example: 120  # Example charge rating in Km/hour 
        chargingPowerLevel:
          type: integer
          description: Charging power level during the segment.
          minimum: 1
          maximum: 5
          example: 3  # Example for charging power level
        offset:
          type: integer
          description: Offset of this segment in seconds.
          example: 3600  # Example offset in seconds (1 hour)

    chargeSchedules:
      type: object
      properties:
        status:
          description: The status of the preconditioning feature.
          type: string
          enum:
            - Enabled
            - Disabled
            - Finished
            - Failure
        failureCause:
          description: failure cause
          type: string
          enum:
            - Defect
            - DoorOpened
            - LowBattery
            - LowFuelLevel
            - TooManyUnusedProg
        programs:
          allOf:
            - $ref: '#/components/schemas/ChargeProgram'
        settings:
              type: object
              $ref: '#/components/schemas/ChargeSettings'

    Preconditioning:
      allOf:
        - $ref: '#/components/schemas/CreatedAtField'
        - $ref: '#/components/schemas/PreconditioningBase'
      required:
        - createdAt
    Environment:
      type: object
      properties:
        luminosity:
          $ref: '#/components/schemas/Luminosity'
        air:
          $ref: '#/components/schemas/Air'
    EnvironmentBase:
      type: object
      properties:
        luminosity:
          $ref: '#/components/schemas/LuminosityBase'
        air:
          $ref: '#/components/schemas/AirBase'
    Luminosity:
      allOf:
        - $ref: '#/components/schemas/CreatedAtField'
        - $ref: '#/components/schemas/LuminosityBase'
      required:
        - createdAt
    LuminosityBase:
      allOf:
        - type: object
          properties:
            day:
              type: boolean
    Air:
      allOf:
        - $ref: '#/components/schemas/CreatedAtField'
        - $ref: '#/components/schemas/AirBase'
      required:
        - createdAt
    AirBase:
      type: object
      properties:
        temp:
          type: number
    Trip:
      allOf:
        - $ref: '#/components/schemas/UpdatedAtField'
        - $ref: '#/components/schemas/CreatedAtField'
        - description: Only blocks that have data for mandatory fields and atleast one optional field will be returned. 
        - title: Trip
          type: object
          required:
            - id
            - startedAt
            - stoppedAt
            - createdAt
          properties:
            _links:
              type: object
              properties:
                self:
                  $ref: '#/components/schemas/link'
                vehicle:
                  $ref: '#/components/schemas/link'
                waypoints:
                  $ref: '#/components/schemas/link'
                alerts:
                  $ref: '#/components/schemas/link'
              required:
                - self
            id:
              type: string
              description: trip identifier
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
            startedAt:
              type: string
              format: date-time
              description: Date & Time when the trip started
            stoppedAt:
              type: string
              format: date-time
              description: Date & Time when the trip stopped
            startMileage: 
              type: number
              format: float
              description: Vehicle mileage at the trip starting time. 
            startEnergies: #LiteEnergy
              description: Vehicle energies levels and autonomies at the trip start time. 
              type: array
              items: 
               $ref: '#/components/schemas/TripEnergy'
            endEnergies: #LiteEnergy
              description: Vehicle energies levels and autonomies at the trip end time. 
              type: array
              items: 
               $ref: '#/components/schemas/TripEnergy'
            stats:
              $ref: '#/components/schemas/TripStatistics'
            state:
              $ref: '#/components/schemas/TripState'
            locations:
              $ref: '#/components/schemas/TripLocation'
    
    GenericSegment:
      type: object
      properties: 
        offset:
          type: integer
          description: Offset of this segment in seconds.
          minimum: 0
          example: 300  # Example offset in seconds (5min)
        duration:
          type: integer
          description: The time duration of the segment.
          minimum: 0
          exclusiveMinimum: true
          example: 5 
    TripEnv:
      type: object
      description: Trip environment.
      properties:
        lightDrive:
          type: object
          description: Trip environment day/night driving statistics.
          properties:
            day:
              description: 'Percentage of the trip done in the day time. Unit: %'
              type: number
              format: float
              minimum: 1
              maximum: 100
            night:
              description: 'Percentage of the trip done in the night time. Unit: %'
              type: number
              format: float
              minimum: 1
              maximum: 100
        temp:
          type: object
          properties:
            max:
              type: number
              format: float
              description: 'Max temperature during the trip. Unit: celsius degree'
            min:
              type: number
              format: float
              description: 'Min temperature during the trip. Unit: celsius degree'
    TripStatistics:
      type: object
      required:
        - duration
        - distance
      properties:
        duration:
          type: string
          description: Duration of the trip
        distance:
          $ref: '#/components/schemas/Distance'
        energyConsumptions:
          description: The consumptions of different energies during this trip.
          type: array
          items:
            $ref: '#/components/schemas/EnergyConsumption'
        kinetic:
          $ref: '#/components/schemas/TripKinetic'
        env:
          $ref: '#/components/schemas/TripEnv'
        ecoCoaching:  
          $ref: '#/components/schemas/EcoCoaching'
        drivingMode :
          properties:
              segments:
                  $ref: '#/components/schemas/TripDrinvingModeSegments'  
    EcoCoaching:
      type: object
      required:
        - totalScore
      properties:
        totalScore:
          description: Overall Trip Score
          type: number
          format: float
        segments:
          type: array
          items:
            $ref: '#/components/schemas/EcoCoachingSegement'
    EcoCoachingSegement:
      allOf:
        - $ref: '#/components/schemas/GenericSegment'
        - title: Eco Coaching Segment
      required:
        - offset
        - duration
        - acceleration
      properties:  
        acceleration:
          allOf:
            - description: Segment Acceleration Score.
            - $ref: '#/components/schemas/ECScore'
        deceleration:
          allOf:
            - description: Segment Deceleration Score.
            - $ref: '#/components/schemas/ECScore'
        speed:
          allOf:
            - description:  Segment Speed Score.
            - $ref: '#/components/schemas/ECScore'
        score:
          allOf:
            - description: Segment Overall Score.
            - $ref: '#/components/schemas/ECScore'   
          
    ECScore:
                type: number
                format: float
                minimum: 0
                maximum: 5 
    TripKinetic:
      type: object
      properties:
        speed:
          description: Trip speed statistics.
          properties:
            averageSpeed:
              description: The average speed based on the entire trip. Unit = Km/H
              type: number
              format: float
            topSpeed:
              description: The max value recorded during the entire trip. Unit = Km/H
              type: number
              format: float
        acceleration:
          description: Acceleration statistics.
          properties:
            max:
              description: The max acceleration value recorded during the trip. Unit = m/s²
              type: number
              format: float
            min:
              description: The minimum acceleration value recorded during the trip. Unit = m/s²
              type: number
              format: float
            segments:
              type: object
              properties:
                hardAccelerations: 
                      description: Hard acceleration segments.
                      type: array
                      items:
                        $ref: '#/components/schemas/TripKineticGForceSegment'

                hardBrakings: 
                      description: Hard braking segments. 
                      type: array
                      items:
                        $ref: '#/components/schemas/TripKineticGForceSegment'
                    
                hardCornerings: 
                    description: Hard cornering segments. 
                    type: array
                    items:
                      $ref: '#/components/schemas/TripKineticGForceSegment'

    TripKineticGForceSegment:
      allOf:
        - $ref: '#/components/schemas/GenericSegment'
        - title: Trip Kinetic acceleration segment
          description: It represents acceleration, deceleration, or hard cornering time segments.
          properties: 
            acceleration:
                description: Acceleration value. It can be a non-zero positive or negative number.
                type: number
                format: float
                not:
                  enum: [0] # Exclude zero
    TripDrinvingModeSegments:
        title: Trip Driving mode segments.
        type: array
        items:
          $ref: '#/components/schemas/TripDrinvingModeSegment'
    TripDrinvingModeSegment:
     allOf:
        - $ref: '#/components/schemas/GenericSegment'
        - title: Trip Driving mode segment.
          required:
            - mode
            - offset
            - duration
          description: It represents driving mode changes time segments.
          properties: 
            mode:
                $ref: '#/components/schemas/DrivingModeEnum'    
    TripState:
      description: Expresses ongoing state and faults that occur during the trip.
      properties:
        done:
          description: Determines whether this trip is finished or not.
          type: boolean
        faults:
          description: The faults of this finished or in progress trip. This means that we lacked data from the vehicle to complete the trip description during one of its step (starting, progressing, or finishing).
          type: array
          items:
            type: object
            properties:
              fault:
                type: string
                enum:
                  - Unstarted
                  - DataLacking
                  - Unfinished
              cause:
                type: string
                enum:
                  - GeoPrivacy
                  - FullPrivacy
                  - Connection
    LifecycleState:
      description: Expresses the state of the resource throughout its lifecycle, including any faults that occur during the process..
      required:
        - done
      properties:
        done:
          description: Determines whether this resource lifecycle is done or not.
          type: boolean
        faults:
          description: The faults of this completed or ongoing process indicate that data from the vehicle was insufficient to complete the process during one of its stages (starting, progressing, or finishing).
          type: array
          items:
            type: object
            properties:
              status:
                type: string
                enum:
                  - Unstarted
                  - DataLacking
                  - Unfinished
              cause:
                type: string
                enum:
                  - GeoPrivacy
                  - FullPrivacy
                  - Connection
    TripLocation:
      type: object
      properties:
        startPosition:
          $ref: '#/components/schemas/TripPosition'
        stopPosition:
          $ref: '#/components/schemas/TripPosition'
    PropulsionType:
      type: string
      enum:
        - Thermal
        - Electric
        - Hybrid
    Vehicle:
      allOf:
        - title: Vehicle Information
          type: object
          properties:
            _links:
              type: object
              properties:
                self:
                  $ref: '#/components/schemas/Link'
                lastTelemetries:
                  $ref: '#/components/schemas/Link'
                telemetries:
                  $ref: '#/components/schemas/Link'
                collisions:
                  $ref: '#/components/schemas/Link'
                trips:
                  $ref: '#/components/schemas/Link'
                maintenance:
                  $ref: '#/components/schemas/Link'
                alarms:
                  $ref: '#/components/schemas/Link'
                alerts:
                  $ref: '#/components/schemas/Link'
                remotes:
                  $ref: '#/components/schemas/Link'
                groups:
                  type: array
                  minItems: 1
                  items:
                    $ref: '#/components/schemas/Link'
            vin:
              description: Unique vehicle identifier number
              type: string
            brandCode:
              description: Code to identify the brand of vehicle.
              type: string
            familyCode:
              description: Code to identify the vehicle family(i.e SUV, Minivan, etc..)
              type: string
            motorization:
              type: string
              description: Motorization of the vehicle.
              enum:
                - Electric
                - Hybrid
                - Thermic
                - Hydrogen
            fuelType:
              type: string
              description: fuelType of the vehicle.
              enum:
                - G
                - H
                - E
                - D
            _embedded:
              type: object
              properties:
                extension:
                  $ref: '#/components/schemas/VehicleExtension'
      required:
        - _links
        - vin
    Alerts:
      title: Alerts Array
      allOf:
        - $ref: '#/components/schemas/CollectionResult'
        - properties:
            _embedded:
              type: object
              properties:
                alerts:
                  type: array
                  items:
                    $ref: '#/components/schemas/Alert'
          required:
            - _embedded
    Collisions:
      title: Vehicle Collisions array
      allOf:
        - $ref: '#/components/schemas/CollectionResult'
        - properties:
            _embedded:
              type: object
              properties:
                Collisions:
                  type: array
                  items:
                    $ref: '#/components/schemas/Collision'
          required:
            - _embedded
    
    StolenWayPoints:
      description: WayPoints of a Stolen context
      allOf:
        - $ref: '#/components/schemas/CollectionResult'
        - properties:
            _embedded:
              type: object
              properties:
                positions:
                  type: array
                  items:
                    $ref: '#/components/schemas/Position'
              required:
                - positions        
    WayPoints:
      description: WayPoints of a Trip response
      allOf:
        - $ref: '#/components/schemas/CollectionResult'
        - properties:
            _embedded:
              type: object
              properties:
                positions:
                  type: array
                  items:
                    $ref: '#/components/schemas/Position'
              required:
                - positions
    
    TripProfile:
      description: Body containing profile name (optional)
      type: array
      items:
        type: object
        properties:
          profile:
            type: string
    TripSuggestions:
      description: Array of suggestion objects.
      type: array
      items:
        type: object
        properties:
          adviseStatementId:
            type: string
          contentId:
            type: string
    Telemetry:
      allOf:
        - $ref: '#/components/schemas/CreatedAtField'
        - type: object
          properties:
            _links:
              type: object
              properties:
                self:
                  $ref: '#/components/schemas/Link'
                vehicle:
                  $ref: '#/components/schemas/Link'
                trip:
                  $ref: '#/components/schemas/Link'
            privacy:
              $ref: '#/components/schemas/PrivacyBase'
            vehicle:
              type: object
              description: Only blocks that have data for mandatory fields and atleast one optional field will be returned.
              properties:
                ignition:
                  $ref: '#/components/schemas/IgnitionBase'
                location:
                  $ref: '#/components/schemas/PositionBase'
                preconditioning:
                  $ref: '#/components/schemas/PreconditioningBase'
                tyreState:
                  $ref: '#/components/schemas/TyreStateBases'
                energies:
                  $ref: '#/components/schemas/EnergyBases'
                engines:
                  $ref: '#/components/schemas/EngineBases'
                doorsState:
                  $ref: '#/components/schemas/DoorsStateBase'
                battery:
                  $ref: '#/components/schemas/BatteryBase'
                safety:
                  $ref: '#/components/schemas/SafetyBase'
                odometer:
                  $ref: '#/components/schemas/VehicleOdometerBase'
                kinetic:
                  $ref: '#/components/schemas/BasicKinetic'
                propulsion:
                  $ref: '#/components/schemas/PropulsionBase'
                braking:
                  $ref: '#/components/schemas/BrakingSystemBase'
                wipingBlades:
                  $ref: '#/components/schemas/WipingBladesStateBase'
                transmission:
                  $ref: '#/components/schemas/TransmissionBase'
                adas:
                  $ref: '#/components/schemas/AdasBase'
                lightingSystem:
                  $ref: '#/components/schemas/LightingSystemBase'
                maintenance:
                  $ref: '#/components/schemas/MaintenanceBase'
                drivingBehavior:
                  allOf:
                    - description: Describe the behavior of the driver
                    - $ref: '#/components/schemas/DrivingBehaviorBase'
                alerts:
                  $ref: '#/components/schemas/AlertDetailsBase'
                alarm:
                  $ref: '#/components/schemas/BaseAlarm'
                stolen:
                  $ref: '#/components/schemas/StolenBase'  
                powerTrain:
                  $ref: '#/components/schemas/PowerTrainBase'
            environment:
              $ref: '#/components/schemas/EnvironmentBase'
            
          required:
            - createdAt
    Telemetries:
      allOf:
        - $ref: '#/components/schemas/CollectionResult'
        - properties:
            _embedded:
              type: object
              properties:
                telemetries:
                  type: array
                  items:
                    $ref: '#/components/schemas/Telemetry'
          required:
            - _embedded
    TelemetryExtensionType:
      type: array
      minItems: 1
      maxItems: 4
      items:
        type: string
        enum:
          - location
          - maintenance
          - odometer
          - kinetic
    Trips:
      title: Trips
      description: List of a Trips response
      allOf:
        - $ref: '#/components/schemas/CollectionResult'
        - description: List of a Trips response
          properties:
            _links:
              $ref: '#/components/schemas/Tab_Links'
            total:
              type: integer
            totalPage:
              type: integer
            currentPage:
              type: integer
            _embedded:
              type: object
              properties:
                trips:
                  type: array
                  items:
                    $ref: '#/components/schemas/Trip'
    Vehicles:
      title: Vehicle Information
      allOf:
        - $ref: '#/components/schemas/CollectionResult'
        - title: Vehicle List
          properties:
            _embedded:
              type: object
              properties:
                vehicles:
                  type: array
                  items:
                    $ref: '#/components/schemas/Vehicle'
    url:
      type: string
      description: URL format follows [RFC 3986](https://tools.ietf.org/html/rfc3986) and usually looks like this ` scheme://host[:port][/Path] `
    link:
      type: object
      description: A Link Object as defined by [JSONHAL#Link Object](https://tools.ietf.org/html/draft-kelly-json-hal-08#section-5).
      required:
        - href
      properties:
        href:
          $ref: '#/components/schemas/url'
        templated:
          type: boolean
          description: SHOULD be true when the Link Object's "href"   property is a URI Template
        type:
          type: string
          description: a hint to indicate the media type  expected when dereferencing the target resource.
        deprecation:
          allOf:
            - $ref: '#/components/schemas/url'
            - description: indicates that the link is to be deprecated (i.e. removed) at a future date.  Its value is a URL that SHOULD provide further information about the deprecation.
        name:
          type: string
        title:
          type: string
          description: Its value is a string and is intended for labelling the link with a human-readable identifier (as defined by [RFC5988](https://tools.ietf.org/html/rfc5988)).
        profile:
          type: string
          description: Its value is a string and is intended for indicating the language of the target resource (as defined by [RFC5988]).
        hreflang:
          type: string
          description: Its value is a string which is a URI that hints about the profile (as defined by [I-D.wilde-profile-link](https://tools.ietf.org/html/draft-kelly-json-hal-08#ref-I-D.wilde-profile-link)) of the target resource.
    tab_links:
      description: |
        [HAL](https://en.wikipedia.org/wiki/Hypertext_Application_Language#Convention) (Hypertext Application Language) link collection
      type: object
      properties:
        self:
          $ref: '#/components/schemas/link'
        first:
          $ref: '#/components/schemas/link'
        next:
          $ref: '#/components/schemas/link'
        prev:
          $ref: '#/components/schemas/link'
        last:
          $ref: '#/components/schemas/link'
    ChargingStatusEnum:
      description: status of charging system.
      type: string
      enum:
        - Disconnected
        - InProgress
        - Failure
        - Stopped
        - Finished
    ChargePreferenceRateEnum:
      description: |
            Max amperage provided by the charge plug:
              
            |<b>Charge Preference Rate</b>|<b>Description</b>|
            |---|---|
            |Low|20% of max amperage provided by the charge plug|
            |LowPlus|40% of max amperage provided by the charge plug|
            |Med|60% of max amperage provided by the charge plug|
            |MedPlus|80% of max amperage provided by the charge plug|
            |High|100% of max amperage provided by the charge plug|
      type: string
      enum:
        - Low
        - LowPlus
        - Med
        - MedPlus
        - High
    AlertMsgEnum:
      type: string
      description: Alert list
      enum:
        - AbsBrakingSystemFault
        - ActiveSpoilerFault
        - AdBlueFault
        - AdBlueFaultStartingImpossible
        - AdBlueFaultStartingImpossibleSoon
        - AddWasherFluid
        - AirbagOrSeatBeltPretensionerOrActiveHoodFailure
        - AssistanceButtonFault
        - AutomaticBrakingDeactivated
        - AutomaticHeadlightAdjustmentFault
        - BatteryChargeOrElectricalCircuitSystemFailure
        - BrakingSystemFailure
        - ChargingFailure
        - CheckTheCenterBrakeLamp
        - CollisionDetectionSystemFault
        - CollisionMitigationSystemFault
        - CoolantLevelLow
        - DrivingAssistanceSensorBlind
        - ElectricTractionSystemFailureLimitSpeed
        - ElectricTractionSystemFailureStopVehicle
        - ElectricTractionSystemFault
        - ElectronicImmobiliserFault
        - EmissionSystemOrAdBlueQualityFailureStartingImpossible
        - EmissionSystemOrAdBlueQualityFailureStartingImpossibleSoon
        - EmissionSystemOrAdBlueQualityFailure
        - EngineFailure
        - EngineFault
        - EngineMisfiringFuel
        - EngineOilPressureFailure
        - EngineTemperatureFailure
        - EspAsrSystemFault
        - FrontLeftFlashingIndicatorFault
        - FrontLeftFogLampsFault
        - FrontLeftParkingLampsFault
        - FrontRightFlashingIndicatorFault
        - FrontRightFogLampsFault
        - FrontRightParkingLampsFault
        - FuelLevelLow
        - GearboxFault
        - HeadlightsFault
        - InstalledSpareWheelFault
        - InterVehicleTimeMeasurementFault
        - isFuelLevelLow
        - LaneChangeAssistanceFault
        - LaneDepartureWarningSystemFault
        - LeftBrakeLampFault
        - FrontLeftDoorOpen
        - FrontLeftDoorOpenLowSpeed
        - FrontLeftTirePressurSensorFault
        - FrontLeftTirePuncture
        - FrontLeftTireUnderInflated
        - RearLeftDoorOpen
        - RearLeftDoorOpenLowSpeed
        - RearLeftTirePressureSensorFault
        - RearLeftTirePuncture
        - RearLeftTireUnderInflated
        - LeftReverseLampFault
        - OilLevelLow
        - ParkAssistSystemFault
        - ParkingBrakeOrHillStartSystemFailure
        - ParticleFilterAdditiveLevelTooLow
        - ParticleFilterFull
        - ParticleFilterRegenerating
        - PowerSteeringFailure
        - PowerSteeringFault
        - PreheatingPreventilationDeactivatedBatteryLow
        - PreheatingPreventilationDeactivatedClockUnset
        - PreheatingPreventilationDeactivatedFuelLevelLow
        - RearLeftFlashingIndicatorFault
        - RearLeftFogLampsFault
        - RearLeftParkingLampsFault
        - RearRightFlashingIndicatorFault
        - RearRightFogLampsFault
        - RearRightParkingLampsFault
        - RearWindowOpen
        - RearWindowOpenLowSpeed
        - ReplaceBrakePads
        - ReplaceTheRemoteControlBattery
        - RetractableRoofMechanismFault
        - RightBrakeLampFault
        - RightFrontDoorOpenLowSpeed
        - RightFrontDoorOpen
        - RightFrontTirePressurSensorFault
        - RightFrontTirePuncture
        - RightFrontTireUnderInflated
        - RightRearDoorOpen
        - RightRearDoorOpenLowSpeed
        - RightRearTirePressurSensorFault
        - RightRearTirePuncture
        - RightRearTireUnderInflated
        - RightReverseLampFault
        - RiskOfIce
        - RoofOperationNotPossibleSpeedUnknown
        - RoofOperationNotPossibleTooHighTemp
        - ShiftToPark
        - SteeringLockFault
        - SuspensionFault
        - SuspensionFaultLimitSpeed
        - SuspensionFaultRepairVehicle
        - TireUnderInflationDetectionSystemFault
        - TooManyRoofOperation
        - TrailerConnectionFault
        - TrunkOrHoodOpen
        - TrunkOrHoodOpenLowSpeed
        - WaterInTheDieselFuelFilter
        - CHRGSystemFail
        - ETCIndLampStatus
        - milLampStat
        - transOverTemp
        - oilPressure
        - DpfDefWarningStatus
        - engineOilOverTemp
        - checkFuelCap
        - autoOilChange
        - filterWarningStatus
        - engineCoolant
        - airbagIndLamp
        - BsmServiceRequest
        - headlightPositionLight
        - lowBeamLight
        - highBeamLight
        - fogLamp
        - brakeLight
        - tailLight
        - distanceToService
        - isTPMSVehicle
        - HanFreHigAss_Sts
        - ActLanMan_Sts
        - AdaCruCon_Sts
        - AutEmeBra_Sts
        - TraSigRec_Sts
        - DroDriDet_Sts
        - MIL_OnRq_BPCM
        - TurtleModeSts
        - HEV_LMP_RQ
        - HVBatCntctrStat
        - isServiceNeeded
        - warning
    sortenum:
      type: string
      enum:
        - Ascending
        - Descending
      default: Descending
    TelemetryEnum:
      type: array
      minItems: 1
      maxItems: 10
      items:
        type: string
        enum:
          - environment
          - privacy
          - vehicle
          - vehicle.ignition
          - vehicle.location
          - vehicle.preconditioning
          - vehicle.tyreState
          - vehicle.energies
          - vehicle.engines
          - vehicle.doorsState
          - vehicle.battery
          - vehicle.safety
          - vehicle.odometer
          - vehicle.kinetic
          - vehicle.propulsion
          - vehicle.brakingSystem
          - vehicle.transmission
          - vehicle.adas
          - vehicle.lightingSystem
          - vehicle.maintenance
          - vehicle.alertsReport
          - vehicle.activeAlerts
          - vehicle.drivingBehavior
          - vehicle.alarm.status
          - vehicle.alarm.trigger
    AlarmTypeEnum:
      type: array
      items:
        type: string
        enum:
          - vehicle.alarm.status
          - vehicle.alarm.trigger
    TripPositionCtxKinetic:
      type: string
      enum:
      
        - HardBraking
        - HardAcceleration
        - HardCornering
        
    TripStatsKineticEnum:
      type: string
      enum:
        - HardAcceleration
        - HardBraking
        - HardCornering
 
    Range:
      type: string
      pattern: \d+-\d*
      default: 0-
      description: |
        value range
    LifeCycleStatesEnum:
      type: string
      enum:
        - Nominal
        - Unstarted
        - DataLacking
        - Unfinished
    LifeCycleStatesEnumArray:
      type: array
      items:
        $ref: '#/components/schemas/LifeCycleStatesEnum'
    TripStateEnum:
      type: string
      enum:
        - Nominal
        - Unstarted
        - DataLacking
        - Unfinished
    TripStateEnumArray:
      type: array
      items:
        $ref: '#/components/schemas/TripStateEnum'
    DrivingModeEnum:
          description: Driving mode by driver selection
          type: string
          enum:
            - Normal
            - Sport
            - Comfort
            - Eco
            - Sand
            - Mud
            - Snow
            - ZEV
            - Hybrid
            - ZEVEco
            - HybridEco
            - EcoPlus
            - eAWD
            - 4AWD
            - ReinforcedLoad    
            - City
            - SportPlus
            - OffRoad
            - Race
    TripReportSummaryEnum:
      type: array
      items:
        type: string
        enum:
          - Weekly
          - Daily
          - Monthly
          - Custom
    TripVehicleType:
      type: array
      minItems: 1
      maxItems: 3
      items:
        type: string
        enum:
          - OffRoad
          - Trips
          - EcoCoaching
    xError:
      type: object
      description: Detailed error
      properties:
        name:
          type: string
          description: A human-readable, unique name for the error. Should be mapped on the server side to ensure consistency.
        debug:
          type: string
          description: A unique error identifier generated on the server-side and logged for correlation purposes starting with ERROR_<UniqueId per each request>
        message:
          type: string
          description: A human-readable message, describing the error. This message MUST be a description of the problem NOT a suggestion about how to fix it.
      example:
        name: BAD_REQUEST 
        debug: ERROR_123456789 
        message: Invalid data provided. 
      required:
        - name
        - message
        - debug
    501RemoteError:
      type: object
      description: Remote operation is not supported by the vehicle
      properties:
        name:
          type: string
          description: A human-readable, unique name for the error. Should be mapped on the server side to ensure consistency.
        debug:
          type: string
          description: A unique error identifier generated on the server-side and logged for correlation purposes starting with ERROR_<UniqueId per each request>
        message:
          type: string
          description: A human-readable message, describing the error. This message MUST be a description of the problem NOT a suggestion about how to fix it.
      example:
        code: REMOTE_NOT_SUPPORTED
        debug: ERROR_123456789
        message: Remote operation is not supported by the vehicle
      required:
        - name
        - message
        - debug
    FeatureNotSupportedError:
      type: object
      description: Remote operation is not supported by the vehicle
      properties:
        name:
          type: string
          description: A human-readable, unique name for the error. Should be mapped on the server side to ensure consistency.
        debug:
          type: string
          description: A unique error identifier generated on the server-side and logged for correlation purposes starting with ERROR_<UniqueId per each request>
        message:
          type: string
          description: A human-readable message, describing the error. This message MUST be a description of the problem NOT a suggestion about how to fix it.
      example:
        code: FEATURE_NOT_SUPPORTED
        debug: ERROR_123456789
        message: Specific feature is not supported by the vehicle
      required:
        - name
        - message
        - debug
    DataNotFoundError:
      type: object
      description: Detailed error
      properties:
        code:
          type: integer
        debug:
          type: string
        message:
          type: string
      example:
        code: 1001
        debug: CMP_001234
        message: Data Not found
      required:
        - name
        - message
        - debug
    UpdatedAtField:
      type: object
      properties:
        updatedAt:
          description: Date when the resource has been updated.
          type: string
          format: date-time
    CreatedAtField:
      type: object
      properties:
        createdAt:
          description: Date when the resource has been created.
          type: string
          format: date-time
    MonitorId:
      type: string
      description: Uniq monitor ID returned when the monitor was created succefully.
    Attribute:
      type: object
      properties:
        type:
          type: string
          enum:
            - Header
            - Body
            - Query
          description: |
            3 attributes type:

            |Attribute-type|Role|
            |----------|-------------|
            |Header|-Will be add as http header extension "x-######:"|
            |Body|-Will be simply add to event body map attribute (see monitor event definition in template document)|
            |Query|-Will set as http query parameter when invoking the Webhook|
        key:
          type: string
        value:
          oneOf:
            - type: string
            - type: string
              enum:
                - Vin
                - ChannelId
                - ChannelLabel
              description: |
                A value  that will be associated with the provided key as is if expressed as literal value or  contextually valued if prefixed with the dollar sign ($).  

                * example: Having a vin=VIN123456, the following attribute set:
                        ```"attributes": [
                            {
                              "type": "Header",
                              "key": "X-vehicle-id"
                              "value":"$Vin"
                            }
                          ]```
                  will be valued as http header extension: 
                          
                  *"X-vehicle-id: VIN123456"*
      required:
        - key
        - value
        - type
      example:
        type: Header
        key: X-Vehicle_Id
        value: $Vin
    ChannelAttribute:
      title: Attributes
      type: object
      properties:
        type:
          type: string
          enum:
            - Header
            - Query
          description: |
            2 attributes type:

            |Attribute-type|Role|
            |----------|-------------|
            |Header|-Will be add as http header extension "x-######:"|
            |Query|-Will set as http query parameter when invoking the Webhook|
        key:
          type: string
        value:
          oneOf:
            - type: string
            - type: string
              enum:
                - Vin
                - ChannelId
                - ChannelLabel
              description: |
                A value  that will be associated with the provided key as is if expressed as literal value or  contextually valued if prefixed with the dollar sign ($).  

                * example: Having a vin=VIN123456, the following attribute set:
                        ```"attributes": [
                            {
                              "type": "Header",
                              "key": "X-vehicle-id"
                              "value":"$Vin"
                            }
                          ]```
                  will be valued as http header extension: 
                          
                  *"X-vehicle-id: VIN123456"*
      required:
        - key
        - value
        - type
      example:
        type: Header
        key: X-Vehicle_Id
        value: $Vin    
    AttributeSet:
      type: array
      description: Additional attributes-set as key/value pairs wich will be added to the request when sending the event. It can be used as a header enhancement (such as headers can be used as an authentication parameter when posting the event) or simply added to the notification event body (as set of key/values) or finally as additional query parameters.
      items:
        $ref: '#/components/schemas/ChannelAttribute'
    WSAttribute:
      allOf:
        - $ref: '#/components/schemas/Attribute'
        - properties:
            type:
              type: string
              description: Websocket basic key/value available as body attribute only.
              enum:
                - Body
              default: Body
    WSAttributeSet:
      description: Additional attributes-set as key/value pairs wich will be added to the request when sending the event. It can be used as a paylod key/value map enhancement or simply added to the notification event body (as set of key/value).
      title: WS Attribute
      type: array
      items:
        $ref: '#/components/schemas/ChannelAttribute'
    PushNotifAttribute:
        example:
          type: Header
          key: X-Vehicle_Id
          value: $Vin
        required:
            - type
            - key
            - value
        type: object
        properties:
            type:
              type: string
              description: Push notification basic key/value. The key should not be a reserved word ("from", "message_type", or any word starting with "google" or "gcm"). The header attribute are mapped to data key/value map.
              enum:
                - Header
                - Query
              default: Header
            key:
              type: string
            value:
              oneOf:
                - type: string
                - type: string
                  description: |
                         The key/value pair is included as is in the generic 'data' part of the notification If the key is not a reserved one and type is not ```Body```, otherwise, it  will be added as the the corresponding field of the [push-notification spec](https://firebase.google.com/docs/cloud-messaging/concept-options#customizing-a-message-across-platforms) of output message (at notification time).
                         
                        
                 
                            ## Keywords:  
                             Those keywords, FCM and SSDP, can be used to customize notification messages and then used to customize the Firebase notification .
                            > * _Those attribute keys are optional but should be provided with their valid values with the respect of the format (see the table below) if set._

                            | Key   |      Category      |  Description |  Format |
                            |----------|:-------------:|------:|------:| 
                            | disableNotificationPayload | iOS, Android and WebPush |If set to true, will remove ```notification ``` payload from the Firebase body when sending event message to Firebase. | ```"true"``` or  ```"false"```|
                            | deliveryPriority |iOS, Android and WebPush only|Define the message delivery priority for Android and WebPush platforms. It will be mapped on the FCM field: (Android > ```"priority"```), (iOS > ```"apns-priority"```) and (WebPush > ```"Urgency"```). |```"low"```, ```"normal"``` or  ```"high"```. (<b>note:</b> ```"low"``` will be mapped on normal (lowest level) on android and web push platforms)|
                            | mutable | iOS only|Set the apns payload mutable or not.  It will be mapped on the FCM field ```"mutable-content"```. For more details, see [FCM Protocol](https://firebase.google.com/docs/cloud-messaging/http-server-ref).  |```"true"``` or  ```"false"```|
                            | contentAvailable |iOS only |this field to represent ```"content-available"``` in the APNs payload. It's used (<i>true value</i>) to wakeup an inactive client app. For more details, see [FCM Protocol](https://firebase.google.com/docs/cloud-messaging/http-server-ref)|```"true"``` or  ```"false"```|                            
                            | title | iOS, Android and WebPush |Title of the notification|not empty string|
                            | body | iOS, Android and WebPush|The notification's body text|not empty string|
                            | image| iOS, Android and WebPush |URL of the image displayed in a notification |not empty URL string [RFC 3986](https://tools.ietf.org/html/rfc3986)  (scheme://host[:port][/Path]|
                            | sound | iOS, Android |Specifying the sound to play when the device receives the notification|not empty string|
                            | clickAction | Android|The action associated with a user click|not empty string|
                            | ttl | iOS, Android and WebPush|How long (in seconds) the message should be kept in FCM storage if the device is offline|not empty string: format $(int) - pattern '^\d+$'  |
                            | bodyLocKey | iOS and Android|The key to the body string in the app's string resources|not empty string|
                            | bodyLocArgs | iOS and Android |Variable string values to be used in place of the format specifiers in body_loc_key|not empty string. <b>Args are separated by comma (,) if several</b>|
                            | titleLocKey | iOS and Android |The key to the title string in the app's string resources |not empty string|
                            | titleLocArgs | iOS and Android |Variable string values to be used in place of the format specifiers in title_loc_key. <b>Args are separated by comma (,) if several</b>|
                            | badge | iOS and WebPush |The value of the badge on the home screen app icon|not empty string (integer) format|
                            | icon | Android and WebPush |The notification's icon|not empty string format|
                            | tag | Android and WebPush |Identifier used to replace existing notifications in the notification drawer.|not empty string format|
                            *For more details of the FCM Apns, Android or Webpush message keys, refer to Firebase Google documentation.
                - type: string
                  enum:
                    - Vin
                    - ChannelID
                    - ChannelLabel
                  description: |
                    Set of variables that will be contextually valued and used as push notification data or body attribute value.

                    *To reference the variable, prefix its name with the dollar sign ($)*


                    * example: Having a vin=VIN123456, the following attribute set:
                            ```"attributes": [
                                {
                                  "type": "Header",
                                  "key": "vehicle-id"
                                  "value":"$Vin"
                                }
                              ]```
                      will be valued at data map key/value: 
                              
                      {"vehicle-id: VF123456"}        
    PushNotifAttributeSet:
      description: Additional attributes-set as key/value pairs wich will be added to the request when sending the event. It can be used as a paylod key/value map enhancement or simply added to the notification event body (as set of key/value).
      type: array
      items:
        $ref: '#/components/schemas/PushNotifAttribute'        
    DQAttribute:
      allOf:
        - $ref: '#/components/schemas/Attribute'
        - properties:
            type:
              type: string
              description: |
                Websocket basic key/value available as body attribute only.
              enum:
                - Body
              default: Body
    ChannelAttributes:
      title: ChannelAttributes
      description: |
        Additional attributes that will add to or replace the specific channel (pushnotif, webhook or websocket) ones when sending the event.
                
        * Note: Union attributes set. Only one of the following: pushnotif, webhook orwebsocket should be set and it should be consistent with the channel type to wich it is associated
      type: object
      properties:
        pushnotif:
          description: Additional attributes-set as key/value pairs wich will be added to the request when sending the event. It can be used as a paylod key/value map enhancement or simply added to the notification event body (as set of key/value).
          type: array
          items:
            $ref: '#/components/schemas/PushNotifAttribute'      
        webhook:
          description: Additional attributes-set as key/value pairs wich will be added to the request when sending the event. It can be used as a header enhancement (such as headers can be used as an authentication parameter when posting the event) or simply added to the notification event body (as set of key/values) or finally as additional query parameters.
          type: array
          items:
            $ref: '#/components/schemas/AttributeSet'
        websocket:
          description: Additional attributes-set as key/value pairs wich will be added to the request when sending the event. It can be used as a paylod key/value map enhancement or simply added to the notification event body (as set of key/value).
          type: array
          items:
            $ref: '#/components/schemas/WSAttributeSet'
    BasicAttribute:
      allOf:
        - description: |
            Common basic attribute. Allowing to add a key/value map to a notification event when sending.
        - $ref: '#/components/schemas/Attribute'
        - properties:
            type:
              type: string
              description: |


                |type|Role|
                |----------|-------------|
                |Header|Will be add as channel header entry (x-###### for webhook channel or as data map key/value for push-notif).|
                |Body|-Will be  added to event body map.|
              enum:
                - Header
                - Body
    RemoteAttribute:
      type: object
      properties:
        type:
              type: string
              description: |


                |type|Role|
                |----------|-------------|
                |Body|-Will be  added to event body map.|
              enum:
                - Body
        key:
          type: string
        value:
              oneOf:
                - type: string
                - type: string
                  enum:
                    - RemoteType
                    - RemoteStatus
                    - RemoteLabel
                  description: |
                    Set of variables that will be contextually valued and used as attribute value. To reference the variable, prefix its name with the dollar sign ($)  


                    * example: Having a vin=VIN123456, the following attribute set:
                            ```"attributes": [
                                {
                                  "type": "Body",
                                  "key": "X-remoteType"
                                  "value":"$remoteType"
                                }
                              ]```
                      will be valued as http header extension: 
                              
                      *"X-remoteType: Horn"*
    RemoteAttributeSet:
      type: array
      description: Additional attributes-set as key/value pairs wich will be added to the request when sending the event. It can be used as notification header enhancement (such as headers can be used as an authentication parameter when posting the event) or simply added to the notification event body (as set of key/values) or finally as additional query parameters(if supported).
      items:
        $ref: '#/components/schemas/RemoteAttribute'
    MonitorAttribute:
      type: object
      properties:
        type:
          type: string
          description: |
                |type|Role|
                |----------|-------------|
                |Body|-Will be  added to event body map.|
          enum:
            - Body
        key:
          type: string
        value:
              oneOf:
                - type: string
                - type: string
                  enum:
                    - MonitorID
                    - MonitorLabel
                  description: |
                    Set of variables that will be contextually valued and used as attribute value. To reference the variable, prefix its name with the dollar sign ($)  

                    * example: Having a vin=VIN123456, the following attribute set:
                            ```"attributes": [
                                {
                                  "type": "Body",
                                  "key": "X-monitorID"
                                  "value":"$Vin"
                                }
                              ]```
                      will be valued as http header extension: 
                              
                      *"X-monitorID: 0123456"*
    MonitorAttributeSet:
      type: array
      description: Additional and specific monitor attributes-set as key/value pairs wich will be added to the remote request when sending the event. Attributes will be added in addition to the basic attributes (from channel).
      items:
        $ref: '#/components/schemas/MonitorAttribute'
    PushNotif:
      title: PushNotif
      description: |
        Defines the Push-Notification channel. This kind of channel distributes event messages to subscribed devices (Android or iOS). This push-notification feature is based on FCM (Firebase Cloud Messaging) and supports APNs (Apple Push Notification service) and GCM (Google Cloud Messaging for Android) notification channels.

        An attribute set (_attributes_) entry allows you to insert any convenient data (as _message.data_ feld of FCM message) into all events sent through this channel.

        _**Note**_: Basic notification template is used across all platforms.
                    
                    ```{
                      "name":string,
                      "data":{ 
                        string:string,
                        ...
                      },
                      "notification": {
                        object (Notification)
                      },
                    "token": string
                    }```
                    
          |Fields   |           |  
          |----------|:-------------:|
          |name|The identifier of the message to send|
          |data|Arbitrary key/value payload (filled from header attribut-set of channel and event)|
          |notification|Basic notification template(will expose the body of SSDP event) |
          
          
        _**Note 2**_: During the Push-Notif Channel lifecycle, when a device has been unregistered by the OS and not by the API, the device ID will also be removed from the channel and if the Devices list is cleared then the channel status is set to 'Failed'.          
      type: object
      properties:
        devices:
          description: List devices that will receive event messages. List should not contain empty/blank device.
          type: array
          minItems: 1
          items:
            type: string
            pattern: ^(?!\s*$).+
        attributes:
          $ref: '#/components/schemas/PushNotifAttributeSet' 
      required:
        - devices       
    Websocket:
      title: Websocket
      description: |
        Defines the websocket channel. This kind of channel distributes event messages in SI to SI way.  

        * An attribute set (_attributes_) entry allows you to insert any convenient data (as _message.data_ ) into all events sent through this channel. 
        * It is strongly recommended to always use WebSocket over TLS (_secure WebSocket_) for production environment.

        * For authentication purpose, login/pwd as part of url query string can be used as equivalent to  _basic authrntication_.
        * Both of ```ws``` and ```wss```  schemes are supported.
      type: object
      properties:
        target:
          $ref: '#/components/schemas/Url'
        attributes:
          $ref: '#/components/schemas/WSAttributeSet'
      required:
        - target
    Webhook:
      title: Webhook
      description: Defines the webhook for http notification.
      type: object
      properties:
        target:
          $ref: '#/components/schemas/Url'
        name:
          type: string
          description: Webhook name.
        attributes:
          $ref: '#/components/schemas/AttributeSet'
      required:
        - target
        - name
      example:
        target: https://my.post.channel
        name: My_Webhook
        attributes:
          - type: Header
            key: X-Vehicle_Id
            value: $Vin

    ChannelSubscribe:
      description: Channel subscription parameters.
      type: object
      properties:
        type:
          allOf:
            - $ref: '#/components/schemas/SubscribeType'
            - description: The supported types of subscription by this channel. If the field is not set then the channel will be eligible to accept all features.
        label:
          type: string
        channel:
          description: Union channel type can be only one of the following (webhook, websocket or pushnotif)
          type: object
          properties:
            pushnotif:
              $ref: '#/components/schemas/PushNotif'
            webhook:
              $ref: '#/components/schemas/Webhook'
            websocket:
              $ref: '#/components/schemas/Websocket'
      required:
        - channel
    RunStatus:
      type: string
      enum:
        - Running
        - Paused
        - Failed
    RunStatusSetter:
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - Running
            - Paused
    MonitorRunStatus:
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - Running
            - Paused
    MonitorChannelSubscribe:
      description: |-
        Monitor channel subscription extension. 
        * Note: At least one of the parameters must be provided.
      type: object
      properties:
        refreshEvent:
          description: Define the period (in sec.) between two refresh events. The refresh events are sent when the condition of the monitor is satisfied(Trigger -> toggled true) after a period >= refresh time because the monitor triggering is conditioned by the vehicle activity and so its data availability . A kind of periodic reminder.
          type: number
          format: int32
          minimum: 60
        channelAttributes:
          allOf:
            - description: |
                Additional attributes that will be add to or replace the specific channel (pushnotif, webhook or websocket) ones when sending the monitor event.

                * Note: Union attributes set. Only one of the following: pushnotif, webhook orwebsocket should be set and it should be consistent with the channel type to wich this monitor is associated
            - $ref: '#/components/schemas/ChannelAttributes'
    Monitor:
      allOf:
        - $ref: '#/components/schemas/UpdatedAtField'
        - title: Monitor
          description: Monitor state object
          type: object
          properties:
            _links:
              type: object
              properties:
                self:
                  $ref: '#/components/schemas/Link'
            monitorId:
              $ref: '#/components/schemas/MonitorId'
            monitor:
              $ref: '#/components/schemas/MonitorParameter'
            status:
              $ref: '#/components/schemas/MonitorRunStatus'
          required:
            - status
            - monitorId
            - monitor
            - updatedAt
    MonitorParameter:
      title: MonitorParameter
      description: |
        MonitorParameter defines the vehicle monitor that will be used to detect the vehicle state transition. It defines state transition triggers, set of additional monitor attributes, extended event parameter (i.e. enrichment of monitor event from available vehicle data before sending) and an overload of the channel notification to which it is linked.

          However, it needs a set of necessary permissions for resources used for triggers and extended parameters:
              
          * This API has therefore defined a set of  OAuth 2.0 Scopes to cover all possible monitor definitions. But the user should grant only the necessary SCOPEs for the requested monitor.
            
          * Those Scopes are from the definitions of (if set) :
              * <u>Zone</u> triggers. 
              * <u>Data</u> triggers.
              * <u>Extenstions</u>.
              * <u>On event</u> actions.
      properties:
        label:
          type: string
          description: Monitor label (usually its name).
        subscribeParam:
          $ref: '#/components/schemas/MonitorChannelSubscribe'
        onEvent:
          $ref: '#/components/schemas/OnMonitorEvent'
        attributes:
          $ref: '#/components/schemas/MonitorAttributeSet'
        extendedEventParam:
              type: array
              items:
                 enum: [vehicle.doorsState, vehicle.latestTelemetry, vehicle.maintenance,vehicle.position, vehicle.telemetry, vehicle.alerts.active, vehicle.collision, vehicle.trip,vehicle.stolen,vehicle.alarm]
              description: | 
                            Allow to set extra vehicle data (defined in data model) to add to the monitor event
                            when publishing. The possible values are :
                            
                            
                            |value|description|Related model |
                            |----------|:-------------|------:|
                            |vehicle.doorsState|Latest known door state (timestamped) before the eventDate|DoorState|
                            |vehicle.latestTelemetry|Latest known vehicle status (timestamped) before the eventDate|AggregatedTelemetry|
                            |vehicle.maintenance|Latest known maintenance(timestamped) before the eventDate|Maintenance|
                            |vehicle.position|Last vehicle position (timestamped) before the eventDate|Position|
                            |vehicle.telemetry${.TelemetryEnum} |Latest known telemetry (timestamped) before the eventDate filtered with type|Telemetry
                            |vehicle.alerts.active|List of active alerts at the eventDate|Alert|
                            |vehicle.collision|Contextual data about collision |Collision|
                            |vehicle.alarm|Latest Vehicle alarm status and trigger|Alarm|
                            |vehicle.trip|Trip related to the event that triggers the notification|Trip|
                            |vehicle.stolen|Vehicle Stolen report at the eventDate (only returns when vehicle is reported stolen) |Stolen|

                            
                            * For telemetry extension:  
                              * The suffix ```${.TelemetryEnum}``` can be selected to refine with telemetry type (from the TelemetryEnum list). This value (with suffix) can be selected **_several times_** to included suitable telemetry messages with the extention.
                              * Using ```vehicle.telemetry``` without suffix means to include all available telemetries. 
                            * The set of data will then correspond to the union of extensions used in the request.
        triggerParam:
              description: Monitor trigger-param that allows to compound triggers by applying a boolean expression to evaluate them.
              properties:
                          triggers:
                            description: |
                              Compound monitor triggers (will be evaluated using boolean expresion :```booExp```). At least, ```one``` trigger should be provided along with the name and at  most, ```five``` items are accepted.
                            type: array
                            minItems: 1
                            maxItems: 5
                            items:
                                $ref: '#/components/schemas/MonitorTrigger'      
                          boolExp:
                              type: string
                              description: |
                                A boolean expression that allow defining a logical relationship between triggers. Used Operands with this expression should be the names of the defined triggers. 
                                 
                                  _Note:_ 
                                  
                                  Always ```true``` or Always```false``` expression are prohibited and will result with an http 400 error response.
                                  
                                  Setting trigger allows only one operand in the expression.We can have a boolean expression such as:  (s1)
                                  
                                Grammar:
                                ```
                                exp ::= exp '&' exp
                                       | exp '|' exp
                                       | (exp)
                                       | !exp
                                ```
                                
                                * **example**: having two-zone trigger (two towns) named z1 an z2, one time-trigger (8h00 to 20h00) named t1 and finally three data triggerd named as follow: f(fuel), a(autonomy) , o(odometer).
                                  
                                  we can have a boolean expression such as: : ``` ((z1 & t1) | (z2 & !t1) | (f & z1) | (a & (z1|t))  | (o & (z1 | z2))) ```
                              example :
                                ((z1 & t1) | (z2 & !t1) | (f & z1) | (a & (z1|t))  | (o & (z1 | z2)))
              required: [triggers,boolExp]
      required:
        - triggerParam
        - label
    MonitorRef:
      allOf:
        - $ref: '#/components/schemas/CreatedAtField'
        - type: object
          description: Monitor creation reference returned when posting a new monitor.
          required:
            - monitorId
            - status
            - createdAt
          properties:
            _links:
              type: object
              properties:
                monitor:
                  $ref: '#/components/schemas/Link'
            monitorId:
              $ref: '#/components/schemas/MonitorId'
            status:
              $ref: '#/components/schemas/RunStatus'
    MonitorUpdateRef:
      allOf:
        - $ref: '#/components/schemas/UpdatedAtField'
        - type: object
          description: Monitor creation reference returned when posting a new monitor.
          required:
            - monitorId
            - status
            - updatedAt
          properties:
            updatedAt:
              type: string
              format: date-time
            _links:
              type: object
              properties:
                monitor:
                  $ref: '#/components/schemas/Link'
            monitorId:
              $ref: '#/components/schemas/MonitorId'
            status:
              $ref: '#/components/schemas/RunStatus'
    MonitorHandleRef:
      allOf:
        - $ref: '#/components/schemas/UpdatedAtField'
        - type: object
          description: Monitor handle association set result.
          required:
            - monitorId
            - updatedAt
          properties:
            _links:
              type: object
              properties:
                monitor:
                  $ref: '#/components/schemas/Link'
            monitorId:
              $ref: '#/components/schemas/MonitorId'
            handled:
              properties:
                vehicleIds:
                  $ref: '#/components/schemas/MonitorHandleVehicleIds'
                groups:
                   $ref: '#/components/schemas/MonitorHandleGroupIds'
              
    MonitorStatusSetter:
      allOf:
        - $ref: '#/components/schemas/RunStatusSetter'
        - title: MonitorStatusSetter
          description: Monitor Status setter used to change the state from running to paused and vice versa.
    HandleSetter:
      title: HandleSetter
      description:  |
              Define the vehicles and/or groups managed by the monitor.
              * Groups can be added only in case of partner vehicle fleet scenarios.
              * Any vehicle ID combined with the root group will be ignored, as it is already included.
      required:
        - action
      properties:
        action:
          description: Action to perform on the vehicle ids.
          type: string
          enum:
            - Add
            - Remove
        vehicleIds:
                  $ref: '#/components/schemas/MonitorHandleVehicleIds'
        groups:
             $ref: '#/components/schemas/MonitorHandleGroupIds'
    MonitorTrigger:
      title: MonitorTrigger  
      description: >
        Monitor trigger.```Only one```of *Zone, Time or Data* is supported at a time. Otherwise it would cause a bad request response.  
      properties:
        name: 
          description: 'The trigger name must be uniq and respect the following pattern'
          pattern: "\"[a-zA-Z]+[._]?[0-9]*\""
          type: string
        zone: 
             $ref: '#/components/schemas/ZoneTrigger'
        time: 
             $ref: '#/components/schemas/TimeTrigger'
        data: 
             $ref: '#/components/schemas/DataTrigger'
        setting: 
             $ref: '#/components/schemas/SettingTrigger'
      required:
        - name
    SettingTrigger:
      title: SettingTrigger
      description:   | 
                         A monitor for triggering the vehicle settings change event.
                        
                          * Note: It is exculsive with other triggers
      properties:
            type:
              description:  | 
                         Setting monitoring type.
                        
                          * DigitalKey: it will track vehicle digital key process like delete key, owner pairing etc
                          * LastMileNavigation: it will detect LMN event.
              type: string
              enum:
                - DigitalKey
                - LastMileNavigation
      required: [type]
      example: 
        type: DigitalKey
    ZoneTrigger:
      title: ZoneTrigger
      description: Zone Alert parameter object
      properties:
            transition:
              description: >-
                Zone monitoring type ('In' for monitoring entering zone and 'Out' for monitoring leaving zone),
              type: string
              enum:
                - In
                - Out
            place:
                    description: >-
                      Circle zone is compound of a center point and a radius.
                    required:
                      - center
                      - radius
                    properties:
                      radius:
                        description: Circle radius (expressed in km)
                        type: integer
                      center:
                        type: object
                        properties:
                          longitude:
                            type: number
                            format: double
                          latitude:
                            type: number
                            format: double
                        required: [longitude, latitude]
      required: [place, transition]
      example: 
        transition: Out
        place:
          radius: 20
          center:
            longitude: 2.333333
            latitude:  48.866667
    
    TimeTrigger:
      title: TimeTrigger
      description: Temporal monitor for triggering vehicle moving event within a time interval.
      required: [times]
      properties:
            times:
              type: array
              items:
                $ref: '#/components/schemas/TimeTriggerEntry'
            timeZone: 
              type: string
              pattern: \w?/\w?
              default: Europe/Paris
              description: The standard time [zone code](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) of the region where to apply this time trigger monitor. 
                  This allows to adapt this trigger to the time change according to local (region/country) criteria/rules.
              example: Europe/Paris
    
            
    DataTrigger:
      title: DataTrigger
      description: A monitor for triggering the vehicle data change event.
      properties:
        data:
          description: | 
            The left operand of the trigger function. The following Table details for each operand data its type, the supported operator and the possibly retruned value:
            
            |**Data**|**Type**|**Op**|
            |---|---| ---:|
            | vehicle.alert | Enum(AlertMsgEnum) | includedIn/equalsTo/onChange
            | vehicle.odometer | Number(signed) | equalsTo/greaterThan/lowerThan
            | vehicle.powertrain.status |Enum(Engine.gmpStatus) | equalsTo /includedIn/onChange
            | vehicle.engines.thermic.oil.temp | Integer(unsigned) | equalsTo/greaterThan/ lowerThan
            | vehicle.energy.electric.level | Number(signed) | equalsTo/greaterThan/ lowerThan
            | vehicle.energy.electric.autonomy | Integer(signed) | equalsTo/greaterThan/ lowerThan
            | vehicle.energy.fuel.level | Number(signed) | equalsTo/greaterThan/ lowerThan
            | vehicle.energy.fuel.autonomy | Number(signed) | equalsTo/greaterThan/ lowerThan
            | vehicle.autonomy (global) | Number(signed) | equalsTo/greaterThan/ lowerThan
            | vehicle.energy.charging.status | Enum(ChargingStatusEnum) | equalsTo/includedIn/onChange
            | vehicle.energy.charging.settings.chargePreferenceRate | Enum(ChargePreferenceRateEnum) | onChange
            | vehicle.energy.charging.plugged | Boolean | onChange/equalsTo
            | vehicle.energy.charging.type | Enum(EnergyCharging.chargingMode) | equalsTo
            | vehicle.doorsState.lockedState | N/A | onChange
            | vehicle.doorsState.opening | N/A | onChange
            | vehicle.kinetic.moving| Boolean | equalsTo
            | vehicle.kinetic.speed | Number(unsigned) | equalsTo/greaterThan/ lowerThan
            | vehicle.trip.start| string | onChange
            | vehicle.trip.stop| string | onChange
            | vehicle.trip.duration| Number | equalsTo/greaterThan/lowerThan
            | vehicle.trip.distance| Number(signed) | equalsTo/greaterThan/lowerThan
            | vehicle.trip.state| Enum(TripStateEnumArray) |equalsTo/includedIn
            | vehicle.maintenance.daysBeforeMaintenance, | Number(unsigned) | equalsTo/ greaterThan/ lowerThan
            | vehicle.maintenance.mileageBeforeMaintenance| Number(unsigned) | equalsTo/ greaterThan/ lowerThan
            | vehicle.safety.beltWarning | Enum(BeltStatus.belt) | equalsTo/onChange
            | environment.air.temp | Number(unsigned) | equalsTo/greaterThan/lowerThan
            | privacy.state | Enum(Privacy.state) | equalsTo /includedIn /onChange
            | vehicle.drivingBehavior.mode | Enum(DrivingBehavior.mode) | equalsTo /includedIn/onChange
            | vehicle.collision.side | Enum(Collision.details.side) | equalsTo / includedIn 
            | vehicle.collision.severity | Enum(Collision.details.severity) | equalsTo / includedIn 
            | vehicle.safety.autoECallTriggering | Enum(Safety.autoECallTriggering) | equalsTo /includedIn/onChange
            | vehicle.preconditioning.airConditioning | N/A| onChange
            | vehicle.alarm.trigger.type | Enum(AlarmTrigger.type)| equalsTo/includedIn/onChange
            | vehicle.alarm.status.activation | Enum(AlarmStatus.activation)| /equalsTo/onChange 
            | stolen.state |Boolean| equalsTo
                        
            The right operand  (value) argument depends on the type of operation (OP) as following:
              
              * onChange: no value because we are monitoring the change between two states (before and after).
              * includedIn: value must be an array of size> = 1
              * equalsTo, greaterThan and lowerThan: the value must be an array of size = 1.
          type: string
          enum:
            - vehicle.alert
            - vehicle.odometer
            - vehicle.powertrain.status
            - vehicle.engines.thermic.oil.temp
            - vehicle.energy.electric.level
            - vehicle.energy.electric.autonomy
            - vehicle.energy.fuel.level
            - vehicle.energy.fuel.autonomy
            - vehicle.autonomy
            - vehicle.energy.charging.status
            - vehicle.energy.charging.plugged
            - vehicle.energy.charging.type 
            - vehicle.doorsState.lockedState
            - vehicle.doorsState.opening
            - vehicle.kinetic.moving
            - vehicle.kinetic.speed
            - vehicle.trip
            - vehicle.trip.start
            - vehicle.trip.stop
            - vehicle.trip.duration
            - vehicle.trip.distance
            - vehicle.trip.state
            - vehicle.maintenance.daysBeforeMaintenance
            - vehicle.maintenance.mileageBeforeMaintenance
            - vehicle.safety.beltWarning
            - environment.air.temp
            - privacy.state
            - vehicle.drivingBehavior.mode
            - vehicle.collision.side
            - vehicle.collision.severity
            - vehicle.safety.autoECallTriggering
            - vehicle.preconditioning.airConditioning
            - vehicle.alarm.trigger.type
            - vehicle.alarm.status.activation
            - stolen.state
          example : vehicle.energy.fuel.level
        op:
            description: The operator of the trigger function.                          
            type: string
            enum: [equalsTo, greaterThan, lowerThan, includedIn, onChange]
            example : greaterThan
        value:
            description: |
              The right operand of the trigger function. It can be a uniq ```value``` or a list of value ```values```. The choice of one or the other depends on ```OP```  which in the case of ```includedIn``` must be a list.
                * _Disclaimer_: If the op field is not set to ```includeIn``` then only the first item will be used.
            type: array
            items:
              type: string
        previous: 
          description: |
            The previous trigger state represents the initial state of the monitored data that allow its trigger to fire.  Only data that is in the following list is allowed. A 'previous data state' defined here must match with the defined one in the trigger data.
                        
            |**Previous Data**|**Type**|**Eligible Op**|**Previous Value**|**oAuth2 scope**|
            |---|---| ---:| ---:|---:|
            |vehicle.alert|Enum(AlertMsgEnum)|includedIn/equalsTo| Value (AlertMsgEnum)|alert|
            |vehicle.engines.running|Boolean|equalsTo| Value (true/false)|telemetry:vehicle:engines|
            |vehicle.energy.charging.status|Enum(ChargingStatusEnum)|equalsTo/includedIn| Value(ChargingStatusEnum)|telemetry:vehicle:energies|
            |vehicle.energy.charging.plugged|Boolean|equalsTo| Value (true/false)|telemetry:vehicle:energies|
            |vehicle.kinetic.moving|Boolean|equalsTo| Value (true/false)|telemetry:vehicle:kinetic|
            |vehicle.safety.beltWarning|Enum(BeltStatus.belt) | equalsTo| Value(Enum(BeltStatus.belt))|telemetry:vehicle:safety|
            |vehicle.safety.autoECallTriggering| Enum(Safety.autoECallTriggering) | equalsTo /includedIn| Value(enum)  |telemetry:vehicle:safety| 
            |privacy.state| Enum(Privacy.state) | equalsTo /includedIn  | Value(Enum(Privacy.state))|telemetry:privacy|
            |vehicle.drivingBehavior.mode|Enum(DrivingBehavior.mode) | equalsTo /includedIn| Value(Enum(DrivingBehavior.mode)|telemetry:vehicle:drivingBehavior|                           

            _Note:_  
              * This state will only be interpreted on the first triggering of the trigger. For the triggering due to "refresh" mode, this previous state will not be taken into account.
              * If the trigger predicate backs to 'false' then the previous state becomes again an initial necessary condition  to trigger the monitored data.
              
            The  value  depends on the type of Eligible OP  as following (if a :
              
              * includedIn: value must be an array of size> = 1
              * equalsTo: the value must be an array of size = 1.
          type: object
          properties: 
            value:
                description: The trigger previous state data literal value.
                type: array
                items:
                  type: string
            op:
              description: The operator of the previous trigger function.                          
              type: string
              enum: [equalsTo, includedIn]
          required: [value, op]
      required: [data,op]
      example:
        data: vehicle.energy.electric.level
        op: greaterThan
        value: ["75"]
    Monitors:
      allOf:
        - $ref: '#/components/schemas/CollectionResult'
        - properties:
            _embedded:
              type: object
              properties:
                monitors:
                  type: array
                  items:
                    $ref: '#/components/schemas/Monitor'
          required:
            - _embedded
    RemoteType:
      type: string
      enum:
        - Locking
        - Horn
        - Lights
        - Preconditioning
        - OnboardPersonalData
        - Charging
        - Stolen
        - Wakeup
        - Navigation
        - VehicleFinder
        - Immobilization
        - VehicleConfig.KeyPairing
        - Tan.suppress
        - Tan.confirm
    ChannelType:
      type: string
      enum:
        - Remote
        - Monitor
    TripType:
       type: array
       items:
         type: string
         enum:
          - Normal
    SubscribeType:
      type: array
      items:
        type: string
        enum:
          - Monitor
          - Remote
    RemoteTypes:
      type: array
      items:
        $ref: '#/components/schemas/RemoteType'
    ChannelTypes:
      type: array
      items:
        $ref: '#/components/schemas/ChannelType'
    RemoteLights:
      type: object
      description: Remote to swith on / off lights.
      properties:
        state:
          type: string
          description: Activate this remote lights. The eligibility api will provide possible state values for the vehicle
          enum:
            - Activated
            - Unactivated
      required:
        - state
    RemoteWakeUp:
      type: object
      description: Remote to wake up a vehicle (so it can update its data).
      properties:
        action:
          type: string
          default: Wakeup
          example: Wakeup
          items:
            enum:
              - Wakeup
      required:
        - action
    RemoteVF:
      type: object
      description: Remote to get vehicle’s present location.
      properties:
        action:
          type: string
          example: GetPresentLocation
          items:
            enum:
              - GetPresentLocation
      required:
        - action
    RemotePreconditioning:
      type: object
      description: Remote preconditioning the vehicle.
      properties:
        airConditioning:
          description: Only one of the following must be provided.
          type: object
          properties:
            immediate:
              type: boolean
              default: false
              description: Determines whether air conditioning will start immediately or not independently if scheduled ```programs``` are set or not. Set to "false" by default..
            programs:
              description: | 
                         List of air conditioning programs to schedule on vehicle. ```Be aware about the action type (see below)```.
                        
                          * _Note_:The requirement to have fields provided or not depends on the value of the fields "actionsType".indeed, fields are provided when:
                          
                              |<b>actionsType</b>|<b> Mandatories</b> |
                              | :------------------: | :-------------------: |
                              |- Set |<p>slot, start,occurence,enabled</p> |
                               |- Delete |<p>slot</p> |
                           
                          ## *The field  ```actionsType```is not mandatory and will be set to ```'Set'``` value if not provided.*
              type: array
              items:
                allOf:
                  - description: Air conditioning program to schedule on vehicle.
                  - $ref: '#/components/schemas/Program'
                  - $ref: '#/components/schemas/PrecondProgramTemp'
                  - $ref: '#/components/schemas/PrecondProgramSlot'
                  - $ref: '#/components/schemas/ProgramActionsType'
                  - required:
                      
                      - slot
                     
                      
            settings:
              type: object
              $ref: '#/components/schemas/PrecondSettings'
      required:
        - airConditioning        
    RemoteCharging:
      type: object
      description: Remote charging the vehicle.
      properties:
        charge:
          description: Only one of the following must be provided. Please refer to capability API to determine what action is supported by vehicle
          type: object
          properties:
            immediate:
              type: boolean
              deprecated: true
              default: false
              description:  Determines if the charging will start immediately(```true```) or not.
            programs:
              description: | 
                         List of charging programs to schedule on vehicle.Number of charging Programs supported can be obtained from Capability API. Charging program to schedule on vehicle. ```Please refer to capability API for fields that needs to be provided if actionType is Set.```
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/Program'
                  - $ref: '#/components/schemas/ChargingProgram'
                  - $ref: '#/components/schemas/ChargingProgramSlot'
                  - $ref: '#/components/schemas/ProgramActionsType'
            settings:
              type: object
              $ref: '#/components/schemas/ChargeSettings'
            deferred:
              type: object
              $ref: '#/components/schemas/DeferredCharge'
      required:
        - charge
    TimeLimitedCharge:
      allOf:
            - $ref: '#/components/schemas/BasicProgram'
            - properties:
                stop:
                    type: string
                    description: | 
                              The charge end time formatted using the duration format based on [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Time_intervals) with the schema: P[n]Y[n]M[n]DT[n]H[n]M[n]S and whose value is between 0H and 23h59
          
                              _example_: PT4H30M : means 4H30min
                stopChargeStatus:
                    type: string
                    description: | 
                                  Status of delayed stop charge.
                                  one of following enums status will be set:
                                    | Enum | Description |
                                    |----------|:-------------:|
                                    | Deactivated | Function is deactivated |
                                    | Activated | The function is activated, and the conditions to execute it are met. |
                                    | Successful | The most recent stop charge was successful. |
                                    | StopChargeFailed | Failed to stop charging. |
                                    | ChargeEndTimeScheduleFailed| The programming of the end of charge failed; the charging should not stop at the requested time. |
                                                              


                    enum:
                      - Deactivated
                      - Activated
                      - Successful
                      - StopChargeFailed
                      - ChargeEndTimeScheduleFailed


    ChargingProgram:
      
              description: Charging program to schedule on vehicle
              required:
              - minChargingLevel
              - maxChargingLevel
              properties:
                chargeToFull:
                  description: Attribute defining whether the charging needs to continue until the battery is fully charged.
                  type: boolean
                  default: true
                minSOC:
                  type: integer
                  description: Minimum charge level
                  minimum: 0
                  maximum: 50
                  deprecated: true
                targetSOC:
                  type: integer
                  description: Max charging level
                  minimum: 0
                  maximum: 100
                  deprecated: true
                minChargingLevel:
                  type: integer
                  description: Minimum charge level
                  minimum: 0
                  maximum: 50
                maxChargingLevel:
                  type: integer
                  description: Max charging level
                  minimum: 0
                  maximum: 100
                chargeType:
                  description: Charge program type value, only for cooperative shcedules
                  type: string
                  enum:
                    - Regular
                    - Cooperative
                  default: Regular
    
    ProgramActionsType:
      type: object
      properties:
        actionsType:
          description: | 
              Action type to apply for this program:
              
              * Set: Create a new programe o update it if existing. Need to provide all field correctly set.
              * Delete: Delete programs. Only slot number is required for delete
  #                            
          type: string
          enum: [Set,Delete]
          default: Set
    PrecondProgramSlot:
      type: object
      properties:
          slot:
            type: integer
            description: This program number. Can only be used ONE time in the same preconditioning list.
            minimum: 1
            maximum: 4
    ChargingProgramSlot:
      type: object
      properties:
        slot:
          type: integer
          description: This program number. Can only be used ONE time in the same charging list.
          minimum: 1
          maximum: 2
    PrecondSettings:
      type: object
      description: Target temperature  to be reached by HVAC in celsius
      properties:
        temp:
          description: Target temperature  to be reached by HVAC in celsius
          type: number
        mode:
          description: Precond mode
          type: string
          enum: [Manual, Auto]
          default: Auto
        state:
          description: Activate this precond mode.
          type: string
          enum: [Activated, Unactivated]
          default: Activated
      required:
        - temp
    DeferredCharge:
      type: object  
      description: Action to perform charging.
      properties:
        start:
          type: object
          description: Start Charging. ```startTime``` and ```immediate``` can not be used together and are mutually exclusive. Mixing them will result in an error (HTTP 400).
          # required:
          #   - startTime 
          #   - immediate
          properties:
            startTime:
              type: string
              description: | 
                    The start time formatted using the duration format based on [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Time_intervals) with the schema: P[n]Y[n]M[n]DT[n]H[n]M[n]S and whose value is between 0H and 23h59
      
                        _example_: PT14H30M : means 14H30min.                      
            immediate:
              type: boolean
              default: false
              description:  Determines if the charging will start immediately(```true```) or not.
        end:
          type: object
          required:
            - endTime
            - chargeToFull
          properties:
            endTime:
              type: string
              description: | 
                    The end time formatted using the duration format based on [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Time_intervals) with the schema: P[n]Y[n]M[n]DT[n]H[n]M[n]S and whose value is between 00H and 23h59.This field need to be provided only if ChargeToFull is not true
      
                        _example_: PT14H30M : means 14H30min
            chargeToFull:
              description: Attribute defining whether the charging needs to continue until the battery is fully charged.
              type: boolean
              default: true
    ChargeSettings:
      type: object
      description: Only one of the parameters must be provided.
      properties:
        chargePreferenceRate:
          description: |
            Max amperage provided by the charge plug:
              
            |<b>Charge Preference Rate</b>|<b>Description</b>|
            |---|---|
            |Low|20% of max amperage provided by the charge plug|
            |LowPlus|40% of max amperage provided by the charge plug|
            |Med|60% of max amperage provided by the charge plug|
            |MedPlus|80% of max amperage provided by the charge plug|
            |High|100% of max amperage provided by the charge plug|
          type: string
          enum:
            - Low
            - LowPlus
            - Med
            - MedPlus
            - High
        chargeLimit:
          description: |
            maximum battery state :
              
            |<b>Charge Limit</b>|<b>Description</b>|
            |---|---|
            |MedPlus|charge up to either a max of 80%|
            |High|charge up to either a max of 100%| 
          type: string
          enum:
            - MedPlus
            - High
    RemoteLocking:
      type: object
      description: Remote Lock & Unlock allows to lock and unlock their vehicle.
      properties:
        state:
          type: string
          description: openings lock/unlock state.
          enum:
            - Unlocked
            - Locked
      required:
        - state
    RemoteHorn:
      type: object
      description: Remote vehicle horn activation.The eligibility api will provide possible state values for the vehicle
      properties:
        state:
          type: string
          description: Activate this remote horn.
          enum:
            - Activated
            - Unactivated
      required:
        - state
    RemoteSetImmobilization:
      type: object
      description: Requesting the vehicle for immobilization.
      properties:
        activate:
          type: boolean
          description: Set, if ```true```, the vehicle as immobilized or not (otherwise).
      required:
        - activate
    RemoteOnboardPersonalData:
      type: object
      description: Enable user to delete personal data for the vehicle.
      properties:
        action:
          type: string
          example: Delete
          items:
            enum:
              - Delete
      required:
        - action
    RemoteStolen:
                  type: object
                  description: Remote operation to update stolen state and immobilization.<b> Only one attribute can be used at a time.</b>
                  properties:
                    state:
                      description : Declare whether the vehicle is stolen or not (set at ```True``` to report as stolen).
                      type: boolean
                      example : true
                    
                    crankInhibit:
                      type: object
                      description: Requesting the stolen vehicle for immobilization by inhibiting the crank.
                      properties:
                        activate:
                            type: boolean
                            description :  Set, if ```true```, the vehicle as immobilized or not (otherwise). 
                      required: [activate] 
    RemoteTan:
      type: object
      description: Remote operation to update Theft Alarm Notification suppression state and confirmation state.<b> Only one attribute can be used at a time.</b>
      
      properties:
        suppress:
          type: object
          description: To suppress Theft Alarm Notification, when customer decides to temporary disabling the receiption of theft alarm notifications.<b>
          properties:
            state:
              description: If ```true``` means Theft Alarm Notification is suppressed for giving time
              type: boolean
              example: true
            duration:
              type: integer
              minimum: 0
              maximum: 5
              description: |
                Required only if "state" is set to true. If provided when "state is false, it will be ignored.
                
                | Value | Duration |
                |----------|:-------------:|
                | 0 | TwoHours |
                | 1 | FourHrs |
                | 2 | TwelveHrs |
                | 3 | TwentyfourHrs |
                | 4 | ThreeDays |
                | 5 | SevenDays |
              
          required:
            - state
        confirm:
          type: object
          description: To confirm or deny a theft, after having received a Theft Alarm Notification.<b>
          properties:
            state:
              description: If ```true``` means theft is confirmed by customer, if ```false``` theft is denied.
              type: boolean
              example: true
          required:
            - state       
    RemoteNavigation:
      type: object
      description: A remote to share GPS positions with the vehicle so it can navigate through those positions by driving from start (1st) to end (last) position.
      properties:
        positions:
          type: array
          items:
            $ref: '#/components/schemas/NavPosition'
      required:
        - positions
    Remote:
      type: object
      description: Remote vehicle action object that defines the label, additional attributes and the action of the sent remote.
      properties:
        label:
          type: string
        attributes:
          $ref: '#/components/schemas/RemoteAttributeSet'
        channelAttributes:
          allOf:
            - description: |
                Additional attributes that will be add to or replace the specific channel (pushnotif, webhook or websocket) ones when sending the remote event.

                * Note: Union attributes set. Only one of the following: pushnotif, webhook orwebsocket should be set and it should be consistent with the channel type to wich this remote is associated
            - $ref: '#/components/schemas/ChannelAttributes'
        extendedEventParam:
          $ref: '#/components/schemas/ExtendedEventParam'
        action:
          description: Union Remote vehicle actions type. The provided can be ```only one``` of the following actions
          properties:
            locking:
              $ref: '#/components/schemas/RemoteLocking'
            horn:
              $ref: '#/components/schemas/RemoteHorn'
            lights:
              $ref: '#/components/schemas/RemoteLights'
            preconditioning:
              $ref: '#/components/schemas/RemotePreconditioning'
            onboardPersonalData:
              $ref: '#/components/schemas/RemoteOnboardPersonalData'
            charging:
              $ref: '#/components/schemas/RemoteCharging'
            wakeup:
              $ref: '#/components/schemas/RemoteWakeUp'
            immobilization:
              $ref: '#/components/schemas/RemoteSetImmobilization'
            navigation:
              $ref: '#/components/schemas/RemoteNavigation'
            vehicleFinder:
              $ref: '#/components/schemas/RemoteVF'  
            stolen:
              $ref: '#/components/schemas/RemoteStolen'  
            tan:
              $ref: '#/components/schemas/RemoteTan'
      required : [action]
    ChannelRef:
      allOf:
        - $ref: '#/components/schemas/CreatedAtField'
        - $ref: '#/components/schemas/UpdatedAtField'
        - type: object
          description: channel reference returned when posting/getting a channel.
          properties:
            _links:
              type: object
              properties:
                channel:
                  $ref: '#/components/schemas/Link'
            channelId:
              $ref: '#/components/schemas/ChannelId'
            status:
              $ref: '#/components/schemas/RunStatus'
          required:
            - _links
            - channelId
            - status
            - createdAt
            - updatedAt
    ChannelUpdateRef:
      allOf:
        - $ref: '#/components/schemas/CreatedAtField'
        - $ref: '#/components/schemas/UpdatedAtField'
        - type: object
          description: channel reference returned when posting/getting a channel.
          properties:
            _links:
              type: object
              properties:
                channel:
                  $ref: '#/components/schemas/Link'
            channelId:
              $ref: '#/components/schemas/ChannelId'
            status:
              $ref: '#/components/schemas/RunStatus'
          required:
            - _links
            - channelId
            - status
            - updatedAt
            - createdAt
    RemoteActionStatus:
      type: string
      enum: [Accepted, Failed, Success, AlreadyDone, WakingUpVehicle, CheckingVehicle, SentToVehicle, VehicleBatteryChargeTooLow,TooManyWakeUpsOverMonth, VehicleBatteryLevelWarning]
      example : Accepted
    RemoteRef:
      type: object
      properties:
        remoteActionId:
          $ref: '#/components/schemas/RemoteActionId'
        status:
          $ref: '#/components/schemas/RemoteActionStatus'
        type:
          $ref: '#/components/schemas/RemoteType'
    RemotePostResponse:
      type: object
      description: Remote action reference returned when posting a remote action.
      properties:
        _links:
          type: object
          properties:
            channel:
              $ref: '#/components/schemas/Link'
            remote:
              $ref: '#/components/schemas/Link'
        remoteActionId:
          $ref: '#/components/schemas/RemoteActionId'
        type:
          $ref: '#/components/schemas/RemoteType'
      required:
        - _links
        - remoteActionId
        - type
    RemotePostStatusResponse:
      type: object
      required:
        - status
      properties:
        status:
          type: string
    TANConfirmRequest:
      type: object
      properties:
        isAccept:
          type: boolean
          description: If the vehicle is stolen or not
    RemoteTheftStatusResponse:
      type: object
      required:
        - suppressionStatus
        - suppressionDuration
        - suppressionTimestamp
      properties:
        suppressionStatus:
          type: string
          description: Value indicating if the TAN is suppressed or not
          enum:
            - Suppressed
            - notSuppressed
        suppressionDuration:
          type: string
          description: 'the suppress duration for theft alarm notification '
          enum:
            - TWOHOURS
            - FOURHRS
            - TWELVEHRS
            - TWENTYFOURHRS
            - THREEDAYS
            - SEVENDAYS
        suppressionTimestamp:
          type: integer
          description: EPOCH representation of UTC time which gives the time when the theft alarm suppression status for the vehicle is updated
          example: 12783247278
    UpdateChargePrefResponse:
      type: object
      required:
        - message
        - correlationId
      properties:
        name:
          type: string
          enum:
            - accepted
        message:
          type: string
          description: Positive outcome message, can be 'Successfully accepted request'
        correlationId:
          type: string
          description: Correlation id returned by ignite
    RemoteLastStatusResponse:
      type: object
      properties:
        correlationId:
          type: string
          description: The correlationId of the last remote operation command
        status:
          type: string
          enum:
            - PENDING
            - SUCCESS
            - FAILED
          description: The status of the last remote operation command
        timestamp:
          type: number
          description: Timestamp indicating last update to the status
      required:
        - status
        - timestamp
    VehicleConfig:
      allOf:
        - description: Vehilcle config
          properties:
            _links:
              type: object
              properties:
                self:
                  $ref: '#/components/schemas/link'
                vehicle:
                  $ref: '#/components/schemas/link'
              required : [self]
            pairing:
              type: object
              properties:
                url: 
                  $ref: '#/components/schemas/Url'
                  description: Pairing url
                  example: http://wallet.apple.com/setup/carkey-pairing?issuer=MOCK#pleaseletmein
              required:
                - url
    RemoteAction:
      allOf:
        - $ref: '#/components/schemas/RemoteRef'
        - description: Remote action with its current state.
          properties:
            _links:
              type: object
              properties:
                channel:
                  $ref: '#/components/schemas/Link'
                self:
                  $ref: '#/components/schemas/Link'
            remoteActionId:
              $ref: '#/components/schemas/RemoteActionId'
            remote:
              $ref: '#/components/schemas/Remote'
            status:
              $ref: '#/components/schemas/RemoteActionStatus'
            failureCause:   
                  $ref: '#/components/schemas/RemoteFailedEventStatus'
          required:
            - _links
            - remoteActionId
            - remote
            - status
            - type
    RemoteActions:
      allOf:
        - $ref: '#/components/schemas/CollectionResult'
        - properties:
            _embedded:
              type: object
              properties:
                remoteActions:
                  type: array
                  items:
                    $ref: '#/components/schemas/RemoteAction'
    RemoteActionId:
      type: string
      description: The uniq remote action  ID returned when the remote action was posted and accepted.
    GroupId:
      type: string
      enum: [root]
      description:  |
                Unique group ID. Only the "*root*" ID is currently allowed for fleet management. The root group ID covers all vehicles belonging to the account, i.e., the partner vehicle fleet.
                * Any group request coming from a customer account will not be supported.  
    GroupObj:
      description: A vehicles group.
      type: object
      properties:
        name:
          type: string
          pattern: \b(?!root\w*\b)\w+
          description: The group name should not be prefixed by word "*root*" since its the master group name.
        description:
          type: string
          description: Additional group description.
      required:
        - name
    Group:
      allOf:
        - $ref: '#/components/schemas/GroupObj'
        - properties:
            _links:
              type: object
              properties:
                self:
                  $ref: '#/components/schemas/Link'
                vehicles:
                  $ref: '#/components/schemas/Link'
            id:
              $ref: '#/components/schemas/GroupId'
          required:
            - id
    Groups:
      allOf:
        - $ref: '#/components/schemas/CollectionResult'
        - properties:
            _embedded:
              type: object
              properties:
                groups:
                  type: array
                  items:
                    $ref: '#/components/schemas/Group'
    GroupsAssociationList:
      allOf:
        - $ref: '#/components/schemas/CollectionResult'
        - description: List of groups.
        - properties:
            _embedded:
              type: object
              properties:
                groups:
                  description: List of groups.
                  type: array
                  items:
                    $ref: '#/components/schemas/GroupId' 
    ChannelId:
      type: string
      pattern: ([0-9a-fA-F]|-|_)*
      description: Uniq channel ID returned when the channel was subscribed (created) succefuly.
    Channel:
      description: channel state.
      type: object
      allOf:
        - $ref: '#/components/schemas/CreatedAtField'
        - $ref: '#/components/schemas/UpdatedAtField'
        - properties:
            _links:
              type: object
              properties:
                self:
                  $ref: '#/components/schemas/Link'
            id:
              $ref: '#/components/schemas/ChannelId'
            subscribe:
              $ref: '#/components/schemas/ChannelSubscribe'
            status:
              $ref: '#/components/schemas/RunStatus'
      required:
        - status
        - id
        - subscribe
        - createdAt
        - updatedAt
    Channels:
      allOf:
        - $ref: '#/components/schemas/CollectionResult'
        - properties:
            _embedded:
              type: object
              properties:
                channels:
                  type: array
                  items:
                    $ref: '#/components/schemas/Channel'
    Handles:
      allOf:
        - $ref: '#/components/schemas/CollectionResult'
        - description: Vehicle ids associated with monitor.
        - properties:
            _embedded:
              type: object
              properties:
                vehicleIds:
                  $ref: '#/components/schemas/MonitorHandleVehicleIds'
                groups:
                   $ref: '#/components/schemas/MonitorHandleGroupIds' 
    MonitorHandleVehicleIds:
                  description: Vehicle ids associated with the monitor.
                  type: array
                  items:
                    description: Vehicle number identifier.
                    type: string          
    MonitorHandleGroupIds:
                  type: array
                  description: | 
                      List of groups handled by the monitor.
                  items:
                    $ref: '#/components/schemas/GroupId'       
    ChannelStatusSetter:
      allOf:
        - $ref: '#/components/schemas/RunStatusSetter'
        - title: ChannelStatusSetter
          description: Channel Status setter used to change the state from running to paused and vice versa.
    BaseAlarmTrigger:
      type: object
      title: Vehicle Alarm Trigger
      description: Describe a vehicle alarm trigger.
      properties:
        type:
          description: Define the vehicle break-in type.
          type: string
          enum:
            - NoBreakIn
            - FrontRightDoorBreakIn
            - FrontLeftDoorBreakIn
            - RearRightFrontDoorBreakIn
            - RearLeftFrontDoorBreakIn
            - HoodDoorBreakIn
            - TrunkDoorBreakIn
            - BackliteDoorBreakIn
            - RoofBreakIn
            - VolumetricBreakIn
            - VehicleLifting
            - ElectricalsystemBreakIn
            - KeyLearning
            - UnauthenticatedStartup
            - VehiclePositionChanged
            - GlassBreached
            - BatteryDisconnect
            - OverAccelerationThreshold
            - VehicleAlarmSystem
        position:
          allOf:
            - description: The position (last vehicle known one) where the alarm triggered.
            - $ref: '#/components/schemas/Position'
        startAt:
          description: Time when the alarm triggering started.
          type: string
          format: date-time
      required:
        - type
        - startAt
    BaseAlarmStatus:
      type: object
      title: Vehicle Alarm Status
      description: Describe a vehicle alarm status.
      properties:
        activation:
          description: Define whether the vehicle alarm is active or not.
          type: string
          enum:
            - Inactive
            - Active
      required:
        - activation
    BaseAlarm:
      type: object
      title: VehicleAlarm
      description: Describe a vehicle alarm status and trigger.
      properties:
        id:
          type: string
        status:
          $ref: '#/components/schemas/BaseAlarmStatus'
        trigger:
          $ref: '#/components/schemas/BaseAlarmTrigger'
    AlarmTrigger:
      allOf:
        - $ref: '#/components/schemas/CreatedAtField'
        - $ref: '#/components/schemas/BaseAlarmTrigger'
        - title: Vehicle Alarm Trigger
        - required:
            - type
            - startAt
            - createdAt
    AlarmStatus:
      allOf:
        - $ref: '#/components/schemas/CreatedAtField'
        - $ref: '#/components/schemas/BaseAlarmStatus'
        - title: Vehicle Alarm Status
        - required:
            - activation
            - createdAt
    Alarm:
      type: object
      title: Vehicle Alarm
      description: Describes the vehicle alarm status or trigger. Only one is present.
      properties:
        id:
          type: string
        trigger:
          $ref: '#/components/schemas/AlarmTrigger'
        status:
          $ref: '#/components/schemas/AlarmStatus'
      required:
        - id
    VehicleStatusAlarm:
      allOf:
        - $ref: '#/components/schemas/Alarm'
        - description: Describes the current vehicle alarm status and the latest (if available) trigger.
    Alarms:
      title: Alarm array
      allOf:
        - $ref: '#/components/schemas/CollectionResult'
        - properties:
            _embedded:
              type: object
              properties:
                alarms:
                  type: array
                  items:
                    $ref: '#/components/schemas/Alarm'
    AlarmDisableResponse:
      type: object
      properties:
        message:
          type: string
          description: The message of the submitted TAN disable request. The value it can carry can be - TAN request sent successfully
        requestStatus:
          type: string
          description: The status of the request - values can be Success / Fail
        statusTimestamp:
          type: string
          description: Epoch representation of UTC timestamp. This denotes the timestamp when SDP sent the TAN disable respons
    AlarmDisableRequest:
      type: object
      properties:
        enabled:
          type: boolean
          description: Boolean value of the TAN status to be disabled or not
        suspensionDuration:
          type: string
          description: The status of the request - values can be Success / Fail
          enum:
            - TWOHOURS
            - FOURHRS
            - TWELVEHRS
            - TWENTYFOURHRS
            - THREEDAYS
            - SEVENDAYS
        serviceModeStatus:
          type: boolean
          description: Status of maintenance mode (boolean). If false will reset the maintenance mode.
        serviceModeExpirationDate:
          type: string
          description: Timestamp of maintenance mode expiration date (Es:2017-10-15T14:09:21+01:00).
    AlarmStatusResponse:
      type: object
      properties:
        suppressionStatus:
          type: string
          description: Value indicating if the TAN is suppressed or not.
          enum:
            - Suppressed
            - notSuppressed
        suppressionDuration:
          type: string
          description: The status of the request - values can be Success / Fail
          enum:
            - TWOHOURS
            - FOURHRS
            - TWELVEHRS
            - TWENTYFOURHRS
            - THREEDAYS
            - SEVENDAYS
        suppressionTimestamp:
          type: integer
          description: EPOCH representation of UTC time which gives the time when the theft alarm suppression status for the vehicle is updated (example:12783247278)
    TanConfirmationResponse:
      type: object
      properties:
        message:
          type: string
          description: The status of the request - values can be Success / Fail
    OnEvent:
      type: object
      description: Allow  to define the behavior to have  when a Monitor Triggering or Remote command return event occurs.
      properties:
        actions:
          type: array
          items:
            type: object
            description: Possible action types.
            properties:
              type:
                type: string
                description: |
                  The selected type should be consistent with the action defined in the object:
                    | type   | required field| 
                    |----------|:-------------:|
                    | Notify |<i> no field</i>| 
                    | Remote |remoteAction|   
                    | Monitor|monitorAction |  
                  otherwise, a *'bad query paramter (HTTP 400)'* is returned.
                  * Note: All necessary authorization scopes for the defined actions should be granted when creating the 'on-event' entry within Monitor and Remote object.
                enum:
                  - Notify
                  - Remote
                  - Monitor
              monitorAction:
                type: object
                description: Allow to change a monitor lifecycle. The Id of monitor can be provided and if keep empty that means the  current(object parent) monitor will be used. However, if this 'OnXEvent' object is not created within a Monitor (ie remote) and the monitor-ID is not provided then a bad query parameter (HTTP 400) error will be returned.
                properties:
                  changeType:
                    type: string
                    enum:
                      - Pause
                      - Resume
                      - Delete
                  monitorId:
                    $ref: '#/components/schemas/MonitorId'
                required:
                  - changeType
              remoteAction:
                type: object
                description: Allow to perform a remote on the vehicle which caused the event. A channel id can be provided as remote status notification channel. If this channel ID is not provided then the remote will be perfomrmed silently.
                properties:
                  ChannelId:
                    $ref: '#/components/schemas/ChannelId'
                  remote:
                    $ref: '#/components/schemas/Remote'
                required:
                  - remote
    RemoteEventType:
      description: |
        The event type. See```status```for event sate.
        * Pending event is related to intermediate state of the action before it is handled by the vehicle.
        * Done event is related to a final state of the action when handled by the vehicle.
      type: string
      enum:
        - Pending
        - Done
    RemoteDoneEventStatus:
      description: |
        The reponse event status.
      type: string
      enum:
        - Success
        - AlreadyDone
        - Failed
    RemotePendingEventStatus:
      description: |
        The processing event status.
      type: string
      enum:
        - Accepted
        - WakingUpVehicle
        - CheckingVehicle
        - SentToVehicle
        - VehicleBatteryChargeTooLow
        - TooManyWakeUpsOverMonth
        - VehicleBatteryLevelWarning
    RemoteFailedEventStatus:
      description: |
        The failure cause for event with failed status. This field is filled only is failure state.
      type: string
      enum:
        - AuthorizationError
        - GeneralError
        - VehicleError
        - WrongCommand
        - VehicleConnectionTimeout
        - MissingRights
        - NotPossibleDueToVehicleBatteryLevel
        - NotPossibleDueToVehiclePrivacyLevel
        - TooManyWakeUpsOverMonth
        - TooManyRequestInShortTime
        - SameActionInProgress
        - NotPossibleDueToVehicleStolenState
        - VehicleInUse
        - TooManyRequestSent
        - DoorsOpen
        - VehicleErrorOrCidInside
        - CidInside
        - ExternalChargingSystemError
        - VehicleChargingSystemError
        - VehicleIsNotLocked
        - CanceledByDriver
    RemoteEventStatus:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/RemoteEventType'
        status:
          oneOf:
            - $ref: '#/components/schemas/RemoteDoneEventStatus'
            - $ref: '#/components/schemas/RemotePendingEventStatus'
        failureCause:
          $ref: '#/components/schemas/RemoteFailedEventStatus'
      required:
        - type
        - status
    OnRemoteEvent:
      allOf:
        - $ref: '#/components/schemas/OnEvent'
        - description: Define the actions to do when this vehicle remote command is performed. _'onStatus' field express the condition to apply actions. If not set then the actions are applyed for all remote status_.
          properties:
            onStatus:
              description: Condition (s) to the remote event should satisfy (*AND* logical relationship) to invoke this on-remote-event actions.
              type: array
              items:
                $ref: '#/components/schemas/RemoteEventStatus'
    OnMonitorEvent:
      allOf:
        - $ref: '#/components/schemas/OnEvent'
        - description: Define the action(s) to do when this vehicle monitor trigger occures. _'onRefresh' field express the event nature, refresh too or normal only, for which the actions(s) will be performed_.
          properties:
            onRefresh:
              description: Determines whether if this on-monitor-event's actions will be performed for monitor refresh avent too.
              type: boolean
              default: false
    DataStreamAttribute:
      allOf:
        - $ref: '#/components/schemas/BasicAttribute'
        - properties:
            value:
              oneOf:
                - type: string
                - type: string
                  enum:
                    - vin
                    - datastreamType
                    - fleetID
                  description: |
                    Set of variables that will be contextually valued and used as attribute value. To reference the variable, prefix its name with the dollar sign ($)  

                    * Disclaimer: if the var "vin" is used as a query parameter, the batchnotify will be no more possible and each event will be sent through a separated request!.
                    * example: Having a vin=VIN123456, the following attribute set:
                            ```"attributes": [
                                {
                                  "type": "Header",
                                  "key": "X-vehicle-id"
                                  "value":"$vin"
                                }
                              ]```
                      will be valued as http header extension: 
                              
                      *"X-vehicle-id: VIN123456"*
    DataStreamAttributeSet:
      type: array
      description: |
        Additional attributes-set as key/value pairs wich will be added to the request when sending the event. It can be added as *header* entries or simply added to the notification event *body* (as set of key/values).
      items:
        $ref: '#/components/schemas/DataStreamAttribute'
      example:
        - type: Header
          key: X-Vehicle_Id
          value: $Vin
        - type: Query
          key: RemoteType
          value: $remoteType
    DataStream:
      type: object
      required:
        - channelId
        - data
      properties:
        channelId:
          $ref: '#/components/schemas/ChannelId'
        attributes:
          $ref: '#/components/schemas/DataStreamAttributeSet'
        data:
          type: object
          properties:
            telemetry:
              description: Datastream Telemetry data type. A subset of telemetries can be selected by provinding type field. If not type is set then the whole telemetries are selected.
              type: object
              properties:
                type:
                  $ref: '#/components/schemas/TelemetryEnum'
                cycle:
                  description: Cycle time between two event sends expressed in seconds. This period is subject to the periodicity of its source data at vehicle level.
                  type: integer
                  minimum: 1
    DataStreams:
      allOf:
        - $ref: '#/components/schemas/CollectionResult'
        - properties:
            _embedded:
              type: object
              properties:
                dataStreams:
                  type: array
                  items:
                    $ref: '#/components/schemas/DataStream'
    DataStreamPostResponse:
      type: object
      description: DataStream reference returned when posting a remote action.
      properties:
        _links:
          type: object
          properties:
            channel:
              $ref: '#/components/schemas/Link'
            dataStream:
              $ref: '#/components/schemas/Link'
        datastreamId:
          $ref: '#/components/schemas/RemoteActionId'
        status:
          $ref: '#/components/schemas/RunStatus'
    DataStreamStatusSetter:
      allOf:
        - $ref: '#/components/schemas/RunStatusSetter'
        - title: DataStreamStatusSetter
          description: DataStream Status setter used to change the state from running to paused and vice versa.
    GroupMaintain:
      title: GroupMaintain
      description: |
        The 'Add' and 'Remove' actions require a Vin list while the 'Copy' action requires the 'groups' parameter. The parameters must therefore be submitted with  consistency (see below) otherwise, an error (400) will be raised. 

        | Action  | Mandatory field  |  
        |---|---|
        | Add  | vins (non empty)  | 
        | Remove   | vins (non empty)  | 
        | Copy  | groups (non empty)  |
      properties:
        action:
          type: string
          enum:
            - Add
            - Remove
            - Copy
        vins:
          type: array
          description: List of (owned) vehicle identifiers.
          items:
            type: string
        groups:
          type: array
          description: | 
              List of groups handled by the monitor.
          items:
            $ref: '#/components/schemas/GroupId'

##########@
    ExtendedEventParam:
          type: array
          items:
            type: string
            enum:
              - vehicle.latestTelemetry
              - vehicle.doorsState
              - vehicle.maintenance
              - vehicle.position
              - vehicle.alerts.active
              - vehicle.alarm
              
              
  
          description: |
            Allow to set extra vehicle data (defined in data model) to add to the Monitor/Remote event
            when publishing. The possible values are :


            |Value|Description|Related model |
            |----------|:-------------|------:|
            |vehicle.doorsState|Latest known door state (timestamped) before the eventDate|DoorState|
            |vehicle.latestTelemetry|Latest known vehicle status (timestamped) before the eventDate|AggregatedTelemetry|
            |vehicle.maintenance|Latest known maintenance(timestamped) before the eventDate|Maintenance|
            |vehicle.position|Last vehicle position (timestamped) at the eventDate|Position|
            |vehicle.alerts.active|List of active alerts at the eventDate|Alert|
            |vehicle.alarm|Latest Vehicle alarm status and trigger|Alarm|
           


            


## Stolen data
    StolenCollection:
      allOf:
        - $ref: '#/components/schemas/CollectionResult'
        - properties:
            _embedded:
              type: object
              properties:
                stolen:
                  type: array
                  items:
                    $ref: '#/components/schemas/Stolen'
    StolenBase: # used with telemetry exposure
      type: object
      description: The current reported Vehicle Stolen status. 
      properties:
        _links:
          type: object
          properties:
            self:
              $ref: '#/components/schemas/Link'
            vehicle:
              $ref: '#/components/schemas/Link'
          required : [self]
        id:
          type: string
          example : 0a9de72cc3803b12a74418acd20dcd66634fa82e44b2ec7060bca914
        state:
          description : Stolen state of the vehicle (true means the vhicle is reported stolen).
          type: boolean
          example : true
        startedAt:
          description : Stolen vehicle start time.
          type: string
          format: date-time
          example : 2024-07-16T12:00:00Z
        endAt:
          description : Stolen vehicle stop time.
          type: string
          format: date-time
          example : 2024-07-29T18:00:00Z
        startPosition:
          allOf:
            - $ref: '#/components/schemas/Position'
            - description: The position (last vehicle known one) where the vehicle is reported stolen.
                           <b>The stolen vehicle position is set only if the API requester has the rights to access such data.</b>
            - example: 
                type": "Feature"
                geometry: 
                  type: "Point"
                  coordinates": [5.970338,-62.536239] 

        endPosition:
          allOf:
            - $ref: '#/components/schemas/Position'
            - description: The position (last vehicle known one) where the stolen state is not active anymore. 
                           <b>The stolen vehicle position is set only if the API requester has the rights to access such data.</b>
            - example: 
                type": "Feature"
                geometry: 
                  type: "Point"
                  coordinates": [5.780338,-63.63000] 
      required: [ id,state,createdAt,startedAt, _links] 
    Stolen:  # used with Stolen api
      allOf: 
        - title: Vehicle stolen status
        - $ref: '#/components/schemas/CreatedAtField'
        - $ref: '#/components/schemas/UpdatedAtField'
        - $ref: '#/components/schemas/StolenBase'
        - description: The Vehicle Stolen status. 
    StolenObj: # used with latest telemtry api
      allOf: 
        - title: StolenStatus
        - $ref: '#/components/schemas/CreatedAtField'
        - $ref: '#/components/schemas/StolenBase'
        - description: The last known Vehicle Stolen report. 

###################### PARAMETERS
  parameters:
    genericId:
      name: ''
      required: true
      in: path
      schema:
        type: string
    alertId:
      name: aid
      in: path
      description: id of the alert.
      required: true
      schema:
        type: string
    alarmId:
      name: aid
      in: path
      description: id of the alamr.
      required: true
      schema:
        type: string
    stolenId:
      name: sid
      in: path
      description: id of the stolen state.
      required: true
      schema:
        type: string        
    tanConfirm:
      name: isAccept
      in: path
      description: If the vehicle is stolen or not
      required: true
      schema:
        type: boolean
    activeAlert:
      name: active
      in: query
      description: Active alert query parameter. Boolean flag filter. Active alert = true; done alert = false; not present then no filter is applyed.
      schema:
        type: boolean
    collisionId:
      name: cid
      in: path
      description: Results will only contain the Collision related to this Collision *id*.
      required: true
      schema:
        type: string
    vehicleId:
      name: id
      in: path
      description: Results will only be related to this Vehicle *id*.
      required: true
      schema:
        type: string
    breadcrumbid:
      name: breadcrumbId
      in: path
      required: true
      schema:
        type: string
    tripId:
      name: tid
      in: path
      required: true
      description: the *id* of Trip
      schema:
        type: string
    chargeSessionId:   
      name: sid
      in: path
      required: true
      description: the *id* of session
      schema:
        type: string
    segmentId:
      name: segmentId
      in: path
      required: true
      description: ORP trip segment identifier
      schema:
        type: string
    segmentIds:
      name: segmentIds
      in: path
      required: true
      description: ORP trip segment identifier
      schema:
        type: array
        items:
          type: string
    tripProfileName:
      name: profile
      in: query
      description: Trip Dictionary user profile
      required: false
      schema:
        type: string
    tripSessionId:
       name: SessionId
       in: query
       required: false
       schema:
         type: string
    locale:
      name: locale
      in: query
      description: Locale is used for rendering text, correctly displaying regional monetary values, time and date formats. Respect REGEX \w(-\w)?
      required: true
      schema:
        type: string
    vehicleExtension:
      name: extension
      in: query
      description: >-
        Additional data set that will be included in embedded field```(the number of elements in this array must be between 1 and 1)```.
      required: false
      schema:
        $ref: '#/components/schemas/VehicleExtensionType' 
    timestamps:
      name: timestamps
      in: query
      description: |
        Array of  **"timestamp"** ranges. Results will contain results whose
        timestamps are included in those date-time ranges (see **timestamp**
        data  model).**"timestamp"** items should be expressed as in
        '[RFC3339](https://www.ietf.org/rfc/rfc3339.txt)'. Each element of the array expresses a time range (with the pattern ```\w?/\w?``` or ```R\d?/w/w(/w)?```) which is the period between two or more times. The range can be expressed by two times Points (start and end *Timestamp*s), by a start
              *Timestamp* Point and a *Duration* or as a repeating interval. All of
              them  should be expressed using the 
              [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) and the interval format
              is based on
              [ISO8601](https://en.wikipedia.org/wiki/ISO_8601#Time_intervals)

                  'T1/T2' interval time from low limit T1 to hight T2

                  'T1/D' interval time from low limit T1 with duration = D ( T2=T1+D)


                  'T/' endless range, known start Timestamp but no end Timestamp. The current time  will be used as the high time limit.


                  '/T' startless range, known end date but no start date. No lower limit
                    will be used to retrieve results.
                    
                  Rn/T/D/[d]  repeat the interval of D **n** times starting at T using **d** (extension of the standard and not mandatory) as range duration. The default (duration) value of d is 24 H 
                  
                  R/T/D/[d] unbounded number of repetitions starting at T using **d** (extension of the standard and not mandatory) as range duration. The default (duration) value of d is 24 H.


                    *T is a timestamp and D is a duration  as defined in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt).*
        *Example:*          
                    
                  2018-01-01T09:00:00+01:00/2018-01-01T12:00:00+01:00* known low and hight limits.

                  2018-01-03T12:00:00+01:00/P3Y6M4DT12H30M5S*  known low limit, hight limit = start + duration.

                  2018-01-03T12:00:00+01:00/*  known low limit, hight limit = current time.
                    
                  R5/2018-01-03T12:00:00Z/PT6H/PT2H* repeate duration 6H wiht interval period of 2H for 5 times starting at 2018-01-03T12:00:00Z.
      required: false
      schema:
        type: array
        minItems: 1
        maxItems: 10
        items:
          type: string
          pattern: \w?/\w?
    pageSize:
      name: pageSize
      in: query
      schema:
        type: integer
        default: 100
        minimum: 1
        maximum: 500
      required: false
      description: The maximum number of results (for a collection results response) to return per page. When not set, at most 100 results will be returned. Maximum value is 500. Bad Request response will be returned if pageToken is also sent along with pageSize
    pageToken:
      name: pageToken
      in: query
      schema:
        type: string
      required: false
      description: Start-Page marker, the token for continuing a previous list request on the next page. It is built and used by the backen **only**.
    indexRange:
      name: indexRange
      in: query
      schema:
        $ref: '#/components/schemas/Range'
      required: false
      description: |
        Results indexes will be included in this range. this range is used to express the first (offset) and the last results          index  to retrieve. With the respect to the regex pattern ```\d+(-\d*)?```,
                  the start of  range is mandatory ( 0 for default). Bad Request response will be returned if pageToken is also sent along with indexRange
          
          
        *Example:*  
          
                  *  '0-9'  : start=0, end=9    ==> offset=0 and number of items=10
          
          
                  * '5-'    : start =5, no end  ==> start at 5th to the end results.
          
          default: 0-

          example: 0-, 0-5
    telemetryType:
      name: type
      in: query
      description: Results will only contain Telemetry data of the elected type(s). More than one message type can be added. By default, if no type is selected then all telemetries will be selected ```(the number of elements in this array must be bounded between 1 and 10)```.
      required: false
      schema:
        $ref: '#/components/schemas/TelemetryEnum'
    sortpreference:
      name: sort
      in: query
      description: Results will be sorted based on user preference 
      required: false
      schema:
        $ref: '#/components/schemas/sortenum'        
    tripreportsummaryType:
      name: summarytype
      in: query
      description: Results will only contain trip report summary based on this parameter selected.
      schema:
        $ref: '#/components/schemas/TripReportSummaryEnum'
    orderBy:
      name: orderBy
      description: Orderby ( dafault in descending order)
      in: query 
      schema:
         type: string
         default: descending
         enum:
           - ascending
           - descending
    alarmType:
      name: type
      in: query
      description: Results will only contain Alarm messages of this type.  If no filtering type is selected then all alarms will be taken .
      required: false
      schema:
        $ref: '#/components/schemas/AlarmTypeEnum'
    
    tolerence:
      name: tolerance
      description: |
        Tolerance factor is expressed in length KM unit and is used to simplify path by reducing the total number of points by is using Douglas-Peucker algorithme to find a similar curve with fewer points (find more info here: [Ramer_Douglas_Peucker_algorithm](https://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm#Algorithm) ).
      in: query
      schema:
        type: number
        format: float
    monitorId:
      name: mid
      in: path
      description: id of the monitor.
      required: true
      schema:
        type: string
    remoteType:
      name: types
      in: query
      description: Results will contain only the Remote-channels of these types. _If not specified then the whole channels are retrieved_.
      required: false
      schema:
        $ref: '#/components/schemas/RemoteTypes'
    channelType:
      name: types
      in: query
      description: Results will contain only the channels of these types. _If not specified then the whole channels are retrieved_.
      required: false
      schema:
        $ref: '#/components/schemas/ChannelTypes'
    tripType:
      name: type
      in: query
      description: Results will contain only the trip of these types. If no type is provided then no filter will applied.
      required: true
      schema:
        $ref: '#/components/schemas/TripType'
    groupPrefix:
      name: groupPrefix
      in: query
      description: Enable filtering on prefixed groups ids only.
      schema:
        type: string 
    groupIdQry:
      name: gId
      description: Enable filtering on vehicles belonging to this group.
      in: query
      required: false
      schema:
        type: string
        pattern: ([0-9a-fA-F]|-|_)*
    vinPrefix:
      name: vinPrefix
      in: query
      description: Enable filtering on prefixed VINs only.
      schema:
        type: string
    vin:
      name: vin
      in: path
      required: true
      description: Vehicle id
      schema:
        type: string
    serviceId:
      name: serviceId
      in: path
      required: true
      description: Service id
      schema:
        type: string
    groupId:
      name: gId
      description: The Group ID.
      in: path
      required: true
      schema:
        type: string
        pattern: ([0-9a-fA-F]|-|_)*
    channelId:
      name: chId
      description: The channel ID.
      in: path
      required: true
      schema:
        type: string
        pattern: ([0-9a-fA-F]|-|_)*
    remoteId:
      name: rid
      description: The remote action ID.
      in: path
      required: true
      schema:
        type: string
        pattern: ([0-9a-fA-F]|-|_)*
    datastreamId:
      name: did
      description: The data stream ID.
      in: path
      required: true
      schema:
        type: string
        pattern: ([0-9a-fA-F]|-|_)*

    tripDuration:
      name: duration
      in: query
      schema:
        $ref: '#/components/schemas/Range'
      required: false
      description: |
        Trip duration validity interval. It allows to  define the min or max duration of a trip. **Unit = sec** "  
          
        *Example:*  
          
                  * 10-3600: Trip with duration between 10 sec and 1 hour.
          
          
                  * 20-: Trip with duration greater than 20 sec.
          
          default: 0-
    tripStatsKinetic:
      name: kinetics
      in: query
      description: The results will contain only trips whose kinetic stats matches this list.If not type is provided then no filter will applied.
      required: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/TripStatsKineticEnum'
    tripPosCtxKinetic:
      name: kinetics
      in: query
      description: The results will  contain only  trip's positions  whose tripContex.kinetic (property) is included in this list. If not provided then no filter will applied.
      required: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/TripPositionCtxKinetic'
    tripPropulsion:
      name: propulsions
      in: query
      description: The results will  contain only  trip's data (property) whose propulsion is included in this list. If no type is provided then no filter will applied.
      required: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/PropulsionType'
    tripDistance:
      name: distance
      in: query
      schema:
        $ref: '#/components/schemas/Range'
      required: false
      description: |
        Trip distance  validity interval. It allows to  define the min or max duration of a trip.  **Unit = Km** and format : float.

        only one digit after the decimal point is aceepted for the interval bounds  
        *Example:*  
          
                  * 1-150: Trip with distance between 1 Km and 150 km .
          
          
                  * 0.1-: Trip with distance  greater than 100 m.
          
          default: 0-
    tripState:
      description: |
        Allow to filter for Trips with defined states. Those states can be compound of : _Nominal,Unstarted, DataLacking, Unfinished_.

        * Default: All states are allowed.
      name: states
      in: query
      schema:
        $ref: '#/components/schemas/TripStateEnumArray'
    chargingPower:
      name: power
      in: query
      schema:
        $ref: '#/components/schemas/Range'
      required: false
      description: |
        The battery gained power (Wh) validity interval. It allows to filter the minimum and/or maximum gained power of a charing session.  **Unit = Wh** and format : integer.
        *Example:*  
          
                  * 1000-3000: Charging session with gained power between 1 KWh and 3 KWh.
                  
                  * 2000-: Charging session with gained power greater than 2 KWh.
          
          default: 0-
    chargingLevel:
      name: level
      in: query
      schema:
        $ref: '#/components/schemas/Range'
      required: false
      description: |
        The battery gained charge level validity interval. It allows to filter on the minimum and/or maximum charge level of a charing session.  **Unit = %** and format : integer.
        *Example:*  
          
                  * 20-80: Charging session with gained level between 20% and 80%.
                  
                  * 50-: Charging session with gained level greater than 50%.
          
          default: 0-  

    chargingAutonomy:
      name: autonomy
      in: query
      schema:
        $ref: '#/components/schemas/Range'
      required: false
      description: |
        The battery gained autonomy validity interval. It allows to filter on the minimum and/or maximum gained autonomy of a charing session.  **Unit = Km** and format : integer.
        *Example:*  
          
                  * 200-250: Charging session with gained autonomy between 200 KWh and 250 KWh.
                  
                  * 300-: Charging session with gained autonomy greater than 300 Km.
          
          default: 0-                        
    state:
      description: |
        Allow to filter with defined states. Those states can be compound of : _Nominal,Unstarted, DataLacking, Unfinished_.

        * Default: All states are allowed.
      name: states
      in: query
      schema:
        $ref: '#/components/schemas/LifeCycleStatesEnumArray'

    duration:
      name: duration
      in: query
      schema:
        $ref: '#/components/schemas/Range'
      required: false
      description: |
        Duration validity interval. It allows to  define the min or max duration. **Unit = sec** "  
          
        *Example:*  
          
                  * 10-3600 : Duration between 10 sec and 1 hour.
          
          
                  * 20- : Duration greater than 20 sec.
          
          default: 0-
  responses:
    CollisionsuccessResponse:
      description: Collision response
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/Collision'
    CollisionsSuccessResponse:
      description: A list of Collision
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/Collisions'
    CollisionFailedResponse:
      description: Collision request error
      $ref: '#/x-fragment/general_error_fragment'
    AlertsucessResponse:
      description: Alert response
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/Alert'
    AlertsuccessResponses:
      description: A list of alert
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/Alerts'
    AlertFailedResponse:
      description: Alert request error
      $ref: '#/x-fragment/general_error_fragment'
    TripsucessResponse:
      description: Trip response
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/Trip'
    TripsSuccessResponses:
      description: A list of Trip
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/Trips'
    TripFailedResponse:
      description: Trip request error
      $ref: '#/x-fragment/general_error_fragment'
    
    TripsSettingsFailedResponse:
      description: Trip settings request error
      $ref: '#/x-fragment/general_error_fragment'
    ChargeSessionResponse:  
      description: Charge session response.
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/TimestampedChargingSession'
 
    ChargeSessionFailedResponse:
      description: Charge session request error.
      $ref: '#/x-fragment/general_error_fragment'


    ChargeSessionsSuccessResponses:
      description: A list of charge sessions.
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/TimestampedChargingSessions'
    ChargeSessionsFailedResponse:
      description: Charge sessions request error
      $ref: '#/x-fragment/general_error_fragment'
    
    TelemetrySuccessResponse:
      description: Telemetry response
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/Telemetries'
    TripSummarySuccessResponse:
      description: TripSummary Success Response
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/TripSummary'
    TripSummarySettingsSuccessResponse:
      description: TripSummary SettingsSuccess Response
      content:
        application/hal+json:
          schema:
            properties:
              Weekly:
                $ref: '#/components/schemas/WeeklySetting'
              Monthly:
                $ref: '#/components/schemas/MonthlySetting'
              Daily:
                $ref: '#/components/schemas/DailySetting'
              timeZone:
                type: string
            required:
              - Weekly
              - Daily
              - Monthly
              - timeZone
    TripSuggestionsSuccessResponse:
      description: Array of suggestion objects
      content:
        application/hal+json:
          schema:
            properties:
              suggestions:
                $ref: '#/components/schemas/TripSuggestions'
    TelemetryFailedResponse:
      description: Trip request error
      $ref: '#/x-fragment/general_error_fragment'
    MonitorsuccessStatusResponse:
      description: Monitor response
      content:
        application/hal+json:
          schema:
            type: object
            properties:
              _links:
                type: object
                properties:
                  self:
                    $ref: '#/components/schemas/Link'
                  monitor:
                    $ref: '#/components/schemas/Link'
              status:
                $ref: '#/components/schemas/RunStatus'
    MonitorsuccessPostResponse:
      description: Monitor created or updated successfully
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/MonitorRef'
    MonitorsuccessPutResponse:
      description: Monitor updated successfully
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/MonitorUpdateRef'
    MonitorsuccessResponses:
      description: A list of Monitors
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/Monitors'
    MonitorsuccessResponse:
      description: Monitor response
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/Monitor'
    MonitorFailedResponse:
      description: Monitor request error
      $ref: '#/x-fragment/general_error_fragment'
    MonitorHandlesVinsFailedResponse:
        $ref: '#/x-fragment/general_error_fragment'
    channelsuccessStatusResponse:
      description: Monitor response
      content:
        application/hal+json:
          schema:
            type: object
            properties:
              _links:
                type: object
                properties:
                  self:
                    $ref: '#/components/schemas/Link'
                  monitor:
                    $ref: '#/components/schemas/Link'
              status:
                $ref: '#/components/schemas/RunStatus'
    channelSuccessPostResponse:
      description: channel creation or update success response
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/ChannelRef'
    channelSuccessPutResponse:
      description: channel update success response
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/ChannelUpdateRef'
    RemoteActionsSuccessPostResponse:
      description: Remote action creation success response (accepted).
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/RemotePostResponse'
    channelSuccessResponse:
      description: A channel.
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/Channel'
    ChannelSuccessResponses:
      description: A list of subsribed channel.
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/Channels'
    MonitorHandlesSuccessResponses:
      description: A list of handled vehicles by a monitor.
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/Handles' 
    MonitorHandleRefSuccessResponses:
      description: Monitor vehicles handled by a monitor.
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/MonitorHandleRef'
    GroupsSuccessResponse:
      description: A list of existing groups.
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/Groups'
    GroupSuccessResponse:
      description: A group.
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/Group'
    GroupsOfGroupSuccessResponse:
      description: A list of groups linked to the group.
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/GroupsAssociationList'
    RemoteActionSuccessResponses:
      description: A list of remote actions.
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/RemoteActions'
    RemoteActionSuccessResponse:
      description: A remote action response.
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/RemoteAction'
    VehicleConfigSuccessResponse:
      description: Vehicle config response.
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/VehicleConfig'
    RemoteLastStatusSuccessResponse:
      description: A remote last status.
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/RemoteLastStatusResponse'
    UpdateChargePrefSuccessResponse:
      description: ''
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/UpdateChargePrefResponse'
    RemoteTheftStatusSuccessResponse:
      description: Remote theft status.
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/RemoteTheftStatusResponse'
    ChannelFailedResponse:
      description: Subscribe request error
      $ref: '#/x-fragment/general_error_fragment'
    RemoteFeatureNotSupportedResponse:
      description: Feature not supported error
      $ref: '#/x-fragment/501__remote_notsupported_error_fragment'
    FeatureNotSupportedResponse:
      description: Feature not supported error
      $ref: '#/x-fragment/501__feature_notsupported_error_fragment'
    DataNotFoundResponse:
      description: Data not found
      $ref: '#/x-fragment/404_data_notfound_error_fragment'
    DatastreamSuccessResponse:
      description: A remote action response.
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/DataStream'
    DatastreamsSuccessResponse:
      description: Datastream list response.
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/DataStreams'
    DatastreamFailedResponse:
      description: Datastream request error
      $ref: '#/x-fragment/general_error_fragment'
    DataStreamSuccessPostResponse:
      description: Remote action creation success response (accepted).
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/DataStreamPostResponse'
    AlarmSucessResponse:
      description: Alarm response
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/Alarm'
    AlarmSuccessResponses:
      description: A list of alert
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/Alarms'
    AlarmFailedResponse:
      description: Alarm request error
      $ref: '#/x-fragment/general_error_fragment'
    AlarmDisableSuccessResponse:
      description: Alarm Disable success
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/AlarmDisableResponse'
    AlarmDisableFailedResponse:
      description: Alarm disable Error
      $ref: '#/x-fragment/general_error_fragment'
    AlarmStatusSuccessResponse:
      description: Alarm Status success
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/AlarmStatusResponse'
    AlarmTheftConfirmResponse:
      description: TAN confirmation Response success
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/TanConfirmationResponse'
    AlarmTheftconfirmFail:
      description: Alarm disable Error
      $ref: '#/x-fragment/general_error_fragment'
    StolenSucessResponse:
      description: Stolen response
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/Stolen'
    
    StolenSuccessResponses:
      description: A list of stolen context.
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/StolenCollection'

    StolenFailedResponse:
      description: Stolen request error
      $ref: '#/x-fragment/general_error_fragment'      
security:
  - api_keyAuth: []
  - api_oauth: []
x-fragment:
  Vehicle_id_Capability_getter:
    get:
      tags:
        - Vehicles
      summary: Onboard capability of vehicle
      description: |
        Returns data scopes and remote commands vehicle is eligible for.
        
      operationId: getVehicleCapabilityByid
      parameters:
        - $ref: '#/components/parameters/vehicleId'
      responses:
        '200':
          description: OK
          content:
            'application/hal+json ':
              schema:
                $ref: '#/components/schemas/VehicleCapability'
        default:
          description: Vehicle not found
          $ref: '#/x-fragment/general_error_fragment'
  Vehicles_getter:
    get:
      tags:
        - Vehicles
      summary: List of vehicles
      description: |
        Returns the Vehicles associated with the User and Details of vehicle.
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | data:vehicle|Required|
        |data:vehicle:devices:pnc|Optional|
      operationId: getVehicles
      parameters:
        - $ref: '#/components/parameters/vinPrefix'
        - $ref: '#/components/parameters/indexRange'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageToken'
        - $ref: '#/components/parameters/vehicleExtension'
      security:
        - api_oauth:
            - data:vehicle #Required
      responses:
        '200':
          description: OK
          content:
            'application/hal+json ':
              schema:
                $ref: '#/components/schemas/Vehicles'
        default:
          description: Vehicle not found
          $ref: '#/x-fragment/general_error_fragment'
  Vehicle_id_getter:
    get:
      tags:
        - Vehicles
      summary: Details of vehicle
      description: |
        Returns detailed information about a Vehicle.
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | data:vehicle|Required|
        |data:vehicle:devices:pnc|Optional|
      operationId: getVehicleByid
      parameters:
        - $ref: '#/components/parameters/vehicleId'
        - $ref: '#/components/parameters/vehicleExtension'
      security:
        - api_oauth:
            - data:vehicle #Required
      responses:
        '200':
          description: OK
          content:
            'application/hal+json ':
              schema:
                $ref: '#/components/schemas/Vehicle'
        default:
          description: Vehicle not found
          $ref: '#/x-fragment/general_error_fragment'
  Vehicle_id_telemetries_getter:
    get:
      summary: Search for Vehicle telemetries.
      tags:
        - Vehicles
      description: |
        Returns the Telemetry data raised by the vehicle during a selective timestamp-ranges and bounded by an index range.
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | data:telemetry|Optional|
        | data:telemetry:environment|Optional|
        | data:telemetry:privacy|Optional|
        | data:telemetry:vehicle|Optional|
        | data:telemetry:vehicle:ignition|Optional|
        | data:telemetry:vehicle:location|Optional|
        | data:telemetry:vehicle:preconditioning|Optional|
        | data:telemetry:vehicle:tyreState|Optional|
        | data:telemetry:vehicle:energies|Optional|
        | data:telemetry:vehicle:engines|Optional|
        | data:telemetry:vehicle:doorsState|Optional|
        | data:telemetry:vehicle:battery|Optional|
        | data:telemetry:vehicle:safety|Optional|
        | data:telemetry:vehicle:odometer|Optional|
        | data:telemetry:vehicle:kinetic|Optional|
        | data:telemetry:vehicle:propulsion|Optional|
        | data:telemetry:vehicle:braking|Optional|
        | data:telemetry:vehicle:wipingBlades|Optional|
        | data:telemetry:vehicle:transmission|Optional|
        | data:telemetry:vehicle:adas|Optional|
        | data:telemetry:vehicle:lightingSystem|Optional|
        | data:telemetry:vehicle:maintenance|Optional|
        | data:telemetry:vehicle:drivingBehavior|Optional|
        | data:telemetry:vehicle:alert|Optional|
        | data:telemetry:vehicle:alarm|Optional|
      operationId: getVehicleTelemetry
      parameters:
        - $ref: '#/components/parameters/vehicleId'
        - $ref: '#/components/parameters/timestamps'
        - $ref: '#/components/parameters/telemetryType'
        - $ref: '#/components/parameters/indexRange'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageToken'
        - $ref: '#/components/parameters/orderBy'
      security:
        - api_oauth:
            - data:telemetry
            - data:telemetry:environment
            - data:telemetry:privacy
            - data:telemetry:vehicle
            - data:telemetry:vehicle:ignition
            - data:telemetry:vehicle:location
            - data:telemetry:vehicle:preconditioning
            - data:telemetry:vehicle:tyreState
            - data:telemetry:vehicle:energies
            - data:telemetry:vehicle:engines
            - data:telemetry:vehicle:doorsState
            - data:telemetry:vehicle:battery
            - data:telemetry:vehicle:safety
            - data:telemetry:vehicle:odometer
            - data:telemetry:vehicle:kinetic
            - data:telemetry:vehicle:propulsion
            - data:telemetry:vehicle:braking
            - data:telemetry:vehicle:wipingBlades
            - data:telemetry:vehicle:transmission
            - data:telemetry:vehicle:adas
            - data:telemetry:vehicle:lightingSystem
            - data:telemetry:vehicle:maintenance
            - data:telemetry:vehicle:drivingBehavior
            - data:telemetry:vehicle:alert
            - data:telemetry:vehicle:alarm
      responses:
        '200':
          $ref: '#/components/responses/TelemetrySuccessResponse'
        '404':
          $ref: '#/components/responses/DataNotFoundResponse'
        default:
          $ref: '#/components/responses/TelemetryFailedResponse'
  Vehicle_id_lasttelemetries_getter:
    get:
      tags:
        - Vehicles
      description: |
        Returns an aggregation of the latest telemetries data raised by the vehicle as a tree of timestamped telemtry blocks.
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | data:telemetry|Optional|
        | data:telemetry:environment|Optional|
        | data:telemetry:privacy|Optional|
        | data:telemetry:vehicle|Optional|
        | data:telemetry:vehicle:ignition|Optional|
        | data:telemetry:vehicle:location|Optional|
        | data:telemetry:vehicle:preconditioning|Optional|
        | data:telemetry:vehicle:tyreState|Optional|
        | data:telemetry:vehicle:energies|Optional|
        | data:telemetry:vehicle:engines|Optional|
        | data:telemetry:vehicle:doorsState|Optional|
        | data:telemetry:vehicle:battery|Optional|
        | data:telemetry:vehicle:safety|Optional|
        | data:telemetry:vehicle:odometer|Optional|
        | data:telemetry:vehicle:kinetic|Optional|
        | data:telemetry:vehicle:propulsion|Optional|
        | data:telemetry:vehicle:braking|Optional|
        | data:telemetry:vehicle:wipingBlades|Optional|
        | data:telemetry:vehicle:transmission|Optional|
        | data:telemetry:vehicle:adas|Optional|
        | data:telemetry:vehicle:lightingSystem|Optional|
        | data:telemetry:vehicle:maintenance|Optional|
        | data:telemetry:vehicle:drivingBehavior|Optional|
        | data:telemetry:vehicle:alert|Optional|
        | data:telemetry:vehicle:alarm|Optional|
      summary: Vehicle latest telemetry.
      operationId: getVehicleLastTelemetries
      parameters:
        - $ref: '#/components/parameters/vehicleId'
        - $ref: '#/components/parameters/telemetryType'
      security:
        - api_oauth:
            - data:telemetry
            - data:telemetry:environment
            - data:telemetry:privacy
            - data:telemetry:vehicle
            - data:telemetry:vehicle:ignition
            - data:telemetry:vehicle:location
            - data:telemetry:vehicle:preconditioning
            - data:telemetry:vehicle:tyreState
            - data:telemetry:vehicle:energies
            - data:telemetry:vehicle:engines
            - data:telemetry:vehicle:doorsState
            - data:telemetry:vehicle:battery
            - data:telemetry:vehicle:safety
            - data:telemetry:vehicle:odometer
            - data:telemetry:vehicle:kinetic
            - data:telemetry:vehicle:propulsion
            - data:telemetry:vehicle:braking
            - data:telemetry:vehicle:wipingBlades
            - data:telemetry:vehicle:transmission
            - data:telemetry:vehicle:adas
            - data:telemetry:vehicle:lightingSystem
            - data:telemetry:vehicle:maintenance
            - data:telemetry:vehicle:drivingBehavior
            - data:telemetry:vehicle:alert
            - data:telemetry:vehicle:alarm
      responses:
        '200':
          description: Status response
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/AggregatedTelemetries'
        '404':
          $ref: '#/components/responses/DataNotFoundResponse'
        default:
          $ref: '#/x-fragment/general_error_fragment'
  Vehicle_id_collisions_getter:
    get:
      summary: Search for collisions that occured on the vehicle.
      tags:
        - Vehicles
      description: |
        Returns the list of Collisions that occurred for a given vehicle (id) during the timestamp ranges and bounded by an index range
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | data:collision|Required|
        | data:telemetry:vehicle:ignition|Optional|
        | data:telemetry:vehicle:location|Optional|
        | data:telemetry:vehicle:kinetic|Optional|
      operationId: getVehicleCollision
      parameters:
        - $ref: '#/components/parameters/vehicleId'
        - $ref: '#/components/parameters/timestamps'
        - $ref: '#/components/parameters/indexRange'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageToken'
        - $ref: '#/components/parameters/orderBy'
      security:
        - api_oauth:
            - data:collision  #Required
            - data:telemetry:vehicle:ignition
            - data:telemetry:vehicle:location
            - data:telemetry:vehicle:kinetic
      responses:
        '200':
          $ref: '#/components/responses/CollisionsSuccessResponse'
        default:
          $ref: '#/components/responses/CollisionFailedResponse'
  Vehicle_id_collisions_by_id_getter:
    get:
      summary: A collision occured on the vehicle.
      tags:
        - Vehicles
      description: |
        Returns the Collision that matches the vehicle id and the Collision cid.
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | data:collision|Required|
        | data:telemetry:vehicle:ignition|Optional|
        | data:telemetry:vehicle:location|Optional|
        | data:telemetry:vehicle:kinetic|Optional|
      operationId: getVehicleCollisionById
      parameters:
        - $ref: '#/components/parameters/vehicleId'
        - $ref: '#/components/parameters/collisionId'
      security:
        - api_oauth:
            - data:collision  #Required
            - data:telemetry:vehicle:ignition
            - data:telemetry:vehicle:location
            - data:telemetry:vehicle:kinetic
      responses:
        '200':
          $ref: '#/components/responses/CollisionsuccessResponse'
        default:
          $ref: '#/components/responses/CollisionFailedResponse'
  Vehicle_id_alerts_getter:
    get:
      tags:
        - Vehicles
      summary: Search for Alerts of vehicle.
      description: |
        Returns a filtred alert list for a Vehicle.
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | data:telemetry:vehicle:alert|Required|
        | data:telemetry:vehicle:location|Optional|
      operationId: getVehicleAlerts
      parameters:
        - $ref: '#/components/parameters/vehicleId'
        - $ref: '#/components/parameters/activeAlert'
        - $ref: '#/components/parameters/timestamps'
        - $ref: '#/components/parameters/indexRange'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageToken'
        - $ref: '#/components/parameters/orderBy'
      security:
        - api_oauth:
            - data:telemetry:vehicle:alert #Required
            - data:telemetry:vehicle:location
      responses:
        '200':
          $ref: '#/components/responses/AlertsuccessResponses'
        default:
          $ref: '#/components/responses/AlertFailedResponse'
  Vehicle_id_alert_by_id_getter:
    get:
      summary: An alert (id) raised by the given vehicle
      tags:
        - Vehicles
      description: |
        Returns information about a specific alert messages for a Vehicle.
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | data:telemetry:vehicle:alert|Required|
        | data:telemetry:vehicle:location|Optional|
      operationId: getVehicleAlertsById
      parameters:
        - $ref: '#/components/parameters/vehicleId'
        - $ref: '#/components/parameters/alertId'
      security:
        - api_oauth:
            - data:telemetry:vehicle:alert #Required
            - data:telemetry:vehicle:location
      responses:
        '200':
          $ref: '#/components/responses/AlertsucessResponse'
        default:
          $ref: '#/components/responses/AlertFailedResponse'
  Vehicle_id_Trip_id_Telemetry_getter:
    get:
      summary: Telemetries of trip and vehicle
      tags:
        - Trips
      description: |
        Returns the set of Telemetry values that occurred for a given vehicle (id) and a speific Trip (tid) during the timestamp ranges and bounded by an index range.
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | data:trip|Required|
        | data:telemetry|Optional|
        | data:telemetry:environment|Optional|
        | data:telemetry:privacy|Optional|
        | data:telemetry:vehicle|Optional|
        | data:telemetry:vehicle:ignition|Optional|
        | data:telemetry:vehicle:location|Optional|
        | data:telemetry:vehicle:preconditioning|Optional|
        | data:telemetry:vehicle:tyreState|Optional|
        | data:telemetry:vehicle:energies|Optional|
        | data:telemetry:vehicle:engines|Optional|
        | data:telemetry:vehicle:doorsState|Optional|
        | data:telemetry:vehicle:battery|Optional|
        | data:telemetry:vehicle:safety|Optional|
        | data:telemetry:vehicle:odometer|Optional|
        | data:telemetry:vehicle:kinetic|Optional|
        | data:telemetry:vehicle:propulsion|Optional|
        | data:telemetry:vehicle:braking|Optional|
        | data:telemetry:vehicle:wipingBlades|Optional|
        | data:telemetry:vehicle:transmission|Optional|
        | data:telemetry:vehicle:adas|Optional|
        | data:telemetry:vehicle:lightingSystem|Optional|
        | data:telemetry:vehicle:maintenance|Optional|
        | data:telemetry:vehicle:drivingBehavior|Optional|
        | data:telemetry:vehicle:alert|Optional|
        | data:telemetry:vehicle:alarm|Optional|
      operationId: getVehicleTripTelmetry
      parameters:
        - $ref: '#/components/parameters/vehicleId'
        - $ref: '#/components/parameters/tripId'
        - $ref: '#/components/parameters/timestamps'
        - $ref: '#/components/parameters/indexRange'
        - $ref: '#/components/parameters/telemetryType'
        - $ref: '#/components/parameters/orderBy'
      security:
        - api_oauth:
            - data:trip #Required
            - data:telemetry
            - data:telemetry:environment
            - data:telemetry:privacy
            - data:telemetry:vehicle
            - data:telemetry:vehicle:ignition
            - data:telemetry:vehicle:location
            - data:telemetry:vehicle:preconditioning
            - data:telemetry:vehicle:tyreState
            - data:telemetry:vehicle:energies
            - data:telemetry:vehicle:engines
            - data:telemetry:vehicle:doorsState
            - data:telemetry:vehicle:battery
            - data:telemetry:vehicle:safety
            - data:telemetry:vehicle:odometer
            - data:telemetry:vehicle:kinetic
            - data:telemetry:vehicle:propulsion
            - data:telemetry:vehicle:braking
            - data:telemetry:vehicle:wipingBlades
            - data:telemetry:vehicle:transmission
            - data:telemetry:vehicle:adas
            - data:telemetry:vehicle:lightingSystem
            - data:telemetry:vehicle:maintenance
            - data:telemetry:vehicle:drivingBehavior
            - data:telemetry:vehicle:alert
            - data:telemetry:vehicle:alarm
      responses:
        '200':
          $ref: '#/components/responses/TelemetrySuccessResponse'
        default:
          $ref: '#/components/responses/TelemetryFailedResponse'
  
  
  
  
  Vehicles_id_EcoCoaching_profiles_getter:
    get:
       summary: Retrieve the profiles used in the vehicle
       tags:
         - Trips
       description: |
        Retrieve the profiles used in the vehicle
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | data:trip|Required|
       operationId: getVehicleEcoCoachingProfiles
       parameters:
         - $ref: '#/components/parameters/vehicleId'
       security:
         - api_oauth:
             - data:trip
       responses:
         '200':
            description: profiles used in the vehicle.
            content:
              application/hal+json:
                schema:
                  $ref: '#/components/schemas/TripProfile'
         default:
            $ref: '#/components/responses/TripsSettingsFailedResponse' 
  Vehicles_id_EcoCoaching_suggestions_getter:
     get:
       summary: This API enables to retrieve the suggestions related to vehicle engine type
       tags:
         - Trips
       description: |
        This API enables to retrieve the suggestions related to vehicle engine type.
         |Scope Name |Mandatory State|
         |----------|:-------------:|
         | data:trip|Required|     
       operationId: getVehicleEcoCoachingSuggestions
       parameters:
         - $ref: '#/components/parameters/vehicleId'
       security:
         - api_oauth:
             - data:trip
       responses:
         '200':
            description: Array of suggestion objects.
            type: array
            content:
              application/hal+json:
                schema:
                  $ref: '#/components/schemas/TripSuggestions'
         default:
            $ref: '#/components/responses/TripFailedResponse'
  OffRoadPages_settings:
    put:
       summary: This API is used to get the trip details from the user channel
       tags:
         - Trips
       description: |
        This API is used to get the trip details from the user channel.
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | data:trip|Required|
       operationId: putVehicleOffroadPagesSessionId
       parameters:
         - $ref: '#/components/parameters/vehicleId'
         - $ref: '#/components/parameters/tripSessionId'
         - $ref: '#/components/parameters/segmentId'
         - $ref: '#/components/parameters/breadcrumbid'
       security:
        - api_oauth:
            - data:trip
       requestBody:
        content:
          application/hal+json:
            schema:
              $ref: '#/components/schemas/orpEditRequest'
       responses:
         '200':
            description: ORP settings configuration update Success
         default:
            $ref: '#/components/responses/TripsSettingsFailedResponse'    
    
    
  Vehicle_id_Trip_id_wayPoints_getter:
    get:
      summary: Path of trip
      tags:
        - Trips
      description: |
        Gives the Vehicle's wayPoints for a specified Trip.
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | data:trip|Required|
        | data:telemetry:vehicle:location|Required|
      operationId: getVehicleTripPath
      parameters:
        - $ref: '#/components/parameters/vehicleId'
        - $ref: '#/components/parameters/tripId'
        - $ref: '#/components/parameters/tripPropulsion'
        - $ref: '#/components/parameters/tripPosCtxKinetic'
        - $ref: '#/components/parameters/tolerence'
        - $ref: '#/components/parameters/indexRange'
        - $ref: '#/components/parameters/timestamps'
        - $ref: '#/components/parameters/orderBy'
      security:
        - api_oauth:
            - data:trip #Required
            - data:telemetry:vehicle:location #Required
      responses:
        '200':
          description: Path response
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/WayPoints'
        default:
          description: wayPoints not found
  Vehicle_id_Trip_id_Collisions_id_getter:
    get:
      summary: A collision happened for a given vehicle during a given trip
      tags:
        - Trips
      description: |
        Returns a single Collision(cid) that occurred for a given vehicle(id) during a Trip(tid).
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | data:trip|Required|
        | data:collision|Required|
        | data:telemetry:vehicle:ignition|Optional|
        | data:telemetry:vehicle:kinetic|Optional|
        | data:telemetry:vehicle:location|Optional|
      operationId: getVehicleCollisionByTipById
      parameters:
        - $ref: '#/components/parameters/vehicleId'
        - $ref: '#/components/parameters/tripId'
        - $ref: '#/components/parameters/collisionId'
      security:
        - api_oauth:
            - data:trip #Required
            - data:collision #Required
            - data:telemetry:vehicle:ignition
            - data:telemetry:vehicle:kinetic
            - data:telemetry:vehicle:location
      responses:
        '200':
          $ref: '#/components/responses/CollisionsuccessResponse'
        default:
          $ref: '#/components/responses/CollisionFailedResponse'
  Vehicle_id_Trip_id_Collisions_getter:
    get:
      summary: Collisions happened for a given vehicle during a given trip
      tags:
        - Trips
      description: |
        Returns the set of Collisions that occurred for a given vehicle (id) and a speific Trip (tid) during the timestamp ranges and bounded by an index range.
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | data:trip|Required|
        | data:collision|Required|
        | data:telemetry:vehicle:ignition|Optional|
        | data:telemetry:vehicle:kinetic|Optional|
        | data:telemetry:vehicle:location|Optional|
      operationId: getVehicleCollisionsByTripId
      parameters:
        - $ref: '#/components/parameters/vehicleId'
        - $ref: '#/components/parameters/tripId'
        - $ref: '#/components/parameters/timestamps'
        - $ref: '#/components/parameters/indexRange'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageToken'
        - $ref: '#/components/parameters/orderBy'
      security:
        - api_oauth:
            - data:trip #Required
            - data:collision #Required
            - data:telemetry:vehicle:ignition
            - data:telemetry:vehicle:kinetic
            - data:telemetry:vehicle:location
      responses:
        '200':
          $ref: '#/components/responses/CollisionsSuccessResponse'
        default:
          $ref: '#/components/responses/CollisionFailedResponse'
  Vehicle_id_Trip_id_Alerts_id_getter:
    get:
      summary: An alert for a given vehicle and trip
      tags:
        - Trips
      description: |
        Returns an  alert for a given Vehicle occured during a given trip and Trip.
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | data:trip|Required|
        | data:telemetry:vehicle:alert|Required|
        | data:telemetry:vehicle:location|Optional|
      operationId: getVehicleTripAlertByAid
      parameters:
        - $ref: '#/components/parameters/vehicleId'
        - $ref: '#/components/parameters/tripId'
        - $ref: '#/components/parameters/alertId'
      security:
        - api_oauth:
            - data:trip #Required
            - data:telemetry:vehicle:alert #Required
            - data:telemetry:vehicle:location
      responses:
        '200':
          $ref: '#/components/responses/AlertsucessResponse'
        default:
          $ref: '#/components/responses/AlertFailedResponse'
  Vehicle_id_Trip_id_Alerts_getter:
    get:
      summary: Alerts for a given trip.
      tags:
        - Trips
      description: |
        Returns the alert messages for a Vehicle occurend during a trip.
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | data:trip|Required|
        | data:telemetry:vehicle:alert|Required|
        | data:telemetry:vehicle:location|Optional|
      operationId: getVehicleTripAlerts
      parameters:
        - $ref: '#/components/parameters/vehicleId'
        - $ref: '#/components/parameters/tripId'
        - $ref: '#/components/parameters/activeAlert'
        - $ref: '#/components/parameters/timestamps'
        - $ref: '#/components/parameters/indexRange'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageToken'
        - $ref: '#/components/parameters/orderBy'
  
      security:
        - api_oauth:
            - data:trip #Required
            - data:telemetry:vehicle:alert #Required
            - data:telemetry:vehicle:location
      responses:
        '200':
          $ref: '#/components/responses/AlertsuccessResponses'
        default:
          $ref: '#/components/responses/AlertFailedResponse'
  Vehicle_id_Trip_id:
    get:
      summary: Get a vehicle trip
      tags:
        - Trips
      description: |
        This method returns the Trip that matches the Trip id (tid) for a given Vehicle (id).
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | data:trip|Required|
        | data:telemetry:environment|Optional|
        | data:telemetry:vehicle:location|Optional|
        | data:telemetry:vehicle:energies|Optional|
        | data:telemetry:vehicle:kinetic|Optional|
      operationId: getVehicleTripById
      parameters:
        - $ref: '#/components/parameters/vehicleId'
        - $ref: '#/components/parameters/tripId'

      security:
        - api_oauth:
            - data:trip #Required
            - data:telemetry:environment
            - data:telemetry:vehicle:location
            - data:telemetry:vehicle:energies
            - data:telemetry:vehicle:kinetic
      responses:
        '200':
          $ref: '#/components/responses/TripsucessResponse'
        default:
          $ref: '#/components/responses/TripFailedResponse'
  Vehicle_id_Trips:
    get:
      summary: Get a vehicle trips
      tags:
        - Trips
      description: |
        This method returns a list of all Trips that a given Vehicle has taken (including the pending one if available).
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | data:trip|Required|
        | data:telemetry:environment|Optional|
        | data:telemetry:vehicle:location|Optional|
        | data:telemetry:vehicle:energies|Optional|
        | data:telemetry:vehicle:kinetic|Optional|
      operationId: getVehicleTrips
      parameters:
        - $ref: '#/components/parameters/vehicleId'
        - $ref: '#/components/parameters/tripState'
        - $ref: '#/components/parameters/tripType'
        - $ref: '#/components/parameters/tripStatsKinetic'
        - $ref: '#/components/parameters/tripPropulsion'
        - $ref: '#/components/parameters/tripDistance'
        - $ref: '#/components/parameters/tripDuration'
        - $ref: '#/components/parameters/timestamps'
        - $ref: '#/components/parameters/indexRange'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageToken'
        - $ref: '#/components/parameters/orderBy'
      security:
        - api_oauth:
            - data:trip #Required
            - data:telemetry:environment
            - data:telemetry:vehicle:location
            - data:telemetry:vehicle:energies
            - data:telemetry:vehicle:kinetic
      responses:
        '200':
          $ref: '#/components/responses/TripsSuccessResponses'
        default:
          $ref: '#/components/responses/TripFailedResponse'
  Vehicle_id_chargeSessions:
    get:
      summary: Get a vehicle charge sessions.
      tags:
        - Vehicles
      description: |
        This method returns charing sessions of a vehicle (including the ongoing one if available).
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | data:telemetry:vehicle:energies|Required|
        | data:telemetry:vehicle:location|Optional|
      operationId: getVehicleChargeSessions
      parameters:
        - $ref: '#/components/parameters/vehicleId'
        - $ref: '#/components/parameters/state'
        - $ref: '#/components/parameters/chargingPower'
        - $ref: '#/components/parameters/chargingLevel'
        - $ref: '#/components/parameters/chargingAutonomy'
        - $ref: '#/components/parameters/duration'
        - $ref: '#/components/parameters/timestamps'
        - $ref: '#/components/parameters/indexRange'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageToken'
        - $ref: '#/components/parameters/orderBy'
      security:
        - api_oauth:
            - data:telemetry:vehicle:location
            - data:telemetry:vehicle:energies #Required
      responses: 
        '200':
          $ref: '#/components/responses/ChargeSessionsSuccessResponses'
        default:
          $ref: '#/components/responses/ChargeSessionsFailedResponse'
  Vehicle_id_ChargeSession_id:
    get:
      summary: Get a vehicle charge session.
      tags:
        - Vehicles
      description: |
        This method returns the vehicle charge session that matches the session id (sid) for a given Vehicle (id).
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | data:telemetry:vehicle:location|Optional|
        | data:telemetry:vehicle:energies|Required|
      operationId: getVehicleChargeSessionById
      parameters:
        - $ref: '#/components/parameters/vehicleId'
        - $ref: '#/components/parameters/chargeSessionId'
      security:
        - api_oauth:
            - data:telemetry:vehicle:location
            - data:telemetry:vehicle:energies #Required
      responses:
        '200':
          $ref: '#/components/responses/ChargeSessionResponse'
        default:
          $ref: '#/components/responses/ChargeSessionFailedResponse'
  Vehicle_id_cb_id_monitors_get_post:
    get:
      tags:
        - Monitors
      summary: Get all monitors.
      description: |
        Returns the list of subscribed Monitors.
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | monitor:write|Optional|
        | monitor|Optional|
      operationId: getVehicleMonitors
      parameters:
        - $ref: '#/components/parameters/channelId'
      security:
        - api_oauth:
            - monitor:write
            - monitor
      responses:
        '200':
          $ref: '#/components/responses/MonitorsuccessResponses'
        default:
          $ref: '#/components/responses/MonitorFailedResponse'
    post:
      tags:
        - Monitors
      summary: Create a new Monitor.
      description: |
        Create a Monitor for a Vehicle(s). So it will generate an event following the transition state as defined by the monitor trigger parameter logical expression of vehicle data (like _fuel level_), activity time (like _periode_) and GPS position (_moving out of a defined geographical area_) predicates.


          * When the trigger occurs, the built event expressed as a JSON (definied in the Event template Specification) object will be sent over the subscribed channel.
          
          
          * All necessary OAuth2 scopes (defined by this API) to satisfy to monitor triggers must be granted when creating the monitor. Scopes involving data triggers are mandatory (see triggers scopes definition) while those of extensions are optional. This means that the missed scope will prevent the associated extension from being defined.
          
          * Note: Max. 5 no. of monitors are allowed per account.
          * Note: Max. Max 1 monitor is allowed per account for  trigger of type settings
          
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | monitor:write|Required|
      operationId: postVehicleMonitors
      parameters:
        - $ref: '#/components/parameters/channelId'
      security:
        - api_oauth:
            - monitor:write #Required
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MonitorParameter'
      responses:
        '202':
          $ref: '#/components/responses/MonitorsuccessPostResponse'
        default:
          $ref: '#/components/responses/MonitorFailedResponse'
  Vehicle_id_cb_id_monitors_mid_crud:
    put:
      tags:
        - Monitors
      summary: Update an existing Monitor.
      description: |
        Update an existing ```Monitor``` that has been posted (and accepted previously) for this vehicle. The monitor object (body) provided should be complete (the aggregation is not supported for the update of the ```monitor```). 
        You can first retrieve this object using the ```GET /monitor/{mid}``` API, then modify it and finally publish it (via this ```PUT API```).
        
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | monitor:write|Required|
      operationId: putVehicleMonitors
      parameters:
        - $ref: '#/components/parameters/channelId'
        - $ref: '#/components/parameters/monitorId'
      security:
        - api_oauth:
            - monitor:write #Required
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MonitorParameter'
      responses:
        '202':
           $ref: '#/components/responses/MonitorsuccessPutResponse'
        default:
          $ref: '#/components/responses/MonitorFailedResponse'
    get:
      tags:
        - Monitors
      description: |
        Returns information about a specific Monitor.
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | monitor:write|Optional|
        | monitor|Optional|
      summary: Get the monitor by monitor Id.
      operationId: getVehicleMonitorByID
      parameters:
        - $ref: '#/components/parameters/channelId'
        - $ref: '#/components/parameters/monitorId'
      security:
        - api_oauth:
            - monitor:write
            - monitor
      responses:
        '200':
          $ref: '#/components/responses/MonitorsuccessResponse'
        default:
          $ref: '#/components/responses/MonitorFailedResponse'
    delete:
      tags:
        - Monitors
      summary: Delete an existing Monitor.
      description: |
        Stop (disable) an existing Monitor.
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | monitor:write|Required|
      operationId: deleteVehicleMonitorByID
      parameters:
        - $ref: '#/components/parameters/channelId'
        - $ref: '#/components/parameters/monitorId'
      security:
        - api_oauth:
            - monitor:write #Required
      responses:
        '204':
          description: Monitor deleted (the response does not include an entity).
        '400':
          description: Invalid ID supplied
        '404':
          description: Monitor not found
  ch_id_monitor_id_setter_put:
    put:
      tags:
        - Monitors
      summary: Set a new monitor status.
      description: |
        Set monitor status.
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | monitor:write|Required|
      operationId: setVehicleMonitorStatus
      parameters:
        - $ref: '#/components/parameters/channelId'
        - $ref: '#/components/parameters/monitorId'
      security:
        - api_oauth:
            - monitor:write #Required
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MonitorStatusSetter'
      responses:
        '202':
         $ref: '#/components/responses/MonitorsuccessPutResponse'
        default:
          $ref: '#/components/responses/MonitorFailedResponse'
  ch_id_monitor_id_handles:
    put:
      tags:
        - Monitors
      summary: Set Monitor handled vehicles.
      description: |
        Add or remove vehicles handled by the monitor.
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | monitor:write|Required|
      operationId: setVehicleMonitorHandles
      parameters:
        - $ref: '#/components/parameters/channelId'
        - $ref: '#/components/parameters/monitorId'
      security:
        - api_oauth:
            - monitor:write #Required
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HandleSetter'
      responses:
        '202':
          $ref: '#/components/responses/MonitorHandleRefSuccessResponses'
        default:
          $ref: '#/components/responses/MonitorFailedResponse'
    get:
      tags:
        - Monitors
      summary: Get Monitor handled vehicles.
      description: |
        Expose vehicles handled by the monitor.
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | monitor:read|Required|
      operationId: getVehicleMonitorGroupsHandles
      parameters:
        - $ref: '#/components/parameters/channelId'
        - $ref: '#/components/parameters/monitorId'
        - $ref: '#/components/parameters/vinPrefix'
        - $ref: '#/components/parameters/indexRange'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageToken'        
      security:
        - api_oauth:
            - monitor:read #Required
      responses:
        '200':
          $ref: '#/components/responses/MonitorHandlesSuccessResponses'
        default:
          $ref: '#/components/responses/MonitorFailedResponse'  
  ch_id_monitor_id_handles_Groups_Getter:
    get:
      tags:
        - Monitors
      summary: Get Monitor handled groups.
      description: |
        Expose vehicle groups handled by the monitor.
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | monitor|Required|
      operationId: getVehicleMonitorGroups
      parameters:
        - $ref: '#/components/parameters/channelId'
        - $ref: '#/components/parameters/monitorId'
        - $ref: '#/components/parameters/groupPrefix'
        - $ref: '#/components/parameters/indexRange'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageToken'        
      security:
        - api_oauth:
            - monitor:read #Required
      responses:
        '200':
          $ref: '#/components/responses/GroupsOfGroupSuccessResponse'
        default:
          $ref: '#/components/responses/MonitorHandlesVinsFailedResponse'         
  channels_crud:
    get:
      tags:
        - Channels
      summary: Get all channels.
      description: |
        Returns the list of subscribed channels.
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | channel|Optional|
        | channel:write|Optional|
      operationId: getChannels
      parameters:
        - $ref: '#/components/parameters/channelType'
      security:
        - api_oauth:
            - channel
            - channel:write
      responses:
        '200':
          $ref: '#/components/responses/ChannelSuccessResponses'
        default:
          $ref: '#/components/responses/ChannelFailedResponse'
    post:
      tags:
        - Channels
      summary: Register a new reusable channel.
              
      description: | 
        Create a new reusable channel.
        * Note: Max. 5 no. of channels are allowed per account.
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | channel:write|Required|
      
      operationId: postChannels
      security:
        - api_oauth:
            - channel:write #Required
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelSubscribe'
      responses:
        '200':
          $ref: '#/components/responses/channelSuccessPostResponse'
        default:
          $ref: '#/components/responses/ChannelFailedResponse'
  channel_id_crud:
    put:
      tags:
        - Channels
      summary: Update an existing  channel.
      description: |
        Update an existing ```channel``` that has been posted (and accepted previously). The channel object (body) provided should be complete (aggregation is not supported for the update). This object can be retrieved  using the ```GET /remote/channels/{chId}``` API then modify it and finally publish it (via this ```PUT API```). Channel type (pushnotif/webhhok/webscoket) cannot he changed. It should be similar to when channel was created
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | channel:write|Required|
      operationId: putChannelsById
      parameters:
        - $ref: '#/components/parameters/channelId'
      security:
        - api_oauth:
            - channel:write #Required
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelSubscribe'
      responses:
        '202':
          $ref: '#/components/responses/channelSuccessPostResponse'
        default:
          $ref: '#/components/responses/ChannelFailedResponse'
    get:
      tags:
        - Channels
      summary: Get a channel.
      description: |
        Returns a subscribed channel by subscribe ID.
        |Scope Name Mandatory State|
        |----------|:-------------:|
        | channel|Optional|
        | channel:write|Optional|
      operationId: getChannelsById
      parameters:
        - $ref: '#/components/parameters/channelId'
      security:
        - api_oauth:
            - channel
            - channel:write
      responses:
        '200':
          $ref: '#/components/responses/channelSuccessResponse'
        default:
          $ref: '#/components/responses/ChannelFailedResponse'
    delete:
      tags:
        - Channels
      summary: Delete an existing channel.
      description: |
        Note: A channel wouldn't be allowed to delete  if its attached remotes are in pending state or monitors in running state.
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | channel:write|Required|
      operationId: deleteChannelsById
      parameters:
        - $ref: '#/components/parameters/channelId'
      security:
        - api_oauth:
            - channel:write #Required
      responses:
        '204':
          description: channel deleted (the response does not include an entity)
        '400':
          description: Invalid ID supplied
        '404':
          description: channel not found
  channel_id_status_put:
    put:
      tags:
        - Channels
      summary: Set an existing channel new status.
      description: |
        Set the channel status.```Paused``` means that the channel will not post any event.
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | channel:write|Required|
      operationId: setChannelStatus
      parameters:
        - $ref: '#/components/parameters/channelId'
      security:
        - api_oauth:
            - channel:write #Required
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelStatusSetter'
      responses:
        '202':
          $ref: '#/components/responses/channelSuccessPostResponse'
        default:
          $ref: '#/components/responses/ChannelFailedResponse'
  Vehicle_id_channel_id_remotes_crud:
    post:
      tags:
        - Remotes
      summary: Send a remote action to a vehicle.
      description: |
        Create a new asynchrone vehicle remote action and request it.
        The REMOTE action is specified by the Remote object which offers a set of possible actions (locking, horn,lights,preconditioning,onboardPersonalData, charging, stolen, wakeup, navigation, vehicleFinder, immobilization). 

        The remote resource creation is also related to a channel that will serve as a remote action result event callback.
         
         However, each remote action needs a different permissions set.
          This API has therefore defined a set of SCOPE OAUTH2 to cover all possible actions. But the API caller should only have the SCOPEs necessary for the action his is requesting for. The necessary scopes  for each action are defined as follows:
          
        |<b>Remote action</b>|<b>Scope</b>|<b>Mandatory</b>| 
        |---|---|---|
        |locking|remote:locking:write|Optional|
        |horn| remote:horn:write|Optional|
        |lights | remote:lights:write|Optional|
        |preconditioning| remote:preconditioning:write|Optional|
        |onboardPersonalData| remote:onboardPersonalData:write|Optional|
        |charging| remote:charging:write|Optional|
        |wakeup| remote:wakeup:write|Optional|
        |navigation| remote:navigation:write|Optional|
        |vehicleFinder| remote:vehicleFinder:write|Optional|
         The backend server will introspect the OAuth2 provided token and check if it contains the necessary scope authorization to perform the requested remote action. or raise an unauthorized error status.
      operationId: sendVehicleRemotes
      security:
        - api_oauth:
            - remote:locking:write
            - remote:horn:write
            - remote:lights:write
            - remote:preconditioning:write
            - remote:onboardPersonalData:write
            - remote:charging:write
            - remote:wakeUp:write
            - remote:navigation:write
            - remote:vehicleFinder:write
 
      parameters:
        - $ref: '#/components/parameters/vehicleId'
        - $ref: '#/components/parameters/channelId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Remote'
      responses:
        '202':
          $ref: '#/components/responses/RemoteActionsSuccessPostResponse'
        '501':
          $ref: '#/components/responses/RemoteFeatureNotSupportedResponse'
        default:
          $ref: '#/components/responses/ChannelFailedResponse'
    get:
      tags:
        - Remotes
      summary: Get all remote action of vehicle and channel.
      description: |
        Returns the list of remote action requested for vehicle in desc order
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | remote|Optional|
        | remote:locking|Optional|
        | remote:locking:write|Optional|
        | remote:horn|Optional|
        | remote:horn:write|Optional|
        | remote:lights|Optional|
        | remote:lights:write|Optional|
        | remote:preconditioning|Optional|
        | remote:preconditioning:write|Optional|
        | remote:onboardPersonalData|Optional|
        | remote:onboardPersonalData:write|Optional|
        | remote:charging|Optional|
        | remote:charging:write|Optional|
        | remote:wakeUp|Optional|
        | remote:wakeUp:write|Optional|
        | remote:navigation|Optional|
        | remote:navigation:write|Optional|
        | remote:vehicleFinder|Optional|
        | remote:vehicleFinder:write|Optional|
        
      operationId: getVehicleRemotes
      security:
        - api_oauth:
            - remote
            - remote:locking
            - remote:locking:write
            - remote:horn
            - remote:horn:write
            - remote:lights
            - remote:lights:write
            - remote:preconditioning
            - remote:preconditioning:write
            - remote:onboardPersonalData
            - remote:onboardPersonalData:write
            - remote:charging
            - remote:charging:write
            - remote:wakeUp
            - remote:wakeUp:write
            - remote:navigation
            - remote:navigation:write
            - remote:vehicleFinder
            - remote:vehicleFinder:write

      parameters:
        - $ref: '#/components/parameters/vehicleId'
        - $ref: '#/components/parameters/channelId'
        - $ref: '#/components/parameters/indexRange'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageToken'
      responses:
        '200':
          $ref: '#/components/responses/RemoteActionSuccessResponses'
        default:
          $ref: '#/components/responses/ChannelFailedResponse'
  Vehicle_id_channel_id_remotes_id_getter:
    get:
      tags:
        - Remotes
      summary: Get remote action by id.
      description: |
        Returns the remote action requested for vehicle by ID.
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | remote|Optional|
        | remote:locking|Optional|
        | remote:locking:write|Optional|
        | remote:horn|Optional|
        | remote:horn:write|Optional|
        | remote:lights|Optional|
        | remote:lights:write|Optional|
        | remote:preconditioning|Optional|
        | remote:preconditioning:write|Optional|
        | remote:onboardPersonalData|Optional|
        | remote:onboardPersonalData:write|Optional|
        | remote:charging|Optional|
        | remote:charging:write|Optional|
        | remote:wakeUp|Optional|
        | remote:wakeUp:write|Optional|
        | remote:navigation|Optional|
        | remote:navigation:write|Optional|
        | remote:vehicleFinder|Optional|
        | remote:vehicleFinder:write|Optional|
      operationId: getVehicleRemoteById
      security:
        - api_oauth:
            - remote
            - remote:locking
            - remote:locking:write
            - remote:horn
            - remote:horn:write
            - remote:lights
            - remote:lights:write
            - remote:preconditioning
            - remote:preconditioning:write
            - remote:onboardPersonalData
            - remote:onboardPersonalData:write
            - remote:charging
            - remote:charging:write
            - remote:wakeUp
            - remote:wakeUp:write
            - remote:navigation
            - remote:navigation:write
            - remote:vehicleFinder
            - remote:vehicleFinder:write

      parameters:
        - $ref: '#/components/parameters/vehicleId'
        - $ref: '#/components/parameters/channelId'
        - $ref: '#/components/parameters/remoteId'
      responses:
        '200':
          $ref: '#/components/responses/RemoteActionSuccessResponse'
        '501':
          $ref: '#/components/responses/RemoteFeatureNotSupportedResponse'
        default:
          $ref: '#/components/responses/ChannelFailedResponse'
  Vehicle_id_service_id_getter:
    get:
      tags:
        - Remotes
      summary: Gets last remote operation status having the input serviceid
      description: |
        Gets last remote operation status having the input serviceid
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | data:vehicle|Optional|
        | channel|Optional|
        | remote|Optional|
      parameters:
        - $ref: '#/components/parameters/vin'
        - $ref: '#/components/parameters/serviceId'
      security:
        - api_oauth:
            - data:vehicle
            - channel
            - remote
      responses:
        '200':
          $ref: '#/components/responses/RemoteLastStatusSuccessResponse'
        default:
          $ref: '#/components/responses/ChannelFailedResponse'
  Service_id_getter:
    get:
      tags:
        - Remotes
      summary: Gets last remote operation status for multiple vin
      description: |
        Gets last remote operation status for multiple vin
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | data:vehicle|Optional|
        | channel|Optional|
        | remote|Optional|
      parameters:
        - $ref: '#/components/parameters/serviceId'
      security:
        - api_oauth:
            - data:vehicle
            - channel
            - remote
      responses:
        '200':
          $ref: '#/components/responses/RemoteLastStatusSuccessResponse'
        default:
          $ref: '#/components/responses/ChannelFailedResponse'
  Vehicle_id_theft_status_confirmer:
    post:
      tags:
        - Remotes
      summary: This API status of the vehicle if is stolen or not
      description: |
        This API status of the vehicle if is stolen or not
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | data:vehicle|Optional|
        | channel|Optional|
        | remote|Optional|
      parameters:
        - $ref: '#/components/parameters/vin'
      security:
        - api_oauth:
            - data:vehicle
            - channel
            - remote
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TANConfirmRequest'
      responses:
        '200':
          $ref: '#/components/responses/RemoteTheftStatusSuccessResponse'
        default:
          $ref: '#/components/responses/ChannelFailedResponse'
  Vehicle_id_theft_status_getter:
    get:
      tags:
        - Remotes
      summary: This API status of the vehicle if is stolen or not
      description: This API status of the vehicle if is stolen or not
      parameters:
        - $ref: '#/components/parameters/vin'
      security:
        - api_oauth:
            - data:vehicle
            - channel
            - remote
      responses:
        '200':
          $ref: '#/components/responses/RemoteTheftStatusSuccessResponse'
        default:
          $ref: '#/components/responses/ChannelFailedResponse'
  ch_id_ds_id_handle:
    put:
      tags:
        - Datastream
      summary: Handle groups or vehicles.
      description: Add or remove groups or vehicles handled by the a data stream.
      operationId: putChannelDatastreamByIDHandle
      parameters:
        - $ref: '#/components/parameters/channelId'
        - $ref: '#/components/parameters/datastreamId'
      security:
        - api_oauth:
            - datastream:write #Required
            - grouping:write #Required
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HandleSetter'
      responses:
        '202':
          $ref: '#/components/responses/DatastreamSuccessResponse'
        default:
          $ref: '#/x-fragment/general_error_fragment'
  Vehicle_id_alarms_getter:
    get:
      tags:
        - Vehicles
      description: |
        Returns a (filtered) list of alarm for a Vehicle.
        *Note:* Timestamp filtering concerns the creation date for status or trigger.
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | data:telemetry:vehicle:alarm|Required|
      summary: Search for Vehicle's Alarms
      operationId: getVehicleAlarms
      parameters:
        - $ref: '#/components/parameters/vehicleId'
        - $ref: '#/components/parameters/alarmType'
        - $ref: '#/components/parameters/timestamps'
        - $ref: '#/components/parameters/indexRange'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageToken'
        - $ref: '#/components/parameters/orderBy'
      security:
        - api_oauth:
            - data:telemetry:vehicle:alarm #Required
      responses:
        '200':
          $ref: '#/components/responses/AlarmSuccessResponses'
        default:
          $ref: '#/components/responses/AlarmFailedResponse'
  Vehicle_id_alarm_aid_getter:
    get:
      tags:
        - Vehicles
      description: |
        Returns information about a specific alarm for a Vehicle.
        |Scope Name |Mandatory State|
        |----------|:-------------:|
        | data:telemetry:vehicle:alarm|Required|
      summary: Vehicle's Alarm
      operationId: getVehicleAlarmsById
      parameters:
        - $ref: '#/components/parameters/vehicleId'
        - $ref: '#/components/parameters/alarmId'
      security:
        - api_oauth:
            - data:telemetry:vehicle:alarm #Required
      responses:
        '200':
          $ref: '#/components/responses/AlarmSucessResponse'
        default:
          $ref: '#/components/responses/AlarmFailedResponse'
  general_error_fragment:
    content:
      application/json:
        schema:
          $ref: '#/components/schemas/xError'
  501__remote_notsupported_error_fragment:
    content:
      application/json:
        schema:
          $ref: '#/components/schemas/501RemoteError'
  501__feature_notsupported_error_fragment:
    content:
      application/json:
        schema:
          $ref: '#/components/schemas/FeatureNotSupportedError'
  404_data_notfound_error_fragment:
    content:
      application/json:
        schema: 
          $ref: '#/components/schemas/DataNotFoundError'

  Vehicle_id_alarm_disable_post:
    post:
      tags:
        - Vehicles
      description: This API is used to temporarily disable the theft alarm notifications
      summary: Vehicle's TAN Alarm disabile
      operationId: postVehicleTanAlarmDisable
      parameters:
        - $ref: '#/components/parameters/vehicleId'
      security:
        - api_oauth:
            - alert_read
            - vehicle_read
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlarmDisableRequest'
      responses:
        '200':
          $ref: '#/components/responses/AlarmDisableSuccessResponse'
        default:
          $ref: '#/components/responses/AlarmDisableFailedResponse'
  Vehicle_id_alarm_status_getter:
    get:
      tags:
        - Vehicles
      description: This API is used to get the TAN Alarm Status
      summary: Vehicle's TAN Alarm status
      operationId: postVehicleTanAlarmDisable
      parameters:
        - $ref: '#/components/parameters/vehicleId'
      security:
        - api_oauth:
            - alert_read
            - vehicle_read
      responses:
        '200':
          $ref: '#/components/responses/AlarmDisableSuccessResponse'
        default:
          $ref: '#/components/responses/AlarmDisableFailedResponse'
  Vehicle_id_alarm_confirm_post:
    post:
      tags:
        - Vehicles
      description: This API confirm if the vehicle is stolen or not
      summary: Vehicle's TAN Alarm confirmation
      operationId: postVehicleTanAlarmconfirmation
      parameters:
        - $ref: '#/components/parameters/vehicleId'
        - $ref: '#/components/parameters/tanConfirm'
      security:
        - api_oauth:
            - alert_read
            - vehicle_read
      responses:
        '200':
          $ref: '#/components/responses/AlarmTheftConfirmResponse'
        default:
          $ref: '#/components/responses/AlarmTheftconfirmFail'
  Vehicle_id_stolen_reports_getter:
    get:
      tags:
        - Vehicles
      description: Returns  list of stolen state report of a vehicle.
      summary: Vehicle's stolen reports history.
      operationId: getVehicleStolenHistory
      parameters:
        - $ref: '#/components/parameters/vehicleId'
        - $ref: '#/components/parameters/timestamps'
        - $ref: '#/components/parameters/indexRange'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageToken'
      responses:
        '200':
          $ref: '#/components/responses/StolenSuccessResponses'
        default:
          $ref: '#/components/responses/StolenFailedResponse'
          
  Vehicle_id_stolen_id_report_getter:
    get:
      tags:
        - Vehicles
      description: Returns information about a specific stolen report for a vehicle.
      summary: Vehicle's stolen state report.
      operationId: getVehicleStolenById
      parameters:
        - $ref: '#/components/parameters/vehicleId'
        - $ref: '#/components/parameters/stolenId'
      responses:
        '200':
          $ref: '#/components/responses/StolenSucessResponse'
        default:
          $ref: '#/components/responses/StolenFailedResponse'
  
  Vehicle_id_stolen_id_report_waypoints_getter:
    get:
      tags:
        - Vehicles
      description: Returns the reported positions of the vehicle associated with a stolen state report.
      summary: Vehicle's stolen position.
      operationId: getVehicleStolenIdPosition
      parameters:
        - $ref: '#/components/parameters/vehicleId'
        - $ref: '#/components/parameters/stolenId'
        - $ref: '#/components/parameters/timestamps'
        - $ref: '#/components/parameters/indexRange'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageToken'
      responses:
        200:
          description: Stolen position response.
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/StolenWayPoints'
        default:
          description: wayPoints not found           