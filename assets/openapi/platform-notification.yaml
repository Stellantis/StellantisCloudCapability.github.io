openapi: 3.0.0
servers:
    - url: 'https://client.base.uri/root'
info:
    version: '1.0'
    title: Stellantis Connected Car API
    description: |
        # Event Notification Message template
        ---

        ## Introduction
        This is the description of the *Stellantis Connected Car API* notification message and API (WebHook feature). The specification. It  is based on **OpenAPI Specification version 3** and can be displayed via [ReDoc](https://github.com/Rebilly/ReDoc) or [Swagger](http://swagger.io).

        ## Authentication
          The security scheme is managed by the subscription and is set,in the webhook notification case, by adding header entry (authorization) during the subscription to the notification feature (remote or monitor).

        ---

    license:
        name: Stellantis Licence
        url: https://www.psa-peugeot-citroen.com/

tags:
    - name: Message Webhook
      description: Message model sent through webhook.

    - name: Message Push-Notif
      description: Message model sent through webhook .
paths:
    '/messages/webhook':
        post:
            tags:
                - Message Webhook
            summary: Post a list of messages.
            description: |
                Post a list of message (*raised by a registered remote or monitor*).
            operationId: postWHMsgs
            parameters:
                - $ref: '#/components/parameters/headerAttribute'
                - $ref: '#/components/parameters/queryAttribute'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Message'
            responses:
                201:
                    description: Post Ok.
                default:
                    $ref: '#/components/responses/PostErrorResponse'

    '/messages/pushnotif':
        post:
            tags:
                - Message Push-Notif
            summary: Post a list of messages.
            description: |
                Post a list of message (*raised by a registered remote or monitor*) using FCM (Firebase Cloud Messaging) push notification service.  [Basic notification](https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#Notification) template supported by all platforms is used as output message schema.

                _Notes:_

                * The event message  (see below) will be set in the "data" part of the notification. However,
                this message being a JSON Object in text representation,
                will be encoded in base64 coding in order to embeed it in the push-notif FCM message body with "**message**" key.

                JSON representation of the basic template.

                     {
                      "name": string,
                      "data": {
                        string: string,
                        message: base64String //  event message (see below) body encoded in base64
                        ...
                      },
                      "notification": {
                        "title": string,
                        "body": string,
                        "image": string
                      }
                     }

                | <b>Field</b>  | <b>Description & mapping</b>  |
                |---|---|
                |name| name of the channel that raises the event (see IoT API for more details)|
                |data| map of key/values pairs that includes cb-header & message headers attribute (sent when subscribing the channel or creating monitor or posting a remote |
                |notification.title| title of notification, will be mapped on the label of the remote or the monitor|
                |notification.body| will contains the message payload|
                |notification.image| mapping is not supported by the current version|
            operationId: postPNMsgs

            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Message'
            responses:
                201:
                    description: Post Ok.
                default:
                    $ref: '#/components/responses/PostErrorResponse'
    '/messages/websocket':
        post:
            tags:
                - Websocket outbound stream
            summary: Post a list of messages.
            description: |
                Post a list of message (*raised by a registered remote or monitor*) through websocket channel.


                * Only basic permission is supported.
                * The username/password pair is provided in the subscription API attributes.
                * Protocol type must be WSS.
            operationId: postWSMsgs
            parameters:
                - $ref: '#/components/parameters/headerAttribute'
                - $ref: '#/components/parameters/queryAttribute'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Message'
            responses:
                201:
                    description: Post Ok.
                default:
                    $ref: '#/components/responses/PostErrorResponse'

components:
    securitySchemes:
        basicAuth:     # <-- arbitrary name for the security scheme
            type: http
            scheme: basic
    schemas:
        Attributes:
            type: array
            description: >-
                Additional attribute set that was defined as 'body' attribute type when registering the monitor (a set of key / values)
            items:
                type: object
                properties:
                    key:
                        type: string
                    value:
                        type: string
                required:
                    - key
                    - value

        Message:
            title: Message
            description: |
                Message can be a remote or monitor event.
            type: object
            properties:
                channelId:
                    $ref: '#/components/schemas/ChannelId'
                attributes:
                    $ref: '#/components/schemas/Attributes'

                type:
                    type: string
                    enum: [Monitor, Remote]

                date:
                    description: The date on which the message was raised/built.
                    type: string
                    format: dateTime
                monitorEvent:
                    $ref: '#/components/schemas/MonitorEvent'
                remoteEvent:
                    $ref: '#/components/schemas/RemoteEvent'
            required: [channelId,type,date]

        Values:
            type: array
            description: Values that caused the trigger. If subscribed monitor trigger is not a compound one then the array will contain only one item.
            items:
                type: object
                description: Values pairs that caused the event.
                properties:
                    data:
                        type: string
                        enum:
                            - vehicle.alert
                            - vehicle.odometer
                            - vehicle.engines.running
                            - vehicle.engines.thermic.oil.temp
                            - vehicle.energy.electric.level
                            - vehicle.energy.electric.autonomy
                            - vehicle.energy.fuel.level
                            - vehicle.energy.fuel.autonomy
                            - vehicle.autonomy
                            - vehicle.energy.charging.status
                            - vehicle.energy.charging.plugged
                            - vehicle.doorsState.lockedState
                            - vehicle.doorsState.opening
                            - vehicle.kinetic.moving
                            - vehicle.kinetic.speed
                            - vehicle.maintenance.daysBeforeMaintenance
                            - vehicle.maintenance.mileageBeforeMaintenance
                            - vehicle.safety.beltWarning
                            - vehicle.safety.autoECallTriggering
                            - environment.air.temp
                            - privacy.state
                            - vehicle.drivingBehavior.mode
                            - vehicle.collision.side
                            - vehicle.collision.severity
                            - vehicle.preconditioning.airConditioning
                            - vehicle.alarm.trigger.type
                            - vehicle.alarm.status.activation
                            - vehicle.trip.start
                            - vehicle.trip.stop
                            - stolen.state
                        description: The monitored data (operand of a trigger).
                    value:
                        description: Values that fired the trigger. Could be a list of data values in case of 'includedIn' operation is used
                        type: object
                        properties:
                            type:
                                type: string
                                enum: [string, obj.alert]
                            body:
                                type: object
                                properties:
                                    literalValue:
                                        type: string
                                        description: A literal representation of the primitive data value. The client application should be aware of that and should convert it regarding the trigger data type.
                                    objectValues:
                                        type: array
                                        items:
                                            type: object
                                            description: For this object schema definition (based on the type of field), refere to the API Spec definition.
                                    previous:
                                        description: Previous value of the data that fired the transition state from previous to the current (value) one. This field will be filled if and only if it was definied in the monitor parameter (previous section). It exposes only the literal representation of the primitive or enum data value (see monitor creation SPEC).
                                        type: string
        MonitorEvent:
            title: MonitorEvent
            type: object
            properties:
                monitorId:
                    $ref: '#/components/schemas/MonitorId'
                values:
                    allOf:
                        - $ref: '#/components/schemas/Values'
                        - deprecated: true
                extensions:
                    allOf:
                        - $ref: '#/components/schemas/Extensions'
                        - deprecated: true
                refresh:
                    description: |
                        Indicates whether the event is a refresh (reminder) one or not.
                        * ```false``` means entering the context of the trigger (1st time the trigger valued true).
                        * ```true``` means this is it a reminder event (already within trigger satisfied context).
                    type: boolean
                    deprecated: true
                data:
                    type: object
                    properties:
                        values:
                            type: array
                            description: Values that caused the trigger. If subscribed monitor trigger is not a compound one then the array will contain only one item.
                            items:
                                required:
                                    - data
                                type: object
                                description: Values pairs that caused the event.
                                properties:
                                    data:
                                        type: string
                                        enum:
                                            - vehicle.alert
                                            - vehicle.odometer
                                            - vehicle.engines.running
                                            - vehicle.engines.thermic.oil.temp
                                            - vehicle.energy.electric.level
                                            - vehicle.energy.electric.autonomy
                                            - vehicle.energy.fuel.level
                                            - vehicle.energy.fuel.autonomy
                                            - vehicle.autonomy
                                            - vehicle.energy.charging.status
                                            - vehicle.energy.charging.plugged
                                            - vehicle.doorsState.lockedState
                                            - vehicle.doorsState.opening
                                            - vehicle.kinetic.moving
                                            - vehicle.kinetic.speed
                                            - vehicle.maintenance.daysBeforeMaintenance
                                            - vehicle.maintenance.mileageBeforeMaintenance
                                            - vehicle.safety.beltWarning
                                            - vehicle.safety.autoECallTriggering
                                            - environment.air.temp
                                            - privacy.state
                                            - vehicle.drivingBehavior.mode
                                            - vehicle.collision.side
                                            - vehicle.collision.severity
                                            - vehicle.preconditioning.airConditioning
                                            - vehicle.alarm.trigger.type
                                            - vehicle.alarm.status.activation
                                            - vehicle.trip.start
                                            - vehicle.trip.stop
                                            - stolen.state
                                        description: The monitored data (operand of a trigger).
                                    value:
                                        type: string
                                        description: A literal representation of the primitive data value. The client application should be aware of that and should convert it regarding the trigger data type.
                                    previous:
                                        description: Previous value of the data that fired the transition state from previous to the current (value) one. This field will be filled if and only if it was definied in the monitor parameter (previous section). It exposes only the literal representation of the primitive or enum data value (see monitor creation SPEC).
                                        type: string

                        extensions:
                            $ref: '#/components/schemas/MonitorExtensions'

                        refresh:
                            description: |
                                Indicates whether the event is a refresh (reminder) one or not.
                                * ```false``` means entering the context of the trigger (1st time the trigger valued true).
                                * ```true``` means this is it a reminder event (already within trigger satisfied context).
                            type: boolean
                    required: [values]
                settings:
                    type: object
                    properties:
                        type:
                            type: string
                            enum:
                                - DigitalKey
                                - LastMileNavigation
                        event:
                            type: object
                            description: Name of event. It can be only one of the following type
                            properties:
                                digitalKey:
                                    type: object
                                    properties:
                                        pairing:
                                            $ref: '#/components/schemas/Pairing'
                                        workflow:
                                            $ref: '#/components/schemas/Workflow'
                                            type: string
                                        status:
                                            type: string
                                            enum:
                                                - PasswordUrlGenerated
                                                - PasswordExpired
                                                - OwnerPairingCompleted
                                                - PasswordFailedTimeout
                                                - PasswordFailedLimitExceeds
                                                - KeySharedSuccessfully
                                                - Unpaired
                                                - OwnerKeyTerminated
                                                - InvalidVehicleCondition
                                                - InvalidNoPhysicalKeyAuthenticated
                                                - OwnerKeySuspended
                                                - OwnerKeyResumed
                                                - SharedKeyTerminated
                                                - SharedKeySuspended
                                                - SharedKeyResumed
                                    required: [status, workflow]
                                lastMileNavigation:
                                    type: object
                                    properties:
                                        targetLocation:
                                            $ref: '#/components/schemas/LMNTargetPosition'
                                        currentLocation:
                                            $ref: '#/components/schemas/LMNCurrentPosition'
                                    required: [targetLocation,currentLocation]
                    required: [type,event]
            required: [monitorId]
        Url:
            type: string
            description: URL format follows [RFC 3986](https://tools.ietf.org/html/rfc3986) and usually looks like this ` scheme://host[:port][/Path] `
        Pairing:
            description: Pairing url and password will be available when workflowState=InProgress and vehicleState=Preprovisioned and pwdStatus=Generated or status=VerifierInstallationSuccess
            required:
                - url
                - password
            type: object
            properties:
                url:
                    $ref: '#/components/schemas/Url'
                password:
                    type: string
        Workflow:
            type: object
            description: Digital key Workflow status for different events.
            properties:
                vehicleState:
                    type: string
                    enum:
                        - Unpaired
                        - Preprovisioned
                        - Paired
                passworddStatus:
                    type: string
                    enum:
                        - Generated
                        - Shared
                workflowState:
                    type: string
                    enum:
                        - InProgress
                        - Completed
                        - Blocked
                certificateStatus:
                    type: string
                    enum:
                        - Installed
        LMNTargetPosition:
            allOf:
                - $ref: '#/components/schemas/PositionBase'
                - properties:
                      properties:
                          $ref: '#/components/schemas/NavPostionProperties'
        LMNCurrentPosition:
            allOf:
                - $ref: '#/components/schemas/PositionBase'
        NavPostionProperties:
            type: object
            properties:
                address:
                    $ref: '#/components/schemas/Address'
                placeid:
                    type: string
                    description: Placeid for the location
                    example: ChIJN1t_tDeuEmsRUsoyG83frY4
                name:
                    type: string
                    description: Name of Place
                    example: Doltone House
                category:
                    type: string
                    description: Category of location
                    example: Restraunt
                description:
                    type: string
                    description: Description of the location
                    default: ''
                    example: ''
                phoneNumber:
                    type: string
                    description: PhoneNumber
                    default: ''
                    example: +61 2 1234 5678
                url:
                    type: string
                    description: URL format follows [RFC 3986](https://tools.ietf.org/html/rfc3986) and usually looks like this ` scheme://host[:port][/Path] `
        GeoPosition:
            required:
                -  geometry
            type: object
            properties:
                type:
                    type: string
                    default: Feature
                    enum:
                        - Feature
                geometry:
                    $ref: '#/components/schemas/Point'
        PositionBase:
            allOf:
                - $ref: '#/components/schemas/GeoPosition'
                - title: Position
        Point:
            allOf:
                - title: Point
                - description: This object expresses a GeoJSON Point as specified by [rfc7946](https://tools.ietf.org/html/rfc7946#section-3.1.2).
                  required:
                      - type
                      - coordinates
                  properties:
                      type:
                          type: string
                          default: Point
                          enum:
                              - Point
                      coordinates:
                          description: This is a simple 2 (or more) numbers vector used to define Geometry Point object.
                          type: array
                          items:
                              type: number
                              format: float
                              minItems: 2
                  example:
                      type: Point
                      coordinates:
                          - 5.970338
                          - -62.536239
        Address:
            type: object
            description: POI' address.
            properties:
                houseNumber:
                    type: string
                    description: House number on the street
                postalCode:
                    type: string
                    description: Postal Code / Zip Code
                streetName:
                    type: string
                    description: Street name
                cityName:
                    type: string
                    description: City name
                countryName:
                    type: string
                    description: Country name
                provinceName:
                    type: string
                    description: Province name

        MonitorExtensions:
            description: Defines the extra vehicle data as specified in the extended eventparam (see the extension definition in the API Spec)
            type: array
            items:
                type: object
                properties:
                    type:
                        type: string
                        description: Speficies the data type of body items.
                        enum:
                            - vehicle.doorsState
                            - vehicle.maintenance
                            - vehicle.position
                            - vehicle.alerts.active
                            - vehicle.trip
                            - vehicle.alarm
                            - vehicle.latestTelemetry
                            - vehicle.telemetry
                            - vehicle.collision
                            - vehicle.stolen
                    body:
                        type: array
                        description:
                            Extended data can be expressed as a list of objects because in some case, a vehicle data state should be expressed as a list of value (such as active alerts at a given time). In this spec, those data are expressed as generic object and the type is provided (see type field) and so  the client application should be aware of that and should convert it regarding this data type.
                        items:
                            type: object
                            properties:
                                doorState:
                                    description: Please refer to DoorsState object model from IOT Definition
                                    type: object
                                maintenance:
                                    description: Please refer to Maintenance object model from IOT Definition
                                    type: object
                                position:
                                    description: Please refer to PositionBase object model from IOT Definition
                                    type: object
                                telemetry:
                                    description: Please refer to Telemetry object model from IOT Definition
                                    type: object
                                alerts:
                                    description: Please refer to Alerts object model from IOT Definition
                                    type: array
                                    items:
                                        type: object
                                alarm:
                                    description: please refer to Alarm object model from IOT Definition
                                    type: object
                                latestTelemetry:
                                    description: Please refer to Aggregated Telemetry object model from IOT Definition
                                    type: object
                                collision:
                                    description: Please refer to Collision object model from IOT Definition
                                    type: object
                                stolen:
                                    description: Please refer to Stolen object model from IOT Definition
                                    type: object

        Extensions:
            description: Defines the extra vehicle data as specified in the extended eventparam (see the extension definition in the API Spec)
            type: array
            items:
                type: object
                properties:
                    type:
                        type: string
                        description: Speficies the data type of body items.
                        enum:
                            - vehicle.doorsState
                            - vehicle.maintenance
                            - vehicle.position
                            - vehicle.alerts.active
                            - vehicle.alarm
                            - vehicle.latestTelemetry
                    body:
                        type: array
                        description:
                            Extended data can be expressed as a list of objects because in some case, a vehicle data state should be expressed as a list of value (such as active alerts at a given time). In this spec, those data are expressed as generic object and the type is provided (see type field) and so  the client application should be aware of that and should convert it regarding this data type (please refer to main IOT definition). HAL links will not be part of objects for extensions.
                        items:
                            type: object
                            properties:
                                doorState:
                                    description: Please refer to DoorsState object model from IOT Definition
                                    type: object
                                maintenance:
                                    description: Please refer to Maintenance object model from IOT Definition
                                    type: object
                                position:
                                    description: Please refer to PositionBase object model from IOT Definition
                                    type: object
                                alerts:
                                    description: Please refer to Alerts object model from IOT Definition
                                    type: array
                                    items:
                                        type: object
                                alarm:
                                    description: please refer to Alarm object model from IOT Definition
                                    type: object
                                latestTelemetry:
                                    description: Please refer to Aggregated Telemetry object model from IOT Definition
                                    type: object

        MonitorId:
            type: string
            description: The identifier of monitor that raised the event.
        RemoteActionId:
            type: string
            description: The uniq remote action ID. This ID is returned when the remote action is posted and accepted.

        ChannelId:
            type: string
            description: ID of the channel used to notify events. This Id refers to the user channel created at subscription API.
        RemoteType:
            type: string
            enum:
                - ThermalPreconditioning
                - ElectricBatteryChargingRequest
                - Horn
                - Doors
                - Lights
                - Immobilization
                - Stolen
                - WakeUp
                - Navigation
                - Tan
        RemoteEventType:
            description: |
                The event type. See```status```for event sate.
                * Pending event is related to intermediate state of the action before it is handled by the vehicle.
                * Done event is related to a final state of the action when handled by the vehicle.

            type: string
            enum:
                - Pending
                - Done
        RemoteDoneEventStatus:
            description: |
                The reponse event status.

            type: string
            enum:
                - Success
                - AlreadyDone
                - Failed
        RemotePendingEventStatus:
            description: |
                The processing event status.

            type: string
            enum:
                - Accepted
                - WakingUpVehicle
                - CheckingVehicle
                - SentToVehicle
                - VehicleBatteryChargeTooLow
                - TooManyWakeUpsOverMonth
        RemoteFailedEventStatus:
            description: |
                The failure cause for event with failed status. This field is filled only is faillure state.

            type: string
            enum:
                - GeneralError
                - VehicleError
                - WrongCommand
                - VehicleConnectionTimeout
                - MissingRights
                - NotPossibleDueToVehicleBatteryLevel
                - NotPossibleDueToVehiclePrivacyLevel
                - TooManyWakeUpsOverMonth
                - TooManyRequestInShortTime
                - SameActionInProgress
                - NotPossibleDueToVehicleStolenState
                - VehicleInUse
                - TooManyRequestSent
                - DoorsOpen
                - VehicleErrorOrCidInside
                - CidInside
                - ExternalChargingSystemError
                - VehicleChargingSystemError
                - VehicleIsNotLocked

        RemoteEventStatus:
            type: object
            properties:
                type:
                    $ref: '#/components/schemas/RemoteEventType'
                status:
                    oneOf:
                        - $ref: '#/components/schemas/RemoteDoneEventStatus'
                        - $ref: '#/components/schemas/RemotePendingEventStatus'
                failureCause:
                    $ref: '#/components/schemas/RemoteFailedEventStatus'

            required: [type,status]



        RemoteEvent:
            title: RemoteEvent
            type: object
            properties:

                remoteActionId:
                    $ref: '#/components/schemas/RemoteActionId'
                remoteType:
                    $ref: '#/components/schemas/RemoteType'

                extensions:
                    $ref: '#/components/schemas/Extensions'
                eventStatus:
                    $ref: '#/components/schemas/RemoteEventStatus'
            required: [remoteActionId,remoteType,eventStatus]

        xError:
            type: object
            description: Detailed error
            properties:
                name:
                    type: string
                    description: A human-readable, unique name for the error. Should be mapped on the server side to ensure consistency.
                debug:
                    type: string
                    description: A unique error identifier generated on the server-side and logged for correlation purposes starting with ERROR_<UniqueId per each request>
                message:
                    type: string
                    description: A human-readable message, describing the error. This message MUST be a description of the problem NOT a suggestion about how to fix it.
            example:
                name: BAD_REQUEST
                debug: ERROR_123456789
                message: Invalid data provided.
            required:
                - name
                - message



    ########################### RESPONSES


    responses:
        PostErrorResponse:
            description: Post message error
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/xError'



                        ################### PARMS



    parameters:
        headerAttribute:
            name: <header-parameter-key>
            description: |
                An parameter key/value as specified in the registered channel in additional parameters set as an HTTP standard header entry(_can also be used as an **Authorization** (Bearer authentication)).

                **Note**:  ```This parameter is repeated as many times as parameters typed as 'header' in the declared parameter-set when registring of the channel.```
            in: header
            schema:
                type: string
        queryAttribute:
            name: <query-parameter-key>
            description: |
                An parameter key/value as specified in the registered channel in additional parameter set as HTTP standard query parameter.

                **Note**:  ```This parameter is repeated as many times as parameters typed as 'query' in the declared parameter-set when registring of the channel.```
            in: header
            schema:
                type: string